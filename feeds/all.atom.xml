<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>*JJ</title><link href="https://jdotjdot.github.io/" rel="alternate"></link><link href="https://jdotjdot.github.io/feeds/all.atom.xml" rel="self"></link><id>https://jdotjdot.github.io/</id><updated>2014-04-29T00:00:00-04:00</updated><entry><title>I gave a Hacker School Seminar</title><link href="https://jdotjdot.github.io/2014/04/i-gave-a-hacker-school-seminar/" rel="alternate"></link><updated>2014-04-29T00:00:00-04:00</updated><author><name>JJ</name></author><id>tag:https://jdotjdot.github.io,2014-04-29:2014/04/i-gave-a-hacker-school-seminar/</id><summary type="html">&lt;!-- 4/29/2014 --&gt;

&lt;p&gt;Today at Hacker School, I gave a seminar entitled &amp;#8220;Freelance and Travel for Fun and Profit,&amp;#8221; talking about the year I spent traveling the world while supporting myself as a freelance programmer.  I&amp;#8217;ve long been meaning to write this up as both a series of blog posts and a full deck to present, so it was great to have the first opportunity to finally present on it.  There was quite a bit of demand for it, and I actually gave the talk in the first place specifically because other Hacker Schoolers kept saying they&amp;#8217;d love to learn more about what I did and how I did&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;For the time being, I&amp;#8217;ll post some of the notes and such from the talk, and later I&amp;#8217;ll post as a separate series more in-depth on the details of how to think about being a&amp;nbsp;freelancer.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Workflowy document with the notes I used to present the lecture can be found &lt;a href="https://workflowy.com/shared/c6b889cd-4915-aa61-8a21-ad0242456f62/"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The map of my travels throughout that time can be found &lt;a href="http://www.travellerspoint.com/member_map.cfm?user=jdotjdot89&amp;amp;tripid=359618"&gt;here&lt;/a&gt;, courtsey of &lt;a href="http://www.travellerspoint.com"&gt;Travellerspoint&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It was a great experience giving a talk and getting excellent feedback on it, and it&amp;#8217;s a very gratifying feeling to hear from people that you&amp;#8217;ve helped reshape their thinking.  Looking forward to delivering it again, a bit more refined, to those who missed it and to the alumni who wanted to come but were unable to&amp;nbsp;attend.&lt;/p&gt;</summary><category term="hackerschool"></category><category term="freelance"></category><category term="seminar"></category><category term="travel"></category></entry><entry><title>Automatically restarting your process or server on crash</title><link href="https://jdotjdot.github.io/2014/04/restarting-your-server-on-crash/" rel="alternate"></link><updated>2014-04-10T00:00:00-04:00</updated><author><name>JJ</name></author><id>tag:https://jdotjdot.github.io,2014-04-10:2014/04/restarting-your-server-on-crash/</id><summary type="html">&lt;p&gt;While working with &lt;a href="http://github.com/lord"&gt;Robert&lt;/a&gt; on the &lt;a href="http://github.com/lord/doorbot"&gt;Doorbot&lt;/a&gt; webserver as part of our project to hook up the front door of Hacker School to the web, we ran across a small problem with the Ruby server that he had set&amp;nbsp;up.&lt;/p&gt;
&lt;p&gt;In the past, my sites have always been hosted places like Heroku or &lt;a href="http://www.webfaction.com?affiliate=thecampusrep"&gt;Webfaction&lt;/a&gt;, which take care of restarting the server in case of&amp;nbsp;shutdown.&lt;/p&gt;
&lt;p&gt;However, we were hosting the Doorbot server on a Raspberry Pi that we were planning to lock in the network closet.   This meant that no one was going to be able to get in there to physically unplug and replug the Pi, which is the method we&amp;#8217;d been using to restart the server after we (with great difficulty) got the server launch script into Raspbian&amp;#8217;s &lt;code&gt;init.d&lt;/code&gt; to start on startup.  Another method we&amp;#8217;d also been using was to &lt;span class="caps"&gt;SSH&lt;/span&gt; into the Pi to manually restart the server, but this of course wasn&amp;#8217;t a sustainable long-term solution.  If the server shut down on its own, people weren&amp;#8217;t going to be able to get through the door until someone alerted us and we restarted the server manually.   &lt;strong&gt;We needed a better solution that would automatically and reliably restart the server upon shutdown without any human&amp;nbsp;intervention.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I suggested a strategy that I presented at a &lt;a href="https://github.com/jdotjdot/Data-Scraping-Talk--PennApps-F2012-"&gt;lecture&lt;/a&gt; at &lt;a href="http://pennapps.com"&gt;PennApps&lt;/a&gt; Fall 2012.   I had previously used this strategy on some web scraping projects to get a running Python process to restart immediately upon shutdown.  For processes like that scraper or the Ruby server, if the process dies with an error, we actually don&amp;#8217;t generally care in this case why it shut down or what the error was&amp;#8212;just that it shut down and that we want it back up&amp;nbsp;immediately.  &lt;/p&gt;
&lt;p&gt;The strategy is to &lt;strong&gt;wrap the server set-up process in a Bash script&lt;/strong&gt; within a &lt;code&gt;while&lt;/code&gt; or &lt;code&gt;until&lt;/code&gt; loop, as in the following example with my old Python&amp;nbsp;scraper:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Runs our scraper indefinitely&lt;/span&gt;
&lt;span class="c"&gt;# will only stop upon a GRACEFUL exit--&lt;/span&gt;
&lt;span class="c"&gt;#  but keep in mind a graceful exit only means that&lt;/span&gt;
&lt;span class="c"&gt;#  no error is thrown, but that doesn&amp;#39;t mean that we&lt;/span&gt;
&lt;span class="c"&gt;#  actually want the program to end!&lt;/span&gt;

&lt;span class="k"&gt;until &lt;/span&gt;python scraper.py; &lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="k"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Process crashed with exit code $?.  Respawning...&amp;quot;&lt;/span&gt; &amp;gt;&amp;amp;2
    sleep 2
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For a server, you would replace &lt;code&gt;python scraper.py&lt;/code&gt; with &lt;code&gt;python manage.py runserver&lt;/code&gt; for Django, or the equivalent command in Ruby or your preferred web&amp;nbsp;framework.&lt;/p&gt;
&lt;p&gt;What happens here is the &lt;code&gt;until&lt;/code&gt; loop starts to test the &amp;#8220;condition,&amp;#8221; but the condition here is actually our intended process.  That process runs indefinitely, and ideally would never stop and we&amp;#8217;d never hit the &lt;code&gt;echo&lt;/code&gt;.  However, in the event that the server &lt;em&gt;does&lt;/em&gt; crash, we take advantage of a trick with Bash&amp;#8212;an exit upon failure will evalute &amp;#8220;false-y&amp;#8221; for the &lt;code&gt;until&lt;/code&gt; loop, and so on a crash, we will always enter and repeat the loop.  The only way to exit the loop is a successful server program exit, which will never happen, because we never intentionally shut down the&amp;nbsp;server!&lt;/p&gt;
&lt;p&gt;After wrapping the Ruby server startup call in that tiny Bash script, the server now automatically restarts itself upon&amp;nbsp;failure.&lt;/p&gt;</summary><category term="hackerschool"></category><category term="bash"></category><category term="doorbot"></category><category term="doorduino"></category><category term="server"></category><category term="crash"></category><category term="restart"></category></entry><entry><title>How to get Facebook Chat on OS X Messages</title><link href="https://jdotjdot.github.io/2014/03/how-to-get-facebook-chat-on-os-x-messages/" rel="alternate"></link><updated>2014-03-04T00:00:00-05:00</updated><author><name>JJ</name></author><id>tag:https://jdotjdot.github.io,2014-03-04:2014/03/how-to-get-facebook-chat-on-os-x-messages/</id><summary type="html">&lt;p&gt;I use Facebook Messenger to talk to many of my friends, but I find it really annoying when I&amp;#8217;m using the internet and working on other things as well to have to switch between the current window or tab and Facebook to be able to respond to anyone.  It becomes much more of a distraction because it forces me to block much more of the screen than I&amp;#8217;d otherwise have to, since I&amp;#8217;m switching to an entire browser pane of Facebook, and resizing an individual lone tab simply for Facebook Chat doesn&amp;#8217;t really work, given what happens to Facebook pages when you&amp;nbsp;resize.&lt;/p&gt;
&lt;p&gt;So, I was pleased to discover that Facebook Chat just operates on Jabber, meaning that you can add it as an account to the &lt;span class="caps"&gt;OS&lt;/span&gt; X Messages&amp;nbsp;client.&lt;/p&gt;
&lt;p&gt;Here are instructions for doing&amp;nbsp;so:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open up the Messages app; looks like the following:&lt;br&gt;&lt;img alt="Messenger App" src="http://snag.gy/N3aw0.jpg" /&gt;&lt;/li&gt;
&lt;li&gt;Go to the Accounts tab, and then add a new account by clicking the &lt;code&gt;+&lt;/code&gt; sign near the bottom&amp;nbsp;left.&lt;/li&gt;
&lt;li&gt;Select &amp;#8220;Other messages&amp;nbsp;account&amp;#8230;&amp;#8221;&lt;/li&gt;
&lt;li&gt;Under &amp;#8220;Account Type&amp;#8221;, select &amp;#8220;Jabber&amp;#8221;.  Then, for &amp;#8220;Account Name&amp;#8221;, write your Facebook &lt;span class="caps"&gt;ID&lt;/span&gt; (this is the &lt;span class="caps"&gt;ID&lt;/span&gt; that follows &lt;code&gt;https://www.facebook.com/&lt;/code&gt; when you go to your Facebook page) followed by &amp;#8220;@chat.facebook.com&amp;#8221;.  For example, Obama would put &amp;#8220;barackobama@chat.facebook.com&amp;#8221;, because if you go to &lt;a href="https://www.facebook.com/barackobama"&gt;his Facebook page&lt;/a&gt;, you&amp;#8217;ll see in the &lt;span class="caps"&gt;URL&lt;/span&gt; bar that &amp;#8220;barackobama&amp;#8221; is his account &lt;span class="caps"&gt;ID&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Put your Facebook password as your password.  If you&amp;#8217;re using 2-factor authentication (which you should be), after submitting, you&amp;#8217;ll get a text/notification with a 6-digit numerical code for you to use instead, which you should then use as the password&amp;nbsp;instead. &lt;/li&gt;
&lt;li&gt;For &amp;#8220;Server&amp;#8221;, write &amp;#8220;chat.facebook.com&amp;#8221;.&lt;br&gt;
&lt;img alt="Messages app settings" src="http://snag.gy/kFuco.jpg" /&gt;&lt;/li&gt;
&lt;li&gt;You can leave everything else unchecked, and just press &amp;#8220;Create&amp;#8221;&amp;#8212;and you&amp;#8217;re good to go!  You&amp;#8217;ll see your Facebook friends and chats alongside your iMessages and any other accounts you have on the Messages app.  Note that anything you send through the Messages app can still be seen in your Facebook windows, and anything sent to you on Facebook while logged in via Messages will show up in your computer, but if you send a Facebook message from another device, it will be updated on Facebook only and &lt;strong&gt;not&lt;/strong&gt; on the Messages&amp;nbsp;app.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This method can be used to enable Facebook chat on basically any other Jabber client, as&amp;nbsp;well.&lt;/p&gt;</summary><category term="jabber"></category><category term="os-x"></category><category term="messages-app"></category></entry></feed>