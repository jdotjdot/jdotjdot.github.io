<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>*JJ</title><link href="https://jdotjdot.github.io/" rel="alternate"></link><link href="https://jdotjdot.github.io/feeds/all.atom.xml" rel="self"></link><id>https://jdotjdot.github.io/</id><updated>2014-04-29T00:00:00-04:00</updated><entry><title>I gave a Hacker School Seminar</title><link href="https://jdotjdot.github.io/2014/04/i-gave-a-hacker-school-seminar/" rel="alternate"></link><updated>2014-04-29T00:00:00-04:00</updated><author><name>JJ</name></author><id>tag:https://jdotjdot.github.io,2014-04-29:2014/04/i-gave-a-hacker-school-seminar/</id><summary type="html">&lt;!-- 4/29/2014 --&gt;

&lt;p&gt;Today at Hacker School, I gave a seminar entitled &amp;#8220;Freelance and Travel for Fun and Profit,&amp;#8221; talking about the year I spent traveling the world while supporting myself as a freelance programmer.  I&amp;#8217;ve long been meaning to write this up as both a series of blog posts and a full deck to present, so it was great to have the first opportunity to finally present on it.  There was quite a bit of demand for it, and I actually gave the talk in the first place specifically because other Hacker Schoolers kept saying they&amp;#8217;d love to learn more about what I did and how I did&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;For the time being, I&amp;#8217;ll post some of the notes and such from the talk, and later I&amp;#8217;ll post as a separate series more in-depth on the details of how to think about being a&amp;nbsp;freelancer.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Workflowy document with the notes I used to present the lecture can be found &lt;a href="https://workflowy.com/shared/c6b889cd-4915-aa61-8a21-ad0242456f62/"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The map of my travels throughout that time can be found &lt;a href="http://www.travellerspoint.com/member_map.cfm?user=jdotjdot89&amp;amp;tripid=359618"&gt;here&lt;/a&gt;, courtsey of &lt;a href="http://www.travellerspoint.com"&gt;Travellerspoint&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It was a great experience giving a talk and getting excellent feedback on it, and it&amp;#8217;s a very gratifying feeling to hear from people that you&amp;#8217;ve helped reshape their thinking.  Looking forward to delivering it again, a bit more refined, to those who missed it and to the alumni who wanted to come but were unable to&amp;nbsp;attend.&lt;/p&gt;</summary><category term="hackerschool"></category><category term="freelance"></category><category term="seminar"></category><category term="travel"></category></entry><entry><title>Re-implementing Clojure’s comp</title><link href="https://jdotjdot.github.io/2014/04/re-implementing-clojures-comp/" rel="alternate"></link><updated>2014-04-22T00:00:00-04:00</updated><author><name>JJ</name></author><id>tag:https://jdotjdot.github.io,2014-04-22:2014/04/re-implementing-clojures-comp/</id><summary type="html">&lt;p&gt;While working through &lt;a href="http://www.braveclojure.com/functional-programming/"&gt;Clojure for the Brave and True&lt;/a&gt;, I came across an explanation of Clojure&amp;#8217;s &lt;code&gt;comp&lt;/code&gt; function and some basic implementations of versions of &lt;code&gt;comp&lt;/code&gt; that take only two arguments or three arguments.  The tutorial challenged me to try to completely re-implement &lt;code&gt;comp&lt;/code&gt; to accept an arbitrary number of function arguments, and that got me thinking that it would be a very good exercise to try in&amp;nbsp;Clojure.&lt;/p&gt;
&lt;p&gt;The book had an implentation of the two-argument &lt;code&gt;comp&lt;/code&gt; that looked something like&amp;nbsp;this;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;two-comp&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;f&lt;/span&gt; &lt;span class="nv"&gt;g&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fn &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;args&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;f&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;apply &lt;/span&gt;&lt;span class="nv"&gt;g&lt;/span&gt; &lt;span class="nv"&gt;args&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I worked off of that as a base for a while, but kept running into trouble.  I kept running into rather complicated functions-of-functions that seemed to be returning functions that operated on the input functions, rather than the actual arguments, which was not what we were looking for.  It&amp;#8217;s a bit hard to wrap your head around this, since it&amp;#8217;s very meta and we&amp;#8217;re talking about a function that has functions as arguments and returns a function of functions as its&amp;nbsp;result.&lt;/p&gt;
&lt;p&gt;I decided to take a stab at this in Python, my go-to&amp;nbsp;language.&lt;/p&gt;
&lt;p&gt;What I came up with ended up looking like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;clojure_comp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrap_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_wrap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;return_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;inner_args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="c"&gt;# Here is where we actually call the function&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_wrap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;inner_args&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;return_function&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wrap_function&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;reversed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This ended up working out very nicely, using string maniuplation as a&amp;nbsp;test:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;clojure_comp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; abcdefgh   &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;BBCDEFG&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So I gave this another shot in&amp;nbsp;Clojure.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;mycomp&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;args&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="s"&gt;&amp;quot;A function that takes an arbitrary number of functions and returns a function that &lt;/span&gt;
&lt;span class="s"&gt;  applies each of those functions, last first, to the input arguments.&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;wrapper-function&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;wrapped&lt;/span&gt; &lt;span class="nv"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fn &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;inner-args&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;wrapper&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;apply &lt;/span&gt;&lt;span class="nv"&gt;wrapped&lt;/span&gt; &lt;span class="nv"&gt;inner-args&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;reduce &lt;/span&gt;&lt;span class="nv"&gt;wrapper-function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;reverse &lt;/span&gt;&lt;span class="nv"&gt;args&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And it does&amp;nbsp;work&amp;#8212;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;user=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;mycomp&lt;/span&gt; &lt;span class="nv"&gt;clojure.string/trim&lt;/span&gt; &lt;span class="nv"&gt;clojure.string/lower-case&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;   this IS a test   &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;this is a test&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But ultimately, I think it might be a bit too Pythonic rather than right for Clojure.  I don&amp;#8217;t tend to see too many functions that declare another named function within themselves, and I also feel like this is the kind of function that might better use recursion or &lt;code&gt;loop&lt;/code&gt; than &lt;code&gt;reduce&lt;/code&gt;, which I feel like I&amp;#8217;m falling back on as a replacement for Python&amp;#8217;s convenient &lt;code&gt;for&lt;/code&gt; iteration.  &lt;/p&gt;
&lt;p&gt;That being said, it could still be a valuable way of doing it.  I recently got complimented by a Javascript developer for my use of &lt;code&gt;reduce&lt;/code&gt; in some Javascript I was writing for the &lt;a href="http://www.sefaria.org"&gt;Sefaria&lt;/a&gt; project.  He said &lt;code&gt;reduce&lt;/code&gt; and &lt;code&gt;map&lt;/code&gt; were functional elements of &lt;span class="caps"&gt;JS&lt;/span&gt; that even most seasoned Javascript developers don&amp;#8217;t use, so he was surprised that I was&amp;#8212;but to me, languages like Clojure make it seem quite natural to use, and much more elegant in many cases than iteration and&amp;nbsp;mutation.&lt;/p&gt;</summary><category term="hackerschool"></category><category term="python"></category><category term="clojure"></category><category term="comp"></category></entry><entry><title>Automatically restarting your process or server on crash</title><link href="https://jdotjdot.github.io/2014/04/restarting-your-server-on-crash/" rel="alternate"></link><updated>2014-04-10T00:00:00-04:00</updated><author><name>JJ</name></author><id>tag:https://jdotjdot.github.io,2014-04-10:2014/04/restarting-your-server-on-crash/</id><summary type="html">&lt;p&gt;While working with &lt;a href="http://github.com/lord"&gt;Robert&lt;/a&gt; on the &lt;a href="http://github.com/lord/doorbot"&gt;Doorbot&lt;/a&gt; webserver as part of our project to hook up the front door of Hacker School to the web, we ran across a small problem with the Ruby server that he had set&amp;nbsp;up.&lt;/p&gt;
&lt;p&gt;In the past, my sites have always been hosted places like Heroku or &lt;a href="http://www.webfaction.com?affiliate=thecampusrep"&gt;Webfaction&lt;/a&gt;, which take care of restarting the server in case of&amp;nbsp;shutdown.&lt;/p&gt;
&lt;p&gt;However, we were hosting the Doorbot server on a Raspberry Pi that we were planning to lock in the network closet.   This meant that no one was going to be able to get in there to physically unplug and replug the Pi, which is the method we&amp;#8217;d been using to restart the server after we (with great difficulty) got the server launch script into Raspbian&amp;#8217;s &lt;code&gt;init.d&lt;/code&gt; to start on startup.  Another method we&amp;#8217;d also been using was to &lt;span class="caps"&gt;SSH&lt;/span&gt; into the Pi to manually restart the server, but this of course wasn&amp;#8217;t a sustainable long-term solution.  If the server shut down on its own, people weren&amp;#8217;t going to be able to get through the door until someone alerted us and we restarted the server manually.   &lt;strong&gt;We needed a better solution that would automatically and reliably restart the server upon shutdown without any human&amp;nbsp;intervention.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I suggested a strategy that I presented at a &lt;a href="https://github.com/jdotjdot/Data-Scraping-Talk--PennApps-F2012-"&gt;lecture&lt;/a&gt; at &lt;a href="http://pennapps.com"&gt;PennApps&lt;/a&gt; Fall 2012.   I had previously used this strategy on some web scraping projects to get a running Python process to restart immediately upon shutdown.  For processes like that scraper or the Ruby server, if the process dies with an error, we actually don&amp;#8217;t generally care in this case why it shut down or what the error was&amp;#8212;just that it shut down and that we want it back up&amp;nbsp;immediately.  &lt;/p&gt;
&lt;p&gt;The strategy is to &lt;strong&gt;wrap the server set-up process in a Bash script&lt;/strong&gt; within a &lt;code&gt;while&lt;/code&gt; or &lt;code&gt;until&lt;/code&gt; loop, as in the following example with my old Python&amp;nbsp;scraper:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Runs our scraper indefinitely&lt;/span&gt;
&lt;span class="c"&gt;# will only stop upon a GRACEFUL exit--&lt;/span&gt;
&lt;span class="c"&gt;#  but keep in mind a graceful exit only means that&lt;/span&gt;
&lt;span class="c"&gt;#  no error is thrown, but that doesn&amp;#39;t mean that we&lt;/span&gt;
&lt;span class="c"&gt;#  actually want the program to end!&lt;/span&gt;

&lt;span class="k"&gt;until &lt;/span&gt;python scraper.py; &lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="k"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Process crashed with exit code $?.  Respawning...&amp;quot;&lt;/span&gt; &amp;gt;&amp;amp;2
    sleep 2
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For a server, you would replace &lt;code&gt;python scraper.py&lt;/code&gt; with &lt;code&gt;python manage.py runserver&lt;/code&gt; for Django, or the equivalent command in Ruby or your preferred web&amp;nbsp;framework.&lt;/p&gt;
&lt;p&gt;What happens here is the &lt;code&gt;until&lt;/code&gt; loop starts to test the &amp;#8220;condition,&amp;#8221; but the condition here is actually our intended process.  That process runs indefinitely, and ideally would never stop and we&amp;#8217;d never hit the &lt;code&gt;echo&lt;/code&gt;.  However, in the event that the server &lt;em&gt;does&lt;/em&gt; crash, we take advantage of a trick with Bash&amp;#8212;an exit upon failure will evalute &amp;#8220;false-y&amp;#8221; for the &lt;code&gt;until&lt;/code&gt; loop, and so on a crash, we will always enter and repeat the loop.  The only way to exit the loop is a successful server program exit, which will never happen, because we never intentionally shut down the&amp;nbsp;server!&lt;/p&gt;
&lt;p&gt;After wrapping the Ruby server startup call in that tiny Bash script, the server now automatically restarts itself upon&amp;nbsp;failure.&lt;/p&gt;</summary><category term="hackerschool"></category><category term="bash"></category><category term="doorbot"></category><category term="doorduino"></category><category term="server"></category><category term="crash"></category><category term="restart"></category></entry><entry><title>Matasano Crypto Challenges</title><link href="https://jdotjdot.github.io/2014/04/matasano-crypto-challenges/" rel="alternate"></link><updated>2014-04-09T00:00:00-04:00</updated><author><name>JJ</name></author><id>tag:https://jdotjdot.github.io,2014-04-09:2014/04/matasano-crypto-challenges/</id><summary type="html">&lt;p&gt;As I&amp;#8217;ve always been interested in cryptography and cybersecurity, I started working on it a bit while at Hacker School, mainly by working on the challenges in the &lt;a href="http://microcorruption.com"&gt;Microcorruption&lt;/a&gt; capture the flag&amp;nbsp;game.&lt;/p&gt;
&lt;p&gt;Today, thanks to &lt;a href="http://filippo.io"&gt;Filippo&lt;/a&gt; (also the guy behind the extremely popular and valuable &lt;a href="http://filippo.io/Heartbleed/"&gt;Heartbleed vulnerability tester&lt;/a&gt;), I ran across the &lt;a href="http://www.matasano.com/articles/crypto-challenges/"&gt;Matasano Crypto Challenges&lt;/a&gt;, a series of challenges that looks similar in nature to Capture the&amp;nbsp;Flag.&lt;/p&gt;
&lt;p&gt;If you&amp;#8217;re at all interested in doing this as well, let me know.  Looks like a lot of&amp;nbsp;fun.&lt;/p&gt;</summary><category term="hackerschool"></category><category term="crypto"></category><category term="matasano"></category><category term="capture-the-flag"></category></entry><entry><title>Ultrasonic distance detectors in Arduino</title><link href="https://jdotjdot.github.io/2014/03/ultrasonic-distance-detectors-in-arduino/" rel="alternate"></link><updated>2014-03-27T00:00:00-04:00</updated><author><name>JJ</name></author><id>tag:https://jdotjdot.github.io,2014-03-27:2014/03/ultrasonic-distance-detectors-in-arduino/</id><summary type="html">&lt;!-- 3/27/2014 --&gt;

&lt;p&gt;Matt at Hacker School has plans to go back home and hook up a Raspberry Pi or an Arduino to a motion sensor in order to detect when his cat jumps onto the table (which apparently happens too much)&amp;#8212;and maybe scare him as well, making it make a loud noise every time he does&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Since I&amp;#8217;ve worked quite a bit with Arduino at this point, between the &lt;a href="https://github.com/jdotjdot/B_FURIOUS"&gt;wireless remote control car project&lt;/a&gt; and the &lt;a href="https://github.com/jdotjdot/doorduino"&gt;internet-enabled door opener&lt;/a&gt;, Matt asked me to walk him through what the code would look like in C.  Up until now, he&amp;#8217;s been working with Arduinos using a Ruby library (I think &lt;a href="http://ruby-serialport.rubyforge.org/"&gt;this one&lt;/a&gt;), but it&amp;#8217;s fairly limited, and I also would imagine that being another step away from the C would make it harder to program the micro controller.  So we went over what the C code would look like for a very simple use&amp;nbsp;case.&lt;/p&gt;
&lt;p&gt;We set up an Arduino to detect the closest item (linearly) using the ultrasonic distance detector, and then to dim a light depending on how far the item&amp;nbsp;was.&lt;/p&gt;
&lt;p&gt;Here it is in&amp;nbsp;action:&lt;/p&gt;
&lt;iframe align="center" width="560" height="315" src="//www.youtube.com/embed/n7D4ZiQezQI" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;Schematic&lt;/h3&gt;
&lt;div class="center container"&gt;&lt;img width="700px" align="center" alt="Schematic" src="https://dl.dropboxusercontent.com/s/o2mjj69763su8rq/Ultrasonic-distance-detector.png"&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;The basic setup:&lt;/strong&gt;
The ultrasonic distance detector, the big blue thing that isn&amp;#8217;t the Arduino, is hooked up to the 5V Arduino output and to ground, and then the middle two pins are hooked up to Arduino digital pins&amp;#8212;one to trigger an ultrasonic blast, and one to listen for the blast&amp;#8217;s response.  The red &lt;span class="caps"&gt;LED&lt;/span&gt; hooked up to pin 13 flashes when nothing is detected in the vicinity, and then turns solid red when something is detected.  The yellow &lt;span class="caps"&gt;LED&lt;/span&gt; fades depending on the distance of the detected object&amp;#8212;the closer it is, the dimmer the light, unless there are no objects within the specified maximum detection range, in which case the light is completely&amp;nbsp;off.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How it works:&lt;/strong&gt;
The ultrasonic distance detector, when turned on by setting the pin hooked up to the trigger to &lt;code&gt;HIGH&lt;/code&gt;,  sends out an ultrasonic blast forward.  We have the Arduino wait about 10 microseconds for the sound to emit using &lt;code&gt;delayMicroseconds(10);&lt;/code&gt;, and then we use &lt;code&gt;pulseIn&lt;/code&gt; to wait for the sound to return.  The longer it takes the sound to return, the farther away the object is.  To find the number of centimeters away the object is, we can take the response from &lt;code&gt;pulseIn&lt;/code&gt; and divide it by &lt;code&gt;(2 * 29)&lt;/code&gt; to get the distance in centimeters rather than&amp;nbsp;milliseconds.&lt;/p&gt;
&lt;p&gt;In the case of this Arduino project, we then use that information to determine if the object is within the specified distance range (&lt;code&gt;iMaxDistance&lt;/code&gt; in the code below), and if so, we turn the red light on and scale the output to a range of 0-255, which is the allowed analog output from the Arduino to the yellow &lt;span class="caps"&gt;LED&lt;/span&gt; using &lt;code&gt;analogWrite&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;And that&amp;#8217;s&amp;nbsp;it!&lt;/p&gt;
&lt;h3&gt;The&amp;nbsp;Code&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// Credit to JamesHappy for much of this tester code&lt;/span&gt;

&lt;span class="c1"&gt;// Onboard LED should blink while searching for surface&lt;/span&gt;
&lt;span class="c1"&gt;// Onboard LED should be solid when surface is within a specified distance&lt;/span&gt;
&lt;span class="c1"&gt;// Rangefinder should only wait for echos under a calculated timeout&lt;/span&gt;


&lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;iTrigger&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// Digital Pin 2&lt;/span&gt;
&lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;iEcho&lt;/span&gt;        &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// Digital Pin 3&lt;/span&gt;
&lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;iAlertLED&lt;/span&gt;                  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;13&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Digital Pin 13&lt;/span&gt;
&lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;iEchoTimeout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// In Microseconds&lt;/span&gt;
&lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;iMaxDistance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;30&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// In Centimeters&lt;/span&gt;

&lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;iTriggerPullDown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// In Microseconds&lt;/span&gt;
&lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;iPingWidth&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// In Microseconds&lt;/span&gt;

&lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;changingLed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;9600&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;pinMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iTrigger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="no"&gt;OUTPUT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;pinMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iEcho&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="no"&gt;INPUT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;pinMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iAlertLED&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;OUTPUT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;pinMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;changingLed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;OUTPUT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;iEchoTimeout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;iMaxDistance&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mh"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mh"&gt;29&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;digitalWrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;changingLed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;HIGH&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;



&lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;digitalWrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iTrigger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;LOW&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;delayMicroseconds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iTriggerPullDown&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;digitalWrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iTrigger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;HIGH&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;delayMicroseconds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iPingWidth&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;digitalWrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iTrigger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;LOW&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;unsigned&lt;/span&gt; &lt;span class="n"&gt;long&lt;/span&gt; &lt;span class="n"&gt;ulPing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pulseIn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iEcho&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="no"&gt;HIGH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;iEchoTimeout&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ulPing&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mh"&gt;2&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mh"&gt;29&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ulPing&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;digitalWrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iAlertLED&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;HIGH&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//    digitalWrite(changingLed, ((ulPing/2/29)/iEchoTimeout*255));&lt;/span&gt;
    &lt;span class="n"&gt;analogWrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;changingLed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ulPing&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;iEchoTimeout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;255&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;SimulateLoad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;250&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;digitalWrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;changingLed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;LOW&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;digitalWrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iAlertLED&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;HIGH&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;25&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;digitalWrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iAlertLED&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;LOW&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;SimulateLoad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;225&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="n"&gt;SimulateLoad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;iDutyCycle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iDutyCycle&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="hackerschool"></category><category term="arduino"></category><category term="ultrasonic"></category><category term="distance"></category></entry><entry><title>Some things I learned about Android</title><link href="https://jdotjdot.github.io/2014/03/some-things-i-learned-about-android/" rel="alternate"></link><updated>2014-03-24T00:00:00-04:00</updated><author><name>JJ</name></author><id>tag:https://jdotjdot.github.io,2014-03-24:2014/03/some-things-i-learned-about-android/</id><summary type="html">&lt;h3&gt;Activity layouts: &lt;span class="caps"&gt;XML&lt;/span&gt; vs&amp;nbsp;Java&lt;/h3&gt;
&lt;p&gt;For a long while, I couldn&amp;#8217;t really understand the difference between the &lt;span class="caps"&gt;XML&lt;/span&gt; files and the Java files.   It seemed at first like the &lt;span class="caps"&gt;XML&lt;/span&gt; files determine what objects are available on the display for a particular activity, and then the actions and interactivity of those objects are determined by an accompanying Java file.  However, when working later with another android developer example, I saw that the buttons were actually being created &lt;em&gt;in Java&lt;/em&gt; and not included in the &lt;span class="caps"&gt;XML&lt;/span&gt; at&amp;nbsp;all:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt;
&lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Bundle&lt;/span&gt; &lt;span class="n"&gt;icicle&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;onCreate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;icicle&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;LinearLayout&lt;/span&gt; &lt;span class="n"&gt;ll&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;LinearLayout&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;mRecordButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;RecordButton&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;ll&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mRecordButton&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;LinearLayout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;LayoutParams&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                    &lt;span class="n"&gt;ViewGroup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;LayoutParams&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;WRAP_CONTENT&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;ViewGroup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;LayoutParams&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;WRAP_CONTENT&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;mPlayButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;PlayButton&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;ll&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mPlayButton&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;LinearLayout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;LayoutParams&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                    &lt;span class="n"&gt;ViewGroup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;LayoutParams&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;WRAP_CONTENT&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;ViewGroup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;LayoutParams&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;WRAP_CONTENT&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;

    &lt;span class="n"&gt;setContentView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ll&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;//super.onCreate(icicle);&lt;/span&gt;
    &lt;span class="c1"&gt;//setContentView(R.layout.activity_audio_record_test);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The commented out block at the bottom is what appears by default when creating the activity using the &lt;span class="caps"&gt;GUI&lt;/span&gt; in Android Developer Tools.  I realized that the &lt;code&gt;R.layout.activity_audio_record_test&lt;/code&gt; corresponsed to the filepath &lt;code&gt;res/layout/activity_audio_record_test.xml&lt;/code&gt;, which was the auto-generated layout &lt;span class="caps"&gt;XML&lt;/span&gt; file.  But the reason none of that was making its way to the actual app was because the &lt;code&gt;setContentView&lt;/code&gt; function that would call it is commented out, and instead there is a &lt;code&gt;setContentView(ll)&lt;/code&gt; above that uses an Android &lt;code&gt;LinearLayout&lt;/code&gt; object created entirley in&amp;nbsp;Java.&lt;/p&gt;
&lt;p&gt;To compare, in &lt;span class="caps"&gt;XML&lt;/span&gt;, this would probably look something like the&amp;nbsp;following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;LinearLayout&lt;/span&gt; &lt;span class="na"&gt;xlmns:android=&lt;/span&gt;&lt;span class="s"&gt;“http://schemas.android.com/apk/res/android”&lt;/span&gt;
    &lt;span class="na"&gt;xlmns:tools=&lt;/span&gt;&lt;span class="s"&gt;“http://schemas.android.com/tools”&lt;/span&gt;
    &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;“match_parent”&lt;/span&gt;
    &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;“match_parent”&lt;/span&gt;
    &lt;span class="na"&gt;android:paddingBottom=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@dimen/activity_vertical_margin&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;android:paddingLeft=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@dimen/activity_horizontal_margin&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;android:paddingRight=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@dimen/activity_horizontal_margin&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;android:paddingTop=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@dimen/activity_vertical_margin&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;tools:context=&lt;/span&gt;&lt;span class="s"&gt;“.AudioRecordTest”&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;Button&lt;/span&gt; 
        &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;“wrap_content”&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;“wrap_content”&lt;/span&gt;
        &lt;span class="na"&gt;android:text=&lt;/span&gt;&lt;span class="s"&gt;“Start&lt;/span&gt; &lt;span class="err"&gt;Recording”&lt;/span&gt;
        &lt;span class="na"&gt;android:Id=&lt;/span&gt;&lt;span class="s"&gt;“@+id/record_button”&lt;/span&gt;
        &lt;span class="na"&gt;android:onClick=&lt;/span&gt;&lt;span class="s"&gt;“onRecord”&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;Button&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;“wrap_content”&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;“wrap_content”&lt;/span&gt;
        &lt;span class="na"&gt;android:text=&lt;/span&gt;&lt;span class="s"&gt;“Start&lt;/span&gt; &lt;span class="err"&gt;Playing”&lt;/span&gt;
        &lt;span class="na"&gt;android:Id=&lt;/span&gt;&lt;span class="s"&gt;“@+id/play_button”&lt;/span&gt;
        &lt;span class="na"&gt;android:onClick=&lt;/span&gt;&lt;span class="s"&gt;“onPlay”&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/LinearLayout&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Much uglier, in my&amp;nbsp;opinion.&lt;/p&gt;</summary><category term="hackerschool"></category><category term="android"></category><category term="java"></category></entry><entry><title>Day 9: It works!</title><link href="https://jdotjdot.github.io/2014/02/day-9-victory/" rel="alternate"></link><updated>2014-02-20T00:00:00-05:00</updated><author><name>JJ</name></author><id>tag:https://jdotjdot.github.io,2014-02-20:2014/02/day-9-victory/</id><summary type="html">&lt;p&gt;We had a great talk by Mel Chua not long ago about different types of learning, and &lt;a href="http://de.slideshare.net/mchua/edutalk-w2014"&gt;how learning works at Hacker School&lt;/a&gt;.   One of the main things she pointed out at the beginning was that learning at Hacker School is very different than the kind of directed learning that you might find in school - all of us are going to spend a fair amount of time being &lt;strong&gt;productively lost&lt;/strong&gt;.  &lt;/p&gt;
&lt;p&gt;This means that we&amp;#8217;ll be sitting there hacking away at something, having no idea what we&amp;#8217;re doing or how it works, feeling very stupid, thinking we&amp;#8217;re not cut out for this, and then every once in a while, out of&amp;nbsp;nowhere&amp;#8230;&lt;/p&gt;
&lt;h3&gt;&lt;center&gt;It works!&lt;/center&gt;&lt;/h3&gt;
&lt;p&gt;I had one of those moments today, while working on an extremely basic android app to record a call, as part of my efforts on the Dial-Up Over Cell Phone project.  I knew absolutely no android before this and no Java, so it&amp;#8217;s been a lot to pick up at once, especially because android development has turned out to be pretty confusing and not that well designed. I was following the official &lt;a href="https://developer.android.com/training/basics/firstapp/index.html"&gt;&amp;#8220;Building Your First App&amp;#8221;&lt;/a&gt; guide, but I was having quite a bit of trouble with&amp;nbsp;it. &lt;/p&gt;
&lt;p&gt;After a while, I managed to get an extremely basic two page (or &amp;#8220;activity&amp;#8221;, in android parlance) app up on an emulator.  Eventually I actually put it on a phone, which felt pretty&amp;nbsp;cool.&lt;/p&gt;
&lt;p&gt;First page of the app:
&lt;center&gt;&lt;img src="https://dl.dropboxusercontent.com/s/l9m93na1vaiattb/Screenshot_2014-02-20-17-51-15.png" alt="First page of my app" width="50%" height="50%"&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;And then, after you&amp;#8217;ve written the message:
&lt;center&gt;&lt;img src="https://dl.dropboxusercontent.com/s/kdbtub8zh4jdt84/Screenshot_2014-02-20-17-51-27.png" alt="Writing the message" width="50%" height="50%"&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;Finally, send the message to the second page:
&lt;center&gt;&lt;img src="https://dl.dropboxusercontent.com/s/u0isb6mr4fchue5/Screenshot_2014-02-20-17-51-31.png" alt="The message was sent!" width="50%" height="50%"&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;So that was great, but ultimately, the goal of today was to get an app working where I could press a button to record a sound, and then press another button to play it back.  This is to help get me on my way towards an app where I can actually record the voice downlink of a call, which is the painful but necessary first step for my Dial-Up Over Cell Phone&amp;nbsp;project.&lt;/p&gt;
&lt;p&gt;I was having trouble with this all day.  Recording is apparently pretty fraught with bugs in android, and playing back is too. I spent much of the data looking at scary errors like &lt;code&gt;media server died&lt;/code&gt; or &lt;code&gt;incorrect format for writing&lt;/code&gt; or completely useless errors like &lt;code&gt;prepare() failed!&lt;/code&gt;  So I just kept trying different settings, different audio codecs like using &lt;code&gt;AAC&lt;/code&gt; instead of the default &lt;code&gt;3GP&lt;/code&gt;, looking at the saved audio file itself to see if maybe audio was getting written but the player just wasn&amp;#8217;t working, and then I went back to &lt;code&gt;3GP&lt;/code&gt; and noticed that the filename I was saving as didn&amp;#8217;t match so fixed that from ending in &lt;code&gt;.aac&lt;/code&gt; to &lt;code&gt;.3gp&lt;/code&gt; and then all the&amp;nbsp;sudden&lt;/p&gt;
&lt;h3&gt;&lt;center&gt;It worked!&lt;/center&gt;&lt;/h3&gt;
&lt;p&gt;I had my android app on my android phone, pressed the &amp;#8220;Audio Page&amp;#8221; button to go the audio page, and then pressed the &amp;#8220;Record&amp;#8221; button to record, recorded a sound, stopped the recording, and then pressed the &amp;#8220;Play&amp;#8221; button to play it&amp;nbsp;back!&lt;/p&gt;
&lt;p&gt;Even though I&amp;#8217;m only 80% of the way there in understanding why this particular configuration worked and I need to understand in order to go the rest of the way, it&amp;#8217;s those moments of &amp;#8220;aha!&amp;#8221; that make it all worth&amp;nbsp;it.&lt;/p&gt;</summary><category term="hackerschool"></category><category term="dial-up-over-cell-phone"></category><category term="android"></category><category term="mel-chua"></category><category term="it-works"></category><category term="productively-lost"></category></entry><entry><title>Week 2: Dial-up over cell phone</title><link href="https://jdotjdot.github.io/2014/02/dial-up-over-cell-phone/" rel="alternate"></link><updated>2014-02-20T00:00:00-05:00</updated><author><name>JJ</name></author><id>tag:https://jdotjdot.github.io,2014-02-20:2014/02/dial-up-over-cell-phone/</id><summary type="html">&lt;p&gt;This week, I decided on and started on what will be my first project for a bit, assuming everything works&amp;nbsp;out:&lt;/p&gt;
&lt;h3&gt;Internet over cell&amp;nbsp;phone&lt;/h3&gt;
&lt;p&gt;The thought behind this is that in the &lt;span class="caps"&gt;US&lt;/span&gt;, we used to have unlimited data plans and limited voice plans, but now things have switched and the carriers mostly force everyone into limited data but unlimited voice&amp;nbsp;plans. &lt;/p&gt;
&lt;p&gt;I think it would be really cool if you could use your &lt;strong&gt;voice minutes&lt;/strong&gt; to access the internet instead of your data connection, essentially transmitting arbitrary data from the internet over an analogue connection&amp;#8212;the same way was done with dial-up modems or&amp;nbsp;fax.&lt;/p&gt;
&lt;p&gt;The difference here, though, is that we&amp;#8217;d be using cellular connections, which are a lot more likely to be lossy and/or drop calls than the landlines that used to be used for this kind of&amp;nbsp;thing.&lt;/p&gt;
&lt;hr /&gt;
&lt;h4&gt;Getting&amp;nbsp;Started&lt;/h4&gt;
&lt;p&gt;I got started with all of this yesterday, and by speaking to quite a few people, I was assisted in boiling the overall project down into a basic stack that should cover all elements of what would be necessary for this technology, from the highest-level to the lowest-level&amp;nbsp;layer:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Compression&lt;/strong&gt;
This would be taking the data pulled from the internet (a web page, a picture, whatever) and compressing it so that I have physically less data to send.  There are many compression algorithms already available, many of which can slice up the data into smaller chunks to be sent out separately like I will have to do, so I will use a library that&amp;#8217;s already built.  &lt;code&gt;LZMA&lt;/code&gt; was recommended to me as a good compression&amp;nbsp;algorithm.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Transport protocol&lt;/strong&gt;
This is one of the major pieces of this technology that I&amp;#8217;m going to have to design and implement effectively from scratch.  Somehow, I need a way for the sending server to decide how to bundle up the different packets of compressed information and send them one at a time (or more than one at at time) similar to how it&amp;#8217;s done currently on the internet.
It&amp;#8217;s kind of like the way it was sending letters by mail before telephone and internet - the sender would send a letter and would have no way of knowing if the intended recipient received it unless he sent a letter back, as well.  Current internet protocols (like &lt;span class="caps"&gt;TCP&lt;/span&gt;) have this built in in what is called a &lt;a href="http://www.inetdaemon.com/tutorials/internet/tcp/3-way_handshake.shtml"&gt;&amp;#8220;three-way handshake&amp;#8221;&lt;/a&gt; so that the two computers know that they are both sending and receiving.
Super-summarized, if we continued with the letter-sending comparison, it&amp;#8217;s something along these&amp;nbsp;lines:&lt;/li&gt;
&lt;li&gt;Bob sends a letter to Alice, saying &amp;#8220;Hey!  Did you receive this letter?&amp;#8221;&lt;ul&gt;
&lt;li&gt;This is called the &lt;strong&gt;&lt;span class="caps"&gt;SYN&lt;/span&gt;&lt;/strong&gt; packet, since Bob(&amp;#8216;s server) is asking to &lt;strong&gt;synchronize&lt;/strong&gt; with&amp;nbsp;Alice&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Alice, if she receives the letter, sends one back to Bob, saying &amp;#8220;Yup, got yours!  Are you getting this one?&amp;#8221;&lt;ul&gt;
&lt;li&gt;This is called the &lt;strong&gt;&lt;span class="caps"&gt;SYN&lt;/span&gt;-&lt;span class="caps"&gt;ACK&lt;/span&gt;&lt;/strong&gt; packet, because Alice is &lt;strong&gt;acknowledging&lt;/strong&gt; Bob&amp;#8217;s letter and also asking to &lt;strong&gt;synchronize&lt;/strong&gt; with&amp;nbsp;him.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finally, Bob receives Alice&amp;#8217;s letter and sends one back saying &amp;#8220;Yup, got yours too!  We&amp;#8217;re in&amp;nbsp;business.&amp;#8221;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This final packet in the handshake is called the &lt;strong&gt;&lt;span class="caps"&gt;ACK&lt;/span&gt;&lt;/strong&gt; packet, because it&amp;#8217;s just an &lt;strong&gt;acknowledgement&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;#8217;m basically going to have to do the equivalent of this using tones over a cell phone&amp;nbsp;line.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Framing&lt;/strong&gt;
In this layer, I will take the data that the user requested from the internet, and chop it up into little pieces that can be sent individually so that I don&amp;#8217;t have to send it all at once.
This is necessary because it would be too difficult to send all the requested data all at once in one giant package.  One way you could think about it is to compare it to if you had to send the entirety of Harry Potter to someone by mail, and you could only use normal envelopes, because sending by box was too expensive.  Stuffing it all in one envelope isn&amp;#8217;t really practical and could easily get messed up, plus if it gets lost, you&amp;#8217;ve lost everything.   What you would do is but the books up into a bunch of different pieces, stuff them all into separate envelopes, and then send those all out to reach the requester.
However, since they may all arrive at different times, you&amp;#8217;ll probably want to number the enveleopes to make sure that the requester (a) knows the order that they should get put back together in and (b) can tell if any of the envelopes didn&amp;#8217;t make it all the way through, so they can request them from you again.
It&amp;#8217;s obviously more complex than that, but those are the basics behind the transport protocol&amp;#8212;the system of deciding how much to put in each envelope, the numbering of the envelope, and sending, receiving, and acknowledgement of the envelope is all part of framing and the&amp;nbsp;protocol.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Error-correcting Code&lt;/strong&gt;
Hamming code or&amp;nbsp;Golay&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Symbol modulation&lt;/strong&gt;
&lt;span class="caps"&gt;QAM&lt;/span&gt; or &lt;span class="caps"&gt;PSK&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Audio&lt;/strong&gt;
4- or 8-bit&amp;nbsp;harmonics&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;(To be&amp;nbsp;completed&amp;#8230;)&lt;/em&gt;&lt;/p&gt;</summary><category term="hackerschool"></category><category term="dial-up-over-cell-phone"></category><category term="tcp"></category><category term="internet"></category><category term="framing"></category><category term="signal-processing"></category><category term="error-correction"></category><category term="compression"></category></entry><entry><title>The importance of a good keyboard</title><link href="https://jdotjdot.github.io/2014/02/the-importance-of-a-good-keyboard/" rel="alternate"></link><updated>2014-02-20T00:00:00-05:00</updated><author><name>JJ</name></author><id>tag:https://jdotjdot.github.io,2014-02-20:2014/02/the-importance-of-a-good-keyboard/</id><summary type="html">&lt;p&gt;Something I have been thinking about a fair amount but sounds ridiculous to some people is the importance of a good keyboard.  The more you work at computers and type, the more it matters.  I think that programmers, being more tightly intertwined with the history of computing, probably have a bit more of a culture around keyboards than the average office would - but that doesn&amp;#8217;t mean that it&amp;#8217;s not particularly relevant to&amp;nbsp;everyone.&lt;/p&gt;
&lt;p&gt;I thought that &amp;#8220;they just didn&amp;#8217;t make keyboards like they used to&amp;#8221; until Zach reintroduced me to mechanical keyboards, with this one that he built himself that I&amp;#8217;ve been using:
&lt;img alt="The keyboard I'm currently using" src="https://dl.dropboxusercontent.com/s/5aeml7lkyptmi99/2014-02-18%2011.41.57.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Mechanical keyboards have real switches and springs rather than the rubber that&amp;#8217;s in most laptop and regular cheap keyboards today.  The mechanical aspect of it gives the user real feedback and &amp;#8220;clickiness&amp;#8221;, which is not only satisfying but actually lets you type more quickly.  When using a regular keyboard, there&amp;#8217;s no obvious feedback that lets you know when the keypress has been registered by the device, so you have to exert more pressure and push the key all the way down.  With mechanical keyboards, the clicky feedback lets you know when you&amp;#8217;ve pushed the key far enough and then let go immediately and move onto the next one.  I know it&amp;#8217;s hard to imagine how that helps, but in practice, it feels very different and much more&amp;nbsp;efficient.&lt;/p&gt;
&lt;p&gt;Since then, I&amp;#8217;ve been shopping around at a few computer stores to start trying to figure out what it actually is that I care about in a keyboard.  I boiled it down to a few key&amp;nbsp;categories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Size of keyboard (key&amp;nbsp;spacing)&lt;/li&gt;
&lt;li&gt;Size of the&amp;nbsp;keys&lt;/li&gt;
&lt;li&gt;Feedback (aka&amp;nbsp;&amp;#8220;crunchiness&amp;#8221;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Things that I was surprised to find did not end up on the&amp;nbsp;list:&lt;/p&gt;
&lt;h3&gt;Key&amp;nbsp;layout&lt;/h3&gt;
&lt;p&gt;I have some preferences regarding where things like the Home or End keys are (or that they exist&amp;#8212;looking at you, Mac keyboards), but ultimately, as long as all of the keys immediately next to the normal &lt;span class="caps"&gt;QWERTY&lt;/span&gt; layout where the same, I generally didn&amp;#8217;t have too much  trouble readjusting to to different locations for lesser-used buttons like &amp;#8220;Print&amp;nbsp;Screen&amp;#8221;.&lt;/p&gt;
&lt;h3&gt;Actually having the names of the&amp;nbsp;keys&lt;/h3&gt;
&lt;p&gt;Granted, this one will be far more important for most people, but I turned out to be enough of a touch typist that I don&amp;#8217;t actually need the characters to be displayed on the keys at all.   I did run a cross a couple issues when trying to use the non-labeled Windows keyboard on a Mac, but I think that was due more to being unfamiliar with Mac commands, particularly not being sure how the Windows keyboard would end up mapping to&amp;nbsp;them.&lt;/p&gt;
&lt;p&gt;At Hacker School, we happen to have one of what is generally considered by many to be the best keyboard ever made: the &lt;a href="http://en.wikipedia.org/wiki/Model_M_keyboard"&gt;Model M&lt;/a&gt;, known for its extreme&amp;nbsp;clickiness.&lt;/p&gt;
&lt;p&gt;I really enjoyed trying it out, and I&amp;#8217;m going to be getting a mechanical keyboard myself for sure - I just have to decide which, and what is worth the price, since they can run&amp;nbsp;$80-$130.&lt;/p&gt;</summary><category term="keyboards"></category><category term="hackerschool"></category></entry><entry><title>Days 3-4: More algorithms, CTF, whoops</title><link href="https://jdotjdot.github.io/2014/02/day-3-more-algorithms/" rel="alternate"></link><updated>2014-02-13T00:00:00-05:00</updated><author><name>JJ</name></author><id>tag:https://jdotjdot.github.io,2014-02-13:2014/02/day-3-more-algorithms/</id><summary type="html">&lt;h3&gt;Algorithms&lt;/h3&gt;
&lt;h4&gt;Selection&amp;nbsp;sort&lt;/h4&gt;
&lt;p&gt;Just going through left to right, finding the new minimum of the unsorted items, and swapping it with the left most unsorted&amp;nbsp;item.&lt;/p&gt;
&lt;h4&gt;Insertion&amp;nbsp;sort&lt;/h4&gt;
&lt;p&gt;Going from left to right, and moving the leftmost unsorted item one item left at a time until we hit the beginning of the array or an item smaller than the one we&amp;#8217;re currently&amp;nbsp;moving.&lt;/p&gt;
&lt;h4&gt;Shellsort&lt;/h4&gt;
&lt;p&gt;Insertion sort, but making jumps of size &lt;code&gt;h&lt;/code&gt;.
Interesting point that the professor made was that if you &lt;em&gt;h&lt;/em&gt;-sort an array and then &lt;em&gt;g&lt;/em&gt;-sort it, it still remains &lt;em&gt;h&lt;/em&gt;-sorted.  This was not something I had thought of offhand, but it makes perfect&amp;nbsp;sense.&lt;/p&gt;
&lt;p&gt;Shellsort is generally pretty fast unless the array size is&amp;nbsp;huge.&lt;/p&gt;
&lt;h3&gt;Hacking&lt;/h3&gt;
&lt;p&gt;I started playing around with a really cool embedded security capture the flag game called &lt;a href="https://microcorruption.com/login"&gt;Microcorruption&lt;/a&gt;.  &amp;#8220;Capture the Flag&amp;#8221; games, when referring to computer security, are complex and involved games with series of levels where you have to find the (deliberately placed) vulnerability in the server or website, etc. at each level and find a secret file, codeword, or password hidden there.  Stripe has run a few of these relating to breaking into websites, so I&amp;#8217;m very excited about this one, which actually works with breaking into (virtual) hardware to break into pretend warehouses.  Very&amp;nbsp;exciting.&lt;/p&gt;
&lt;p&gt;It would shock me if I find myself moving a bit more towards studying hardware and network security while I&amp;#8217;m&amp;nbsp;here.&lt;/p&gt;
&lt;h3&gt;Blowing up my&amp;nbsp;computer&lt;/h3&gt;
&lt;p&gt;Whoops.   Accidentally breaking Windows took up the latter half of the day.  Still working on fixing it, even though it&amp;#8217;s already the next day.  Might have to get a new&amp;nbsp;computer.&lt;/p&gt;</summary><category term="hackerschool"></category><category term="algorithms"></category><category term="sort"></category></entry><entry><title>Day 1: First day of Hacker School</title><link href="https://jdotjdot.github.io/2014/02/first-day-of-hacker-school/" rel="alternate"></link><updated>2014-02-11T00:00:00-05:00</updated><author><name>JJ</name></author><id>tag:https://jdotjdot.github.io,2014-02-11:2014/02/first-day-of-hacker-school/</id><summary type="html">&lt;p&gt;Thanks for coming and checking out this blog!   I&amp;#8217;ll be posting about my adventures and working during &lt;a href="http://www.hackerschool.com"&gt;Hacker School&lt;/a&gt; for the next few&amp;nbsp;months.&lt;/p&gt;
&lt;p&gt;The first day was great&amp;#8212;everyone was extremely friendly, welcoming, and&amp;nbsp;open.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m currently still deciding what I&amp;#8217;ll be working on for the first couple of weeks.  Right now, I have a very long laundry list of everything I&amp;#8217;d &lt;em&gt;like&lt;/em&gt; to be working&amp;nbsp;on:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(This list will be updated periodically as I think of new&amp;nbsp;ideas)&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Algorithms&lt;/li&gt;
&lt;li&gt;Machine&amp;nbsp;Learning&lt;/li&gt;
&lt;li&gt;Functional programming (Clojure and/or Haskell)&lt;ul&gt;
&lt;li&gt;4clojure&lt;/li&gt;
&lt;li&gt;Clojurekoans&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Learn You a Haskell for Great&amp;nbsp;Good&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Improving my knowledge of&amp;nbsp;Javascript&lt;/li&gt;
&lt;li&gt;Learning the basics of front-end web&amp;nbsp;design&lt;/li&gt;
&lt;li&gt;Basic JavaScript animation (animation or&amp;nbsp;game?)&lt;/li&gt;
&lt;li&gt;AngularJS&lt;/li&gt;
&lt;li&gt;C or&amp;nbsp;C++&lt;/li&gt;
&lt;li&gt;Working with hardware like Raspberry Pis or&amp;nbsp;Arduinos&lt;/li&gt;
&lt;li&gt;Working with&amp;nbsp;RFIDs&lt;/li&gt;
&lt;li&gt;iOS or Android development
  &amp;lt;!&amp;#8212; + Moto&amp;nbsp;X&lt;/li&gt;
&lt;li&gt;Justin has spare iPhone 4&amp;nbsp;&amp;#8212;&amp;gt;&lt;/li&gt;
&lt;li&gt;contribute to&amp;nbsp;Meteor&lt;/li&gt;
&lt;li&gt;Genetic&amp;nbsp;algorithms&lt;/li&gt;
&lt;li&gt;computer security (through &lt;span class="caps"&gt;CTF&lt;/span&gt; games, most&amp;nbsp;likely)&lt;/li&gt;
&lt;li&gt;Microcorruption&lt;/li&gt;
&lt;li&gt;build a remote control&amp;nbsp;car&lt;/li&gt;
&lt;li&gt;Internet data via &amp;#8216;wireless&amp;nbsp;fax&amp;#8217;&lt;/li&gt;
&lt;li&gt;Android&amp;nbsp;dev&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;TCP&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Signal processing &lt;!-- see Zulip on python/signal processing --&gt;&lt;/li&gt;
&lt;li&gt;learning networking and streaming (Python or&amp;nbsp;Node)&lt;/li&gt;
&lt;li&gt;learning vim (or maybe&amp;nbsp;emacs&lt;/li&gt;
&lt;li&gt;http://vim-adventures.com&lt;/li&gt;
&lt;li&gt;brackets.io&lt;/li&gt;
&lt;li&gt;http://inventwithpython.com/hacking/chapters/&lt;/li&gt;
&lt;li&gt;d3,&amp;nbsp;three.js&lt;/li&gt;
&lt;li&gt;React.js, sockets (a la&amp;nbsp;own.rileyjshaw.com)&lt;/li&gt;
&lt;/ul&gt;</summary><category term="hackerschool"></category><category term="getting-started"></category></entry></feed>