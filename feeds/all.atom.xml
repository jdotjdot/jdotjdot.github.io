<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>*JJ</title><link href="http://blog.jdotjdot.com/" rel="alternate"></link><link href="http://blog.jdotjdot.com/feeds/all.atom.xml" rel="self"></link><id>http://blog.jdotjdot.com/</id><updated>2014-06-05T19:51:26-04:00</updated><entry><title>Tricking Markdown to let me use ![]() syntax within HTMLÂ tags</title><link href="http://blog.jdotjdot.com/2014/06/tricking-markdown-to-let-me-use-syntax-within-html-tags/" rel="alternate"></link><updated>2014-06-05T19:51:26-04:00</updated><author><name>JJ</name></author><id>tag:blog.jdotjdot.com,2014-06-05:2014/06/tricking-markdown-to-let-me-use-syntax-within-html-tags/</id><summary type="html">&lt;p&gt;This is a short post on a technique I discovered to trick Markdown (at least the brand of Markdown that I&amp;#8217;ve been using that comes with Pelican) to let you stick Markdown-style syntax inside of &lt;span class="caps"&gt;HTML&lt;/span&gt; tags and have it still be&amp;nbsp;parsed.&lt;/p&gt;
&lt;p&gt;My particular use-case here was&amp;nbsp;images.&lt;/p&gt;
&lt;h3&gt;&lt;span class="caps"&gt;TL&lt;/span&gt;;&lt;span class="caps"&gt;DR&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Though normally Markdown doesn&amp;#8217;t parse anything inside of &lt;span class="caps"&gt;HTML&lt;/span&gt; tags, you can use Markdown syntax inside of &lt;span class="caps"&gt;HTML&lt;/span&gt; tags in a Markdown file by tricking the Markdown using fake &lt;span class="caps"&gt;HTML&lt;/span&gt; closing tags within a comment.  Example below, using Markdown image syntax along with Pelican&amp;#8217;s &lt;a href="http://pelican.readthedocs.org/en/latest/content.html#linking-to-internal-content"&gt;internal content linking&lt;/a&gt;&amp;nbsp;syntax:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;center&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- &amp;lt;/center&amp;gt; --&amp;gt;&lt;/span&gt;![My Image!]({filename}/images/myimage.png)&lt;span class="nt"&gt;&amp;lt;/center&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This should render a centered image in the &lt;span class="caps"&gt;HTML&lt;/span&gt;, properly rendering the Markdown image syntax, like&amp;nbsp;so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;center&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- &amp;lt;/center&amp;gt; --&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;My Image!&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://myblogurl.com/images/myimage.png.&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/center&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;You can always stick arbitrary &lt;span class="caps"&gt;HTML&lt;/span&gt; inside a Markdown document, and it will pass through into the final rendered &lt;span class="caps"&gt;HTML&lt;/span&gt; document unchanged.  This is often done for images, because even though Markdown has an image&amp;nbsp;syntax:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//image-URL/)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Most flavors of Markdown don&amp;#8217;t allow you to set the width and height, so people tend to use straight-up &lt;span class="caps"&gt;HTML&lt;/span&gt;&amp;nbsp;instead.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;alt-text&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://image-URL&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Because of difficulties with centering, as long as you&amp;#8217;re using &lt;span class="caps"&gt;HTML&lt;/span&gt;, it&amp;#8217;s also easy to center the image using &lt;code&gt;&amp;lt;center&amp;gt;&lt;/code&gt; tags or by using styling, whether in-line styling or adding a class to your image.  Vertical styling can be a pain though, and what I tended to need to do was stick everything inside a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; in order to center&amp;nbsp;it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text-align: center;&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;path/to/image&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- or --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;center&amp;gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/path/to/image&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/center&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;The Problem: Relative URLs and other Markdown&amp;nbsp;syntax&lt;/h2&gt;
&lt;p&gt;The problem that arose in my particular case was trying to center an image while using relative URLs in the Markdown to specify the image source.  In the Pelican docs, there&amp;#8217;s a section on &lt;a href="http://pelican.readthedocs.org/en/latest/content.html#linking-to-internal-content"&gt;linking to internal content&lt;/a&gt; which specifies the following syntax for linking to any internal content within&amp;nbsp;Markdown:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;My&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;]({&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;images&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;myimage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Unfortunately, the &lt;code&gt;{filename}/file/path&lt;/code&gt; syntax only works within a Markdown-style image or link tag, and so I couldn&amp;#8217;t use that syntax within an &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag.  However, if I wanted to center the image, I &lt;em&gt;needed&lt;/em&gt; to have my image appear within manually-specified &lt;code&gt;&amp;lt;center&amp;gt;&lt;/code&gt; tags or a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;.  This posed an issue, as Markdown does not process anything within manually specified &lt;span class="caps"&gt;HTML&lt;/span&gt; tags, so you would run across the following&amp;nbsp;issue:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;&amp;lt;!-- Markdown: --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;center&amp;gt;&lt;/span&gt;![My Image](http://image/path)&lt;span class="nt"&gt;&amp;lt;/center&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- will be rendered in HTML as: --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;center&amp;gt;&lt;/span&gt;![My Image](http://image/path)&lt;span class="nt"&gt;&amp;lt;/center&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;The Solution: Trick&amp;nbsp;Markdown&lt;/h2&gt;
&lt;p&gt;I took a guess and figured that the Markdown parser was relatively lazy and didn&amp;#8217;t take great care when refusing to parse anything within &lt;span class="caps"&gt;HTML&lt;/span&gt; tags&amp;#8212;my bet was that when it encountered an opening &lt;span class="caps"&gt;HTML&lt;/span&gt; tag, it simply stopped parsing until it encountered the close of that tag.  If I was right, that meant I could trick the parser like&amp;nbsp;so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;center&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- &amp;lt;/center&amp;gt; --&amp;gt;&lt;/span&gt;![My Image!]({filename}/images/myimage.png)&lt;span class="nt"&gt;&amp;lt;/center&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And sure enough, it works!  This creates a centered image in the &lt;span class="caps"&gt;HTML&lt;/span&gt;, properly rendering the Markdown image syntax, like&amp;nbsp;so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;center&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- &amp;lt;/center&amp;gt; --&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;My Image!&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://myblogurl.com/images/myimage.png.&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/center&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;A Better Solution for&amp;nbsp;Pelican&lt;/h2&gt;
&lt;p&gt;If you&amp;#8217;re using Pelican, the better solution ultimately is to use the &lt;a href="https://github.com/getpelican/pelican-plugins/tree/master/liquid_tags"&gt;Liquid-style tags&lt;/a&gt; plugin, which should not only let you specify the width and height but also let you stick it inside an &lt;span class="caps"&gt;HTML&lt;/span&gt; tag.  You still get to use the relative filename Pelican syntax, as&amp;nbsp;well:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;center&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;img&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;}/&lt;/span&gt;&lt;span class="nv"&gt;images&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;Screenshot_2014-02-20-17-51-27.png&lt;/span&gt; &lt;span class="m"&gt;361&lt;/span&gt; &lt;span class="m"&gt;643&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Example image&amp;quot;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/center&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However, what I&amp;#8217;ve discovered above should remain useful to those using straight Markdown without access to plugins and who don&amp;#8217;t want to have to get creative with their blog theme or&amp;nbsp;Javascript. &lt;/p&gt;</summary><category term="pelican"></category><category term="markdown"></category><category term="html"></category><category term="images"></category></entry><entry><title>Text-to-Columns in Google Docs Spreadsheets (withÂ Python)</title><link href="http://blog.jdotjdot.com/2014/06/text-to-columns-in-google-docs/" rel="alternate"></link><updated>2014-06-01T19:11:00-04:00</updated><author><name>JJ</name></author><id>tag:blog.jdotjdot.com,2014-06-01:2014/06/text-to-columns-in-google-docs/</id><summary type="html">&lt;p&gt;Despite being an Excel power user, I&amp;#8217;m currently without Excel on my computer for the time being so for some data analysis I had to do I had to make do with Google Docs&amp;#8217; spreadsheets.  While decent, and impressive for a web application, unfortunately it&amp;#8217;s not great for dealing with large amounts of data.  Additionally, it lacks some glaring functionality, particularly a &amp;#8220;Text to Columns&amp;#8221; utility, which is useful for converting in-line a csv-like delimited string of data into individual cells.  While there are a couple of third-party-written add-ins for this, they don&amp;#8217;t work very&amp;nbsp;well.&lt;/p&gt;
&lt;h3&gt;My&amp;nbsp;Fix&lt;/h3&gt;
&lt;p&gt;The best way I found to deal with this involved a couple of manual steps, but saved me a lot of time overall.  The process was effectively the&amp;nbsp;following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Copy cell with data from&amp;nbsp;spreadsheet&lt;/li&gt;
&lt;li&gt;Paste into&amp;nbsp;Python&lt;/li&gt;
&lt;li&gt;Process with Python, returning string ready to be copy/pasted back into Google&amp;nbsp;Docs&lt;/li&gt;
&lt;li&gt;Paste into Google docs in appropriate&amp;nbsp;row&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The biggest challenge here was preparing a string to return that Google Docs would automatically paste into the corresponding columns as appropriate rather than a single cell.  I figured out the right formatting by analyzing exactly what the contents of my clipboard were when I copied multiple columns from the spreadsheet.  It turned out that the big secret was that the data was simply tab-delimited, so all I had to do was generate tab-delimited strings to paste back into Google&amp;nbsp;Docs.&lt;/p&gt;
&lt;p&gt;I used Python specifically in order to take advantage of the excellent &lt;code&gt;csv&lt;/code&gt; built-in module, which is great at parsing all kinds of oddly formatted and delimited&amp;nbsp;files.&lt;/p&gt;
&lt;p&gt;Code you can use would be somewhat as&amp;nbsp;follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;StringIO&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;text_to_columns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;    A function that takes in a single row of delimited data from a spreadsheet, and returns a tab-delimited string response meant to be copied and pasted back into the spreadsheet to be automatically resolved into the appropriate columns.  Note that you will likely have to `print` the return string in order to copy the tabs correctly.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

    &lt;span class="c"&gt;# We need to use StringIO here because csv.reader only reads buffers&lt;/span&gt;
    &lt;span class="n"&gt;reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I copied the appropriate cell from the spreadsheet, pasted into the console like&amp;nbsp;so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;&amp;lt;paste&amp;gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;enter&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Or for multiple lines, for convenience, like&amp;nbsp;so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;#39;&amp;#39;&amp;lt;paste&amp;gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&amp;lt;paste&amp;gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And then I ran them all through the&amp;nbsp;function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;text_to_columns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And then I copied the printed&amp;nbsp;result.&lt;/p&gt;
&lt;p&gt;Note that I used &lt;code&gt;print&lt;/code&gt; rather than simply returning the result because I needed output that correctly rendered the tabs rather than rendering &lt;code&gt;\t&lt;/code&gt;, which is Python&amp;#8217;s in-language way of displaying tabs.  Google Docs would only correctly place the data into separate columns if I had copied actual&amp;nbsp;tabs.&lt;/p&gt;
&lt;h3&gt;Extending this&amp;nbsp;solution&lt;/h3&gt;
&lt;p&gt;The true best way of extending this would be to find something as good as Python&amp;#8217;s &lt;code&gt;csv.reader&lt;/code&gt; in Javascript and building a Google Apps Script with&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Otherwise, there is likely a way to have Python pull the contents of the clipboard and then place the results of the function in the clipboard.  If you know of how to do this, I&amp;#8217;d be interested to hear&amp;nbsp;how.&lt;/p&gt;
&lt;h2&gt;Update&lt;/h2&gt;
&lt;p&gt;I ran across &lt;a href="http://www.macdrifter.com/2011/12/python-and-the-mac-clipboard.html"&gt;this excellent blog post&lt;/a&gt; that describes some useful strategies and libraries for trying to access the clipboard from Python.  I haven&amp;#8217;t tried it yet, but it&amp;#8217;s worth looking into.  Note that if you use &lt;code&gt;pyobjc&lt;/code&gt; it takes a very long time to compile if you install using &lt;code&gt;pip&lt;/code&gt;.&lt;/p&gt;</summary><category term="text-to-columns"></category><category term="google-docs"></category><category term="spreadsheets"></category><category term="python"></category></entry><entry><title>Ruby-like string interpolation inÂ Python</title><link href="http://blog.jdotjdot.com/2014/05/ruby-like-string-interpolation-in-python/" rel="alternate"></link><updated>2014-05-29T18:18:19-04:00</updated><author><name>JJ</name></author><id>tag:blog.jdotjdot.com,2014-05-29:2014/05/ruby-like-string-interpolation-in-python/</id><summary type="html">&lt;p&gt;I&amp;#8217;ve been experimenting with Rails a bit for the past couple weeks.  This has been pretty exciting for me, as I&amp;#8217;ve generally been much more of a Python developer and I&amp;#8217;d never touched Ruby before, so it was very interesting to see a completely different approach to programming and language&amp;nbsp;philosophy.&lt;/p&gt;
&lt;p&gt;While the lack of parentheses and many conventions that you &amp;#8220;just have to learn&amp;#8221; sometimes frustrate me, at least from my first couple of weeks with the language, I&amp;#8217;ve seen quite a few features that I like and somewhat wish I had available to me in Python.   One of these is &lt;strong&gt;string interpolation&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;String interpolation: To replace a variable with its value within a&amp;nbsp;string.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Ruby&lt;/h2&gt;
&lt;p&gt;Ruby implements string interpolation like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;001&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;stringvar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;I&amp;#39;m a string&amp;quot;&lt;/span&gt;
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;I&amp;#39;m a string&amp;quot;&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;002&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;numvar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;003&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;This is stringvar: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;stringvar&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, and this is numvar: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;numvar&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;This is stringvar: I&amp;#39;m a string, and this is numvar: 3&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that it only works with double-quotes (&lt;code&gt;"&lt;/code&gt;) which are &amp;#8220;weaker.&amp;#8221;  If you try it with single-quotes, you&amp;#8217;ll get the&amp;nbsp;following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;004&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;This is stringvar: #{stringvar}, and this is numvar: #{numvar}&amp;#39;&lt;/span&gt;
&lt;span class="no"&gt;This&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="ss"&gt;stringvar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#{stringvar}, and this is numvar: #{numvar}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;My understanding is that you can do this with anything accessible within the local scope, so that would include class or global variables (e.g., ones beginning with &lt;code&gt;@&lt;/code&gt;).  The flexibility of string interpolation goes even farther, though, as you can actually call methods and perform other arbitrary operations within the&amp;nbsp;interpolation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;010&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Upper case: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;stringvar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upcase&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Upper case: I&amp;#39;M A STRING&amp;quot;&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;011&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Addition: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;numvar&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Addition: 7&amp;quot;&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;012&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add10&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;013&lt;/span&gt;&lt;span class="o"&gt;?&amp;gt;&lt;/span&gt;   &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;014&lt;/span&gt;&lt;span class="o"&gt;?&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="ss"&gt;:add10&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;015&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Method call: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;add10&lt;/span&gt; &lt;span class="n"&gt;numvar&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Method call: 13&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Clearly powerful, but could also be somewhat&amp;nbsp;dangerous.&lt;/p&gt;
&lt;h2&gt;Python&lt;/h2&gt;
&lt;p&gt;Python, with the philosophy &amp;#8220;explicit is better than implicit&amp;#8221;, does not have this string interpolation in quite the same way&amp;#8212;you need to pass in what you&amp;#8217;d like to interpolate&amp;nbsp;explicitly.&lt;/p&gt;
&lt;p&gt;The old syntax for this (and still used by many today) is the&amp;nbsp;following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;This is a string &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;, or a number: &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;, or a number as a string: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; \
&lt;span class="o"&gt;...&lt;/span&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;arbitrary string&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;39&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;This is a string arbitrary string, or a number: 3, or a number as a string: 39&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Example with formatting: &lt;/span&gt;&lt;span class="si"&gt;%.4f&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;Example with formatting: 3.0000&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Named arguments: &lt;/span&gt;&lt;span class="si"&gt;%(hey)s&lt;/span&gt;&lt;span class="s"&gt;, &lt;/span&gt;&lt;span class="si"&gt;%(name)s&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;hey&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Hey&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Jason&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;Named arguments: Hey, Jason&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The new style is a &lt;code&gt;.format&lt;/code&gt; method called directly on the&amp;nbsp;string:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Lots of {} to {verb} here, like binary conversion: {num:b}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;examples&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;verb&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;show&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;Lots of examples to show here, like binary conversion: 11&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And you are also able to access objects&amp;#8217; attributes or items, like&amp;nbsp;so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Item 1: {0[1]} | Dictionary &amp;#39;key&amp;#39;: {1[key]}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;key&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;Item 1: b | Dictionary &amp;#39;key&amp;#39;: value&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that above, we&amp;#8217;re calling the different arguments positionally, so &lt;code&gt;{0}&lt;/code&gt; refers to the first positional argument to &lt;code&gt;format&lt;/code&gt; and &lt;code&gt;{1}&lt;/code&gt; to the second (Python is 0-indexed!), and then we&amp;#8217;re accessing internals via&amp;nbsp;brackets.&lt;/p&gt;
&lt;p&gt;You can&amp;#8217;t call&amp;nbsp;methods:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Test: {add1(test)}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="ne"&gt;KeyError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;add1(test)&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There are lots of other good examples that can be found in the Python docs &lt;a href="https://docs.python.org/2/library/string.html#formatexamples"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Accessing variables in the immediate&amp;nbsp;scope&lt;/h3&gt;
&lt;p&gt;Unfortunately, you can&amp;#8217;t do what Ruby does in terms of accessing any variable or value in the string&amp;#8217;s scope.  This makes sense from an explicitness perspective (we know exactly what we&amp;#8217;re passing to the string at all times), but sometimes it is convenient to not have to worry about that and to be able to type&amp;nbsp;quickly.&lt;/p&gt;
&lt;p&gt;The best way I found to do this in Python is to pass in the &lt;code&gt;locals()&lt;/code&gt; dictionary, which is a dictionary of the local&amp;nbsp;scope.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;hey&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;This is a: {a} | This is b: {b}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nb"&gt;locals&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;This is a: 1 | This is b: hey&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;locals&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;hey&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__builtins__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__builtin__&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;built&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__package__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__name__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__doc__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It&amp;#8217;s a bit less &amp;#8220;Pythonic,&amp;#8221; but ultimately it still gets the job&amp;nbsp;done.&lt;/p&gt;
&lt;h3&gt;Within&amp;nbsp;classes&lt;/h3&gt;
&lt;p&gt;This doesn&amp;#8217;t really work quite so well in classes and starts to become unwieldy.  As you&amp;#8217;ll see below, accessing the class instance&amp;#8217;s attributes don&amp;#8217;t work with &lt;code&gt;locals()&lt;/code&gt; because they&amp;#8217;re all actually attached to &lt;code&gt;self&lt;/code&gt; within the&amp;nbsp;methods.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;         &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;hey&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;         &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;locals&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;self&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Test&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x10e978e50&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ultimately, if we really wanted to, we could still access them within the string this&amp;nbsp;way:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;     &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;     &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;hey&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;stringinterp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;a: {0.a}, b: {0.b}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stringintepr&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;a: 3, b: hey&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But at that point, I don&amp;#8217;t think it would be very convenient, and would effectively be defeating the purpose of string interpolation&amp;nbsp;anyway.        &lt;/p&gt;</summary><category term="python"></category><category term="ruby"></category><category term="string-interpolation"></category></entry><entry><title>Include the weather in your bashÂ prompt!</title><link href="http://blog.jdotjdot.com/2014/05/include-the-weather-in-your-bash-prompt/" rel="alternate"></link><updated>2014-05-22T23:16:55-04:00</updated><author><name>JJ</name></author><id>tag:blog.jdotjdot.com,2014-05-22:2014/05/include-the-weather-in-your-bash-prompt/</id><summary type="html">&lt;p&gt;About a third of the way into Hacker School, I got myself entrenched in a rather unusual project&amp;#8212;trying to figure out how to get an automatically updated weather icon into my Bash prompt, doing it purely in Bash for practical (and aesthetic)&amp;nbsp;reasons.&lt;/p&gt;
&lt;p&gt;I called it &lt;a href="https://github.com/jdotjdot/BashWeather"&gt;BashWeather&lt;/a&gt;.&lt;/p&gt;
&lt;!--
![BashWeather screenshot](https://dl.dropboxusercontent.com/s/z4ut9ggm8y14izp/bashweather%20screenshot.png)&lt;br /&gt;
*Screenshot of sample terminal session with BashWeather*
--&gt;

&lt;div style="/* background-color: lightgray; */ padding: 10px 0; border-radius: 15px; text-align: center;border: 3px solid lightgray;margin: 0 10% 15px 10%;"&gt;

    &lt;div style="max-width: 90%; margin: auto;"&gt;&lt;!-- &lt;/div&gt; --&gt;

        {% img {filename}/images/bashweather%20screenshot.png &amp;#8220;BashWeather Screenshot&amp;#8221; %}
        {% img {filename}/images/bashweather%20screenshot%202.png &amp;#8220;BashWeather Screenshot&amp;#8221; %}

&lt;/div&gt;

&lt;div style="text-align: center; font-style: italic;"&gt;&lt;span class="caption"&gt;Screenshots of a sample terminal session with BashWeather&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div style="font-size: 150%; text-align: center; /* margin-left: 5%; */"&gt;âââ½âï¸&lt;/div&gt;

&lt;div style="text-align: center; font-style: italic;"&gt;Weather character palette&lt;/div&gt;

&lt;/div&gt;

&lt;p&gt;There are a number of configurable options, including the&amp;nbsp;following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How often to wait between weather&amp;nbsp;updates&lt;/li&gt;
&lt;li&gt;The default character to be supplied in the event that the weather isn&amp;#8217;t&amp;nbsp;available&lt;/li&gt;
&lt;li&gt;The method to use to determine where in the world the computer is located.  Options are to use &lt;span class="caps"&gt;IP&lt;/span&gt; address, to use the built-in Mac locator if available, or to supply the city and country in a string when calling the&amp;nbsp;script.&lt;/li&gt;
&lt;li&gt;Allowable timeout for the &lt;span class="caps"&gt;HTTP&lt;/span&gt; requests BashWeather&amp;nbsp;makes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I learned quite a bit from this project about Bash functions, scoping, some of Bash&amp;#8217;s oddities (behavior of brackets, globbing, needing to quote variables, etc.), and some of the nitty-gritty details of Bash variables.  Since a lot of global variables were required by the script to keep track of state, like how long it&amp;#8217;s been since the last check and whether or not internet is available, I was very careful to pollute the global namespace as little as possible, which was an interesting exercise given that Bash functions &lt;a href="http://www.linuxjournal.com/content/return-values-bash-functions"&gt;can&amp;#8217;t actually return values to the caller&lt;/a&gt; in the way you&amp;#8217;d traditionally think about&amp;nbsp;it.&lt;/p&gt;
&lt;h3&gt;But&amp;#8230;&amp;nbsp;why?&lt;/h3&gt;
&lt;p&gt;I couldn&amp;#8217;t think of anything to do at Hacker School for a bit, and I was about to head outside to get a cup of coffee to clear my head, and I noticed that it was raining and got very upset that I didn&amp;#8217;t have an umbrella with me.  I almost always forget to bring my umbrella, and I used to use an &lt;a href="http://www.ifttt.com"&gt;&lt;span class="caps"&gt;IFTTT&lt;/span&gt;&lt;/a&gt; recipe that sent me a Gchat whenever it started to rain.  Unfortunately, with the advent of Hangouts, it was eventually&amp;nbsp;deprecated.&lt;/p&gt;
&lt;p&gt;I liked the Gchat recipe because it alerted me both on my computer and on my phone.  Considering how to replace it, I started thinking about what I look at more than anything else&amp;#8212;and realized the one and only answer there was my Bash prompt.  I&amp;#8217;m always looking at the command line, one way or another, or at least have it open&amp;#8212;and the decision was&amp;nbsp;made.&lt;/p&gt;
&lt;p&gt;From then on, I would know the&amp;nbsp;weather.&lt;/p&gt;
&lt;h3&gt;But would you really ever look at the weather in your&amp;nbsp;prompt?&lt;/h3&gt;
&lt;p&gt;When I started telling people about it at Hacker School I did encounter a bit of skepticism, usually along the lines&amp;nbsp;of:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Why would you ever need the weather in your&amp;nbsp;prompt?&lt;/p&gt;
&lt;p&gt;Come on, you&amp;#8217;re never actually going to use&amp;nbsp;that.&lt;/p&gt;
&lt;p&gt;&amp;#8230;etc.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I got this reaction from one person in particular, and we then sat down to start pairing on a quick question that we were trying to resolve&amp;#8212;I think possibly something to do with BashWeather&amp;nbsp;itself.&lt;/p&gt;
&lt;p&gt;We&amp;#8217;d been working not even two minutes when we turned to the prompt and he saw the umbrella (â) in the prompt and exclaimed, &amp;#8220;Oh no, is it raining? I didn&amp;#8217;t&amp;nbsp;realize!&amp;#8221;&lt;/p&gt;
&lt;p&gt;&amp;#8230;and then he realized what had happened, and then I&amp;nbsp;grinned.&lt;/p&gt;
&lt;h3&gt;And now, the&amp;nbsp;code&lt;/h3&gt;
&lt;p&gt;The full script, with instructions, can be found at the &lt;a href="https://github.com/jdotjdot/BashWeather"&gt;Github repository&lt;/a&gt;.  It is currently fully functional, though still a work in progress.  I&amp;#8217;ll be doing a longer post shortly on how I structured BashWeather from a scoping perspective, since I found the architecture required of a large Bash script to be very different and very&amp;nbsp;interesting.&lt;/p&gt;</summary><category term="hackerschool"></category><category term="bash"></category><category term="weather"></category><category term="bashweather"></category></entry><entry><title>I gave a Hacker SchoolÂ Seminar</title><link href="http://blog.jdotjdot.com/2014/04/i-gave-a-hacker-school-seminar/" rel="alternate"></link><updated>2014-04-29T00:00:00-04:00</updated><author><name>JJ</name></author><id>tag:blog.jdotjdot.com,2014-04-29:2014/04/i-gave-a-hacker-school-seminar/</id><summary type="html">&lt;!-- 4/29/2014 --&gt;

&lt;p&gt;Today at Hacker School, I gave a seminar entitled &amp;#8220;Freelance and Travel for Fun and Profit,&amp;#8221; talking about the year I spent traveling the world while supporting myself as a freelance programmer.  I&amp;#8217;ve long been meaning to write this up as both a series of blog posts and a full deck to present, so it was great to have the first opportunity to finally present on it.  There was quite a bit of demand for it, and I actually gave the talk in the first place specifically because other Hacker Schoolers kept saying they&amp;#8217;d love to learn more about what I did and how I did&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;For the time being, I&amp;#8217;ll post some of the notes and such from the talk, and later I&amp;#8217;ll post as a separate series more in-depth on the details of how to think about being a&amp;nbsp;freelancer.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Workflowy document with the notes I used to present the lecture can be found &lt;a href="https://workflowy.com/shared/c6b889cd-4915-aa61-8a21-ad0242456f62/"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The map of my travels throughout that time can be found &lt;a href="http://www.travellerspoint.com/member_map.cfm?user=jdotjdot89&amp;amp;tripid=359618"&gt;here&lt;/a&gt;, courtsey of &lt;a href="http://www.travellerspoint.com"&gt;Travellerspoint&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It was a great experience giving a talk and getting excellent feedback on it, and it&amp;#8217;s a very gratifying feeling to hear from people that you&amp;#8217;ve helped reshape their thinking.  Looking forward to delivering it again, a bit more refined, to those who missed it and to the alumni who wanted to come but were unable to&amp;nbsp;attend.&lt;/p&gt;</summary><category term="hackerschool"></category><category term="freelance"></category><category term="seminar"></category><category term="travel"></category></entry><entry><title>Killing a Python WAT: Forcing immutable defaultÂ arguments</title><link href="http://blog.jdotjdot.com/2014/04/killing-a-python-wat-forcing-immutable-default-arguments/" rel="alternate"></link><updated>2014-04-26T00:00:00-04:00</updated><author><name>JJ</name></author><id>tag:blog.jdotjdot.com,2014-04-26:2014/04/killing-a-python-wat-forcing-immutable-default-arguments/</id><summary type="html">&lt;p&gt;Fellow Hacker Schooler &lt;a href="http://mathamy.com/author/amy-hanlon.html"&gt;Amy&lt;/a&gt; had a great post today on &lt;a href="http://mathamy.com/python-wats-mutable-default-arguments.html)"&gt;mutable default arguments in Python&lt;/a&gt;, a very typical Python &amp;#8220;&lt;span class="caps"&gt;WAT&lt;/span&gt;&amp;#8221;.&lt;/p&gt;
&lt;p&gt;(If you haven&amp;#8217;t seen the &lt;a href="https://www.destroyallsoftware.com/talks/wat"&gt;CodeMash 2012 &lt;span class="caps"&gt;WAT&lt;/span&gt; video&lt;/a&gt;, you&amp;nbsp;should.)&lt;/p&gt;
&lt;p&gt;In this case, Amy wrote about how unintuitively in Python, when creating a function with default arguments, those arguments are actually &lt;strong&gt;mutable&lt;/strong&gt; and &lt;strong&gt;preserved&lt;/strong&gt;, meaning any mutations made to the default arguments remain that way for all future calls to that function.  We just often don&amp;#8217;t see this behavior because most of the time numbers and strings are used as default arguments, which &lt;em&gt;by implementation&lt;/em&gt; are immutable and so aren&amp;#8217;t given a chance to exhibit this&amp;nbsp;behavior.&lt;/p&gt;
&lt;p&gt;The example she&amp;nbsp;used:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]):&lt;/span&gt;
    &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;cat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What happens when you call &lt;code&gt;foo&lt;/code&gt; repeatedly?  You&amp;#8217;d expect &lt;code&gt;l&lt;/code&gt; to be reinstantiated every time with a new empty list, but instead, you get the&amp;nbsp;following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;cat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;cat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;cat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;cat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;cat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;cat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ultimately, this is because the default argumetns for the &lt;code&gt;foo&lt;/code&gt; function are stored in &lt;code&gt;foo.func_defaults&lt;/code&gt;, which contains our empty list in question.  The list is only instantiated once, and since lists are mutable, every time we call &lt;code&gt;l.append&lt;/code&gt;, we&amp;#8217;re mutating the actual default for future calls to the&amp;nbsp;function. &lt;/p&gt;
&lt;p&gt;The only reason this doesn&amp;#8217;t occur when we use number or string defaults is because they&amp;#8217;re always immutable, so even if we make a change that looks like a mutation, we&amp;#8217;re really getting a new&amp;nbsp;object.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;new_foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="c"&gt;# we&amp;#39;re actually getting a new object 4&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Read the rest of &lt;a href="http://mathamy.com/python-wats-mutable-default-arguments.html)"&gt;her post&lt;/a&gt; for more on why this is the&amp;nbsp;case.&lt;/p&gt;
&lt;p&gt;This got me thinking that it must be possible to write a decorator that would preserve the original default arguments, even in mutable cases.  Basically, what we&amp;#8217;d be doing is intercepting Python&amp;#8217;s reference to &lt;code&gt;&amp;lt;function&amp;gt;.func_defaults&lt;/code&gt; with our&amp;nbsp;own.&lt;/p&gt;
&lt;p&gt;So what would this look&amp;nbsp;like?&lt;/p&gt;
&lt;h3&gt;Make the&amp;nbsp;decorator&lt;/h3&gt;
&lt;p&gt;First, let&amp;#8217;s get our basic decorator structure&amp;nbsp;out:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;enforce_defaults&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;wrapper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_name&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Getting our default&amp;nbsp;arguments&lt;/h3&gt;
&lt;p&gt;Next, we&amp;#8217;d like to grab the default arguments and variable names from our to-be-decorated function.  We know already we can get the defaults from &lt;code&gt;function.func_defaults&lt;/code&gt;, and we can grab the variable names from &lt;code&gt;function.func_code.co_varnames&lt;/code&gt;.  We also will grab the number of arguments for the function from &lt;code&gt;function.func_code.co_argcount&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;enforce_defaults&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;varnames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_code&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;co_varnames&lt;/span&gt;
    &lt;span class="n"&gt;defaults&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_defaults&lt;/span&gt;
    &lt;span class="n"&gt;argcount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_code&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;co_argcount&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;wrapper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_name&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The strategy we&amp;#8217;re going to use here is to build up a dictionary of all the arguments that we&amp;#8217;re eventually going to pass to the decorated function.  We can&amp;#8217;t know ahead of time which arguments will and won&amp;#8217;t be passed, so we&amp;#8217;ll start with a dictionary of the default arguments, and replace them with the updated, user-supplied args as we go&amp;nbsp;along.  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;function.func_defaults&lt;/code&gt; only returns the defaults to us, though, not a full array we can use to match to the full list of varnames.  For example, for function &lt;code&gt;bas&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We get the&amp;nbsp;following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;baz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_code&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;co_varnames&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;baz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_defaults&lt;/span&gt;
&lt;span class="p"&gt;([],&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So we&amp;#8217;ll have to match our &lt;code&gt;func_defaults&lt;/code&gt; tuple to the end of our &lt;code&gt;varnames&lt;/code&gt; list, so that we match up our defaults with the right args.  We can do that like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;varnames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;baz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_code&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;co_varnames&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;defaults&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;baz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_defaults&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;varnames&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;):]&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;matched&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;varnames&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;):],&lt;/span&gt; &lt;span class="n"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;matched&lt;/span&gt;
&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[]),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matched&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So there we have our initial args dictionary with our default&amp;nbsp;arguments:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;enforce_defaults&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;varnames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_code&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;co_varnames&lt;/span&gt;
    &lt;span class="n"&gt;defaults&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_defaults&lt;/span&gt;
    &lt;span class="n"&gt;argcount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_code&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;co_argcount&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c"&gt;# &amp;quot;holder&amp;quot; is where we&amp;#39;re storing our args&lt;/span&gt;
        &lt;span class="n"&gt;holder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;varnames&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;):],&lt;/span&gt; &lt;span class="n"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;wrapper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_name&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Other variables in the&amp;nbsp;function?&lt;/h3&gt;
&lt;p&gt;Unfortunately, Python functions are going to store &lt;strong&gt;all&lt;/strong&gt; of the function variables in &lt;code&gt;func_code.co_varnames&lt;/code&gt;, including ones declared in-function.  For&amp;nbsp;example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_code&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;co_varnames&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_defaults&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_code&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;co_argcount&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To deal with that scenario, because the internally declared variables are stuck on at the end, we&amp;#8217;ll have to make a slight modification to our &lt;code&gt;holder&lt;/code&gt; variable.  Since we know from &lt;code&gt;argcount&lt;/code&gt; how many arguments they are, we can go back to &lt;code&gt;varnames&lt;/code&gt; and simply just chop off any extra appended variables before doing our trick with &lt;code&gt;[-len(defaults):]&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;holder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;varnames&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;argcount&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Oh&amp;nbsp;no!&lt;/h3&gt;
&lt;p&gt;Looks like what we&amp;#8217;ve done isn&amp;#8217;t helping at all!  If we stick a print statement in there to debug, you can see what&amp;#8217;s&amp;nbsp;happening:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;enforce_defaults&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;varnames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_code&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;co_varnames&lt;/span&gt;
    &lt;span class="n"&gt;defaults&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_defaults&lt;/span&gt;
    &lt;span class="n"&gt;argcount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_code&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;co_argcount&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c"&gt;# &amp;quot;holder&amp;quot; is where we&amp;#39;re storing our args&lt;/span&gt;
        &lt;span class="n"&gt;holder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;varnames&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="n"&gt;argcount&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;):],&lt;/span&gt; &lt;span class="n"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;holder&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;wrapper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_name&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;

&lt;span class="nd"&gt;@enforce_defaults&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]):&lt;/span&gt;
    &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;cat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;

&lt;span class="c"&gt;# &amp;gt;&amp;gt;&amp;gt; foo()&lt;/span&gt;
&lt;span class="c"&gt;# {&amp;#39;l&amp;#39;: []}&lt;/span&gt;
&lt;span class="c"&gt;# [&amp;#39;cat&amp;#39;]&lt;/span&gt;
&lt;span class="c"&gt;# &amp;gt;&amp;gt;&amp;gt; foo()&lt;/span&gt;
&lt;span class="c"&gt;# {&amp;#39;l&amp;#39;: [&amp;#39;cat&amp;#39;]}&lt;/span&gt;
&lt;span class="c"&gt;# [&amp;#39;cat&amp;#39;, &amp;#39;cat&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And after all that work!  Why is this happening to&amp;nbsp;us?&lt;/p&gt;
&lt;p&gt;Right now, we&amp;#8217;re accessing our defaults for &lt;code&gt;holder&lt;/code&gt; from the &lt;code&gt;defaults&lt;/code&gt; variable, but that&amp;#8217;s actually just a direct reference to the original &lt;code&gt;function.func_defaults&lt;/code&gt;, and so we&amp;#8217;re just mutating the originals like before.  In short, &lt;strong&gt;we haven&amp;#8217;t actually changed&amp;nbsp;anything.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We can make sure we&amp;#8217;re always getting &lt;strong&gt;new&lt;/strong&gt; args rather than our old mutating ones by using &lt;code&gt;copy.deepcopy&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;enforce_defaults&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;copy&lt;/span&gt;
  &lt;span class="n"&gt;varnames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_code&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;co_varnames&lt;/span&gt;
  &lt;span class="n"&gt;defaults&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_defaults&lt;/span&gt;
  &lt;span class="n"&gt;argcount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_code&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;co_argcount&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;inner_defaults&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deepcopy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;holder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;varnames&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="n"&gt;argcount&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inner_defaults&lt;/span&gt;&lt;span class="p"&gt;):],&lt;/span&gt; &lt;span class="n"&gt;inner_defaults&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;holder&lt;/span&gt; &lt;span class="c"&gt;# for debugging&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;holder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="n"&gt;wrapper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_name&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, we should be good to&amp;nbsp;go:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# &amp;gt;&amp;gt;&amp;gt; foo()&lt;/span&gt;
&lt;span class="c"&gt;# {&amp;#39;l&amp;#39;: []}&lt;/span&gt;
&lt;span class="c"&gt;# [&amp;#39;cat&amp;#39;]&lt;/span&gt;
&lt;span class="c"&gt;# &amp;gt;&amp;gt;&amp;gt; foo()&lt;/span&gt;
&lt;span class="c"&gt;# {&amp;#39;l&amp;#39;: []}&lt;/span&gt;
&lt;span class="c"&gt;# [&amp;#39;cat&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Excellent!  We&amp;#8217;ve solved our mutating default arguments problem.  Now, we just have to finish the&amp;nbsp;decorator.&lt;/p&gt;
&lt;h3&gt;Accounting for user-supplied&amp;nbsp;args&lt;/h3&gt;
&lt;p&gt;We&amp;#8217;ll need to read in both &lt;code&gt;*args&lt;/code&gt; and &lt;code&gt;**kwargs&lt;/code&gt; and update our &lt;code&gt;holder&lt;/code&gt; dictionary accordingly, to make sure if the user has supplied any updated arguments over our defaults, we don&amp;#8217;t continue passing the&amp;nbsp;defaults.&lt;/p&gt;
&lt;p&gt;For &lt;code&gt;**kwargs&lt;/code&gt;, it&amp;#8217;s pretty easy; we simply update the&amp;nbsp;dictionary:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;holder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Since &lt;code&gt;*args&lt;/code&gt; is ordered, we can simply use &lt;code&gt;zip&lt;/code&gt; with the function&amp;#8217;s argument names, similarly to how we did&amp;nbsp;above:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;holder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;varnames&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And then, we just have to update our calling of &lt;code&gt;function&lt;/code&gt;, since we&amp;#8217;re only using our specially curated&amp;nbsp;dictionary:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;holder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;#8230;and voilÃ ! We&amp;#8217;re done!  You can now use mutable objects in functions with our decorator without&amp;nbsp;fear!&lt;/p&gt;
&lt;p&gt;As final&amp;nbsp;proof:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@enforce_defaults&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]):&lt;/span&gt;
    &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;cat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;cat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;cat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;cat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;#8230;and you could just do that all&amp;nbsp;day.&lt;/p&gt;
&lt;h3&gt;Final&amp;nbsp;code&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;enforce_defaults&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;copy&lt;/span&gt;
  &lt;span class="n"&gt;varnames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_code&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;co_varnames&lt;/span&gt;
  &lt;span class="n"&gt;defaults&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_defaults&lt;/span&gt;
  &lt;span class="n"&gt;argcount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_code&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;co_argcount&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;inner_defaults&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deepcopy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;holder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;varnames&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="n"&gt;argcount&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inner_defaults&lt;/span&gt;&lt;span class="p"&gt;):],&lt;/span&gt; &lt;span class="n"&gt;inner_defaults&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;holder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;varnames&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="n"&gt;holder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;holder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="n"&gt;wrapper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_name&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="hackerschool"></category><category term="python"></category><category term="wat"></category><category term="decorator"></category><category term="mutability"></category><category term="default-args"></category></entry><entry><title>Re-implementing ClojureâsÂ comp</title><link href="http://blog.jdotjdot.com/2014/04/re-implementing-clojures-comp/" rel="alternate"></link><updated>2014-04-22T00:00:00-04:00</updated><author><name>JJ</name></author><id>tag:blog.jdotjdot.com,2014-04-22:2014/04/re-implementing-clojures-comp/</id><summary type="html">&lt;p&gt;While working through &lt;a href="http://www.braveclojure.com/functional-programming/"&gt;Clojure for the Brave and True&lt;/a&gt;, I came across an explanation of Clojure&amp;#8217;s &lt;code&gt;comp&lt;/code&gt; function and some basic implementations of versions of &lt;code&gt;comp&lt;/code&gt; that take only two arguments or three arguments.  The tutorial challenged me to try to completely re-implement &lt;code&gt;comp&lt;/code&gt; to accept an arbitrary number of function arguments, and that got me thinking that it would be a very good exercise to try in&amp;nbsp;Clojure.&lt;/p&gt;
&lt;p&gt;The book had an implentation of the two-argument &lt;code&gt;comp&lt;/code&gt; that looked something like&amp;nbsp;this;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;two-comp&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;f&lt;/span&gt; &lt;span class="nv"&gt;g&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fn &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;args&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;f&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;apply &lt;/span&gt;&lt;span class="nv"&gt;g&lt;/span&gt; &lt;span class="nv"&gt;args&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I worked off of that as a base for a while, but kept running into trouble.  I kept running into rather complicated functions-of-functions that seemed to be returning functions that operated on the input functions, rather than the actual arguments, which was not what we were looking for.  It&amp;#8217;s a bit hard to wrap your head around this, since it&amp;#8217;s very meta and we&amp;#8217;re talking about a function that has functions as arguments and returns a function of functions as its&amp;nbsp;result.&lt;/p&gt;
&lt;p&gt;I decided to take a stab at this in Python, my go-to&amp;nbsp;language.&lt;/p&gt;
&lt;p&gt;What I came up with ended up looking like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;clojure_comp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrap_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_wrap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;return_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;inner_args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="c"&gt;# Here is where we actually call the function&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_wrap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;inner_args&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;return_function&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wrap_function&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;reversed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This ended up working out very nicely, using string maniuplation as a&amp;nbsp;test:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;clojure_comp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; abcdefgh   &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;BBCDEFG&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So I gave this another shot in&amp;nbsp;Clojure.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;mycomp&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;args&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="s"&gt;&amp;quot;A function that takes an arbitrary number of functions and returns a function that &lt;/span&gt;
&lt;span class="s"&gt;  applies each of those functions, last first, to the input arguments.&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;wrapper-function&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;wrapped&lt;/span&gt; &lt;span class="nv"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fn &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;inner-args&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;wrapper&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;apply &lt;/span&gt;&lt;span class="nv"&gt;wrapped&lt;/span&gt; &lt;span class="nv"&gt;inner-args&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;reduce &lt;/span&gt;&lt;span class="nv"&gt;wrapper-function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;reverse &lt;/span&gt;&lt;span class="nv"&gt;args&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And it does&amp;nbsp;work&amp;#8212;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;user=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;mycomp&lt;/span&gt; &lt;span class="nv"&gt;clojure.string/trim&lt;/span&gt; &lt;span class="nv"&gt;clojure.string/lower-case&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;   this IS a test   &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;this is a test&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But ultimately, I think it might be a bit too Pythonic rather than right for Clojure.  I don&amp;#8217;t tend to see too many functions that declare another named function within themselves, and I also feel like this is the kind of function that might better use recursion or &lt;code&gt;loop&lt;/code&gt; than &lt;code&gt;reduce&lt;/code&gt;, which I feel like I&amp;#8217;m falling back on as a replacement for Python&amp;#8217;s convenient &lt;code&gt;for&lt;/code&gt; iteration.  &lt;/p&gt;
&lt;p&gt;That being said, it could still be a valuable way of doing it.  I recently got complimented by a Javascript developer for my use of &lt;code&gt;reduce&lt;/code&gt; in some Javascript I was writing for the &lt;a href="http://www.sefaria.org"&gt;Sefaria&lt;/a&gt; project.  He said &lt;code&gt;reduce&lt;/code&gt; and &lt;code&gt;map&lt;/code&gt; were functional elements of &lt;span class="caps"&gt;JS&lt;/span&gt; that even most seasoned Javascript developers don&amp;#8217;t use, so he was surprised that I was&amp;#8212;but to me, languages like Clojure make it seem quite natural to use, and much more elegant in many cases than iteration and&amp;nbsp;mutation.&lt;/p&gt;</summary><category term="hackerschool"></category><category term="python"></category><category term="clojure"></category><category term="comp"></category></entry><entry><title>Automatically restarting your process or server onÂ crash</title><link href="http://blog.jdotjdot.com/2014/04/restarting-your-server-on-crash/" rel="alternate"></link><updated>2014-04-10T00:00:00-04:00</updated><author><name>JJ</name></author><id>tag:blog.jdotjdot.com,2014-04-10:2014/04/restarting-your-server-on-crash/</id><summary type="html">&lt;p&gt;While working with &lt;a href="http://github.com/lord"&gt;Robert&lt;/a&gt; on the &lt;a href="http://github.com/lord/doorbot"&gt;Doorbot&lt;/a&gt; webserver as part of our project to hook up the front door of Hacker School to the web, we ran across a small problem with the Ruby server that he had set&amp;nbsp;up.&lt;/p&gt;
&lt;p&gt;In the past, my sites have always been hosted places like Heroku or &lt;a href="http://www.webfaction.com?affiliate=thecampusrep"&gt;Webfaction&lt;/a&gt;, which take care of restarting the server in case of&amp;nbsp;shutdown.&lt;/p&gt;
&lt;p&gt;However, we were hosting the Doorbot server on a Raspberry Pi that we were planning to lock in the network closet.   This meant that no one was going to be able to get in there to physically unplug and replug the Pi, which is the method we&amp;#8217;d been using to restart the server after we (with great difficulty) got the server launch script into Raspbian&amp;#8217;s &lt;code&gt;init.d&lt;/code&gt; to start on startup.  Another method we&amp;#8217;d also been using was to &lt;span class="caps"&gt;SSH&lt;/span&gt; into the Pi to manually restart the server, but this of course wasn&amp;#8217;t a sustainable long-term solution.  If the server shut down on its own, people weren&amp;#8217;t going to be able to get through the door until someone alerted us and we restarted the server manually.   &lt;strong&gt;We needed a better solution that would automatically and reliably restart the server upon shutdown without any human&amp;nbsp;intervention.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I suggested a strategy that I presented at a &lt;a href="https://github.com/jdotjdot/Data-Scraping-Talk--PennApps-F2012-"&gt;lecture&lt;/a&gt; at &lt;a href="http://pennapps.com"&gt;PennApps&lt;/a&gt; Fall 2012.   I had previously used this strategy on some web scraping projects to get a running Python process to restart immediately upon shutdown.  For processes like that scraper or the Ruby server, if the process dies with an error, we actually don&amp;#8217;t generally care in this case why it shut down or what the error was&amp;#8212;just that it shut down and that we want it back up&amp;nbsp;immediately.  &lt;/p&gt;
&lt;p&gt;The strategy is to &lt;strong&gt;wrap the server set-up process in a Bash script&lt;/strong&gt; within a &lt;code&gt;while&lt;/code&gt; or &lt;code&gt;until&lt;/code&gt; loop, as in the following example with my old Python&amp;nbsp;scraper:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Runs our scraper indefinitely&lt;/span&gt;
&lt;span class="c"&gt;# will only stop upon a GRACEFUL exit--&lt;/span&gt;
&lt;span class="c"&gt;#  but keep in mind a graceful exit only means that&lt;/span&gt;
&lt;span class="c"&gt;#  no error is thrown, but that doesn&amp;#39;t mean that we&lt;/span&gt;
&lt;span class="c"&gt;#  actually want the program to end!&lt;/span&gt;

&lt;span class="k"&gt;until &lt;/span&gt;python scraper.py; &lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="k"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Process crashed with exit code $?.  Respawning...&amp;quot;&lt;/span&gt; &amp;gt;&amp;amp;2
    sleep 2
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For a server, you would replace &lt;code&gt;python scraper.py&lt;/code&gt; with &lt;code&gt;python manage.py runserver&lt;/code&gt; for Django, or the equivalent command in Ruby or your preferred web&amp;nbsp;framework.&lt;/p&gt;
&lt;p&gt;What happens here is the &lt;code&gt;until&lt;/code&gt; loop starts to test the &amp;#8220;condition,&amp;#8221; but the condition here is actually our intended process.  That process runs indefinitely, and ideally would never stop and we&amp;#8217;d never hit the &lt;code&gt;echo&lt;/code&gt;.  However, in the event that the server &lt;em&gt;does&lt;/em&gt; crash, we take advantage of a trick with Bash&amp;#8212;an exit upon failure will evalute &amp;#8220;false-y&amp;#8221; for the &lt;code&gt;until&lt;/code&gt; loop, and so on a crash, we will always enter and repeat the loop.  The only way to exit the loop is a successful server program exit, which will never happen, because we never intentionally shut down the&amp;nbsp;server!&lt;/p&gt;
&lt;p&gt;After wrapping the Ruby server startup call in that tiny Bash script, the server now automatically restarts itself upon&amp;nbsp;failure.&lt;/p&gt;</summary><category term="hackerschool"></category><category term="bash"></category><category term="doorbot"></category><category term="doorduino"></category><category term="server"></category><category term="crash"></category><category term="restart"></category></entry><entry><title>Matasano CryptoÂ Challenges</title><link href="http://blog.jdotjdot.com/2014/04/matasano-crypto-challenges/" rel="alternate"></link><updated>2014-04-09T00:00:00-04:00</updated><author><name>JJ</name></author><id>tag:blog.jdotjdot.com,2014-04-09:2014/04/matasano-crypto-challenges/</id><summary type="html">&lt;p&gt;As I&amp;#8217;ve always been interested in cryptography and cybersecurity, I started working on it a bit while at Hacker School, mainly by working on the challenges in the &lt;a href="http://microcorruption.com"&gt;Microcorruption&lt;/a&gt; capture the flag&amp;nbsp;game.&lt;/p&gt;
&lt;p&gt;Today, thanks to &lt;a href="http://filippo.io"&gt;Filippo&lt;/a&gt; (also the guy behind the extremely popular and valuable &lt;a href="http://filippo.io/Heartbleed/"&gt;Heartbleed vulnerability tester&lt;/a&gt;), I ran across the &lt;a href="http://www.matasano.com/articles/crypto-challenges/"&gt;Matasano Crypto Challenges&lt;/a&gt;, a series of challenges that looks similar in nature to Capture the&amp;nbsp;Flag.&lt;/p&gt;
&lt;p&gt;If you&amp;#8217;re at all interested in doing this as well, let me know.  Looks like a lot of&amp;nbsp;fun.&lt;/p&gt;</summary><category term="hackerschool"></category><category term="crypto"></category><category term="matasano"></category><category term="capture-the-flag"></category></entry><entry><title>Introduction to HTML5Â canvas</title><link href="http://blog.jdotjdot.com/2014/04/introduction-to-html5-canvas/" rel="alternate"></link><updated>2014-04-02T00:00:00-04:00</updated><author><name>JJ</name></author><id>tag:blog.jdotjdot.com,2014-04-02:2014/04/introduction-to-html5-canvas/</id><summary type="html">&lt;!-- 4/2/2014 --&gt;

&lt;!-- Custom CSS: --&gt;

&lt;style type="text/css"&gt;
    blockquote p {
        font-style: normal;
    }
&lt;/style&gt;

&lt;p&gt;In my quest to learn a bit more about front-end and responsive design, I&amp;#8217;ve decided to do a mini-project building a Pacman map-editor in the browser.   Hopefully, I&amp;#8217;ll also be able to make it playable.  This was inspired by a conversation with &lt;a href="https://github.com/maryrosecook"&gt;Mary&lt;/a&gt; about what I should be working on next, in which she told me about someone in a previous batch who had built multiplayer Pacman, where live players controlled the ghosts as well as&amp;nbsp;Pacman.&lt;/p&gt;
&lt;p&gt;After doing a bit of research on some larger library options like AngularJS, I decided on simply using &lt;span class="caps"&gt;HTML5&lt;/span&gt;&amp;#8217;s &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; element.  While I may eventually use a canvas library like KineticJS, I decided to start off learning the built-in basics, using &lt;a href="http://diveintohtml5.info/canvas.html"&gt;this great tutorial&lt;/a&gt; from &lt;strong&gt;Dive Into &lt;span class="caps"&gt;HTML5&lt;/span&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;h4&gt;Canvas is just a place for pixels to&amp;nbsp;dance&lt;/h4&gt;
&lt;p&gt;Canvas is best just thought of as a defined element in the webpage where you draw and erase pixels.  That&amp;#8217;s&amp;nbsp;it.  &lt;/p&gt;
&lt;p&gt;Even if you have very complex Javascript frameworks and architecture going on in the background, at the end of the day, all that &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; ever sees is various instructions to turn a certain pixel a certain color, with no knowledge of what&amp;#8217;s going on above.  It&amp;#8217;s much like your monitor&amp;#8212;your monitor displays to you everything happening in your computer display, but the monitor doesn&amp;#8217;t actually understand where one window ends and another begins, or even what a &amp;#8220;window&amp;#8221; is&amp;#8212;that&amp;#8217;s all in the computer, which tells the monitor every 16ms or so what color to make each&amp;nbsp;pixel.&lt;/p&gt;
&lt;h4&gt;Canvas just needs to be told what to&amp;nbsp;do&lt;/h4&gt;
&lt;p&gt;Working with &lt;code&gt;canvas&lt;/code&gt; (without any external Javascript libraries on top) is quite different than working with straight &lt;span class="caps"&gt;HTML&lt;/span&gt;&amp;#8212;you have to specifically instruct what you want canvas to&amp;nbsp;do.&lt;/p&gt;
&lt;p&gt;To describe the difference a bit better to the uninitiated, &lt;span class="caps"&gt;HTML&lt;/span&gt; could be described as &amp;#8220;declarative&amp;#8221; programming, meaning you describe what you want and how you want it to&amp;nbsp;be.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Declarative programming:&lt;/strong&gt;&lt;br&gt;
Let there be light! &lt;br&gt;&lt;br&gt;
&amp;#8230;&lt;em&gt;and there was&amp;nbsp;light.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Notice how above, all I did was say that I wanted there to be light&amp;#8212;I didn&amp;#8217;t specify how it would happen.  It &amp;#8220;just&amp;nbsp;works.&amp;#8221;&lt;/p&gt;
&lt;p&gt;In imperative programming, you&amp;#8217;re getting much deeper into the grimy details of telling the computer exactly what to&amp;nbsp;do.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Imperative programming:&lt;/strong&gt;&lt;br&gt;
Every nanosecond, create another photon over there and have each one immediately come over here at the speed of light!&lt;br&gt;&lt;br&gt;
&lt;em&gt;&amp;#8230;and there was&amp;nbsp;light.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Though oversimplified, this is somewhat the difference between working with &lt;span class="caps"&gt;HTML&lt;/span&gt; in general and working with &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;HTML&lt;/span&gt;&lt;/strong&gt; (declarative)&lt;strong&gt;:&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
Code: &lt;br&gt;
&lt;code&gt;&amp;lt;div style="background-color: red; width: 100px; height: 100px;"&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;
&lt;br&gt;&lt;br&gt;
Translation:&lt;br&gt;
Let there be a red &lt;code&gt;div&lt;/code&gt; element with dimensions 100 pixels by 100 pixels!
&lt;br&gt;&lt;br&gt;
What happens:
&lt;div style="background-color: red; width: 100px; height: 100px;"&gt;&lt;/div&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Compare this to what you do to get the same thing in &lt;code&gt;canvas&lt;/code&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Canvas&lt;/strong&gt; (imperative)&lt;strong&gt;:&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&amp;nbsp;Code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// This code is in Javascript&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;myCanvas&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;manualrect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;beginPath&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;moveTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lineTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lineTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lineTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lineTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;closePath&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fillStyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;red&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;manualrect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cm"&gt;/* There are built-in functions that make making a rectangle easier, like ctx.rect(x, y, height, width) to create one or ctx.fillRect(...) to create a rectangle and fill it.  However, both ultimately boil down to the code we&amp;#39;ve used above. */&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Translation:&lt;br&gt;
Browser, go get the element on my webpage with the id &lt;code&gt;myCanvas&lt;/code&gt;.  Now, in that element, I want you to start creating a path&amp;#8212;use your invisible erasable  pencil to ghost out the path.  Start at coordinates &lt;code&gt;(0, 0)&lt;/code&gt;.  With the pencil to the page, move to &lt;code&gt;(100, 0)&lt;/code&gt;.  Still with the pencil to the page, move to &lt;code&gt;(100, 100)&lt;/code&gt;.  [etc.] Now, pencil to the page, move back to &lt;code&gt;(0, 0)&lt;/code&gt;.&lt;br&gt;
Now, take all those invisible paths we&amp;#8217;ve drawn, and close it to make it a closed shape.
Prepare to use the color &amp;#8220;red&amp;#8221; to fill in anything we might fill in in the future.
Fill in the last thing we did with the current style (red).
&lt;br&gt;&lt;br&gt;
What&amp;nbsp;happens:&lt;/p&gt;
&lt;p&gt;&lt;canvas id="myCanvas" width=110 height=110&gt;&lt;/canvas&gt;
&lt;script type="text/javascript"&gt;
    var ctx = document.getElementById("myCanvas").getContext("2d");
    function manualrect(x,y,w,h) {
        ctx.beginPath();
        ctx.moveTo(x, y);
        ctx.lineTo(x + w, y);
        ctx.lineTo(x + w, y + h);
        ctx.lineTo(x, y + h);
        ctx.lineTo(x, y);
        ctx.closePath();
        ctx.fillStyle = "red";
        ctx.fill();
    }
    manualrect(0, 0, 100, 100);
&lt;/script&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We end up in the same place, but it takes a bit more work and explicit instruction to get&amp;nbsp;there.&lt;/p&gt;
&lt;p&gt;So, why would we do this?  For a single, unchanging element &lt;code&gt;canvas&lt;/code&gt; isn&amp;#8217;t necessarily the better move, but given how it acts like a mini-monitor, it becomes a great way to deal with highly complex visual output and user interaction.
Even more importantly, before &lt;code&gt;canvas&lt;/code&gt;, drawing a diagonal line meant stacking a bunch of block-like html elements on a page diagonally and coloring them all your color&amp;#8212;very complex, and we were essentially creating a giant set of building block/pixles&amp;#8212;creating our own &lt;code&gt;canvas&lt;/code&gt;es.
Now, with &lt;code&gt;canvas&lt;/code&gt;, we just tell canvas which pixels to color or to draw a diagonal line from here to there, and it does it&amp;#8212;no building blocks&amp;nbsp;required.&lt;/p&gt;
&lt;p&gt;Also, &lt;a href="https://developer.mozilla.org/en-US/demos/detail/zen-photon-garden/launch"&gt;some pretty amazing stuff&lt;/a&gt; can be made with &lt;code&gt;canvas&lt;/code&gt;.&lt;/p&gt;</summary><category term="hackerschool"></category><category term="pacman"></category><category term="canvas"></category><category term="html5"></category></entry><entry><title>Ultrasonic distance detectors inÂ Arduino</title><link href="http://blog.jdotjdot.com/2014/03/ultrasonic-distance-detectors-in-arduino/" rel="alternate"></link><updated>2014-03-27T00:00:00-04:00</updated><author><name>JJ</name></author><id>tag:blog.jdotjdot.com,2014-03-27:2014/03/ultrasonic-distance-detectors-in-arduino/</id><summary type="html">&lt;!-- 3/27/2014 --&gt;

&lt;p&gt;Matt at Hacker School has plans to go back home and hook up a Raspberry Pi or an Arduino to a motion sensor in order to detect when his cat jumps onto the table (which apparently happens too much)&amp;#8212;and maybe scare him as well, making it make a loud noise every time he does&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Since I&amp;#8217;ve worked quite a bit with Arduino at this point, between the &lt;a href="https://github.com/jdotjdot/B_FURIOUS"&gt;wireless remote control car project&lt;/a&gt; and the &lt;a href="https://github.com/jdotjdot/doorduino"&gt;internet-enabled door opener&lt;/a&gt;, Matt asked me to walk him through what the code would look like in C.  Up until now, he&amp;#8217;s been working with Arduinos using a Ruby library (I think &lt;a href="http://ruby-serialport.rubyforge.org/"&gt;this one&lt;/a&gt;), but it&amp;#8217;s fairly limited, and I also would imagine that being another step away from the C would make it harder to program the micro controller.  So we went over what the C code would look like for a very simple use&amp;nbsp;case.&lt;/p&gt;
&lt;p&gt;We set up an Arduino to detect the closest item (linearly) using the ultrasonic distance detector, and then to dim a light depending on how far the item&amp;nbsp;was.&lt;/p&gt;
&lt;p&gt;Here it is in&amp;nbsp;action:&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;iframe width='560' height='315' src='http://www.youtube.com/embed/n7D4ZiQezQI' frameborder='0' webkitAllowFullScreen mozallowfullscreen allowFullScreen&gt;&lt;/iframe&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h3&gt;Schematic&lt;/h3&gt;
&lt;!--&lt;div class="center container"&gt;&lt;img width="700px" align="center" alt="Schematic" src="http://blog.jdotjdot.com/images/Ultrasonic-distance-detector.png"&gt;&lt;/div&gt;--&gt;

&lt;!-- ![Schematic]({filename}/images/Ultrasonic-distance-detector.png) --&gt;

&lt;p&gt;&lt;center&gt;&lt;img src="http://blog.jdotjdot.com/images/Ultrasonic-distance-detector.png" title=""Schematic"" width="500" alt=""Schematic""&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The basic setup:&lt;/strong&gt;
The ultrasonic distance detector, the big blue thing that isn&amp;#8217;t the Arduino, is hooked up to the 5V Arduino output and to ground, and then the middle two pins are hooked up to Arduino digital pins&amp;#8212;one to trigger an ultrasonic blast, and one to listen for the blast&amp;#8217;s response.  The red &lt;span class="caps"&gt;LED&lt;/span&gt; hooked up to pin 13 flashes when nothing is detected in the vicinity, and then turns solid red when something is detected.  The yellow &lt;span class="caps"&gt;LED&lt;/span&gt; fades depending on the distance of the detected object&amp;#8212;the closer it is, the dimmer the light, unless there are no objects within the specified maximum detection range, in which case the light is completely&amp;nbsp;off.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How it works:&lt;/strong&gt;
The ultrasonic distance detector, when turned on by setting the pin hooked up to the trigger to &lt;code&gt;HIGH&lt;/code&gt;,  sends out an ultrasonic blast forward.  We have the Arduino wait about 10 microseconds for the sound to emit using &lt;code&gt;delayMicroseconds(10);&lt;/code&gt;, and then we use &lt;code&gt;pulseIn&lt;/code&gt; to wait for the sound to return.  The longer it takes the sound to return, the farther away the object is.  To find the number of centimeters away the object is, we can take the response from &lt;code&gt;pulseIn&lt;/code&gt; and divide it by &lt;code&gt;(2 * 29)&lt;/code&gt; to get the distance in centimeters rather than&amp;nbsp;milliseconds.&lt;/p&gt;
&lt;p&gt;In the case of this Arduino project, we then use that information to determine if the object is within the specified distance range (&lt;code&gt;iMaxDistance&lt;/code&gt; in the code below), and if so, we turn the red light on and scale the output to a range of 0-255, which is the allowed analog output from the Arduino to the yellow &lt;span class="caps"&gt;LED&lt;/span&gt; using &lt;code&gt;analogWrite&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;And that&amp;#8217;s&amp;nbsp;it!&lt;/p&gt;
&lt;h3&gt;The&amp;nbsp;Code&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// Credit to JamesHappy for much of this tester code&lt;/span&gt;

&lt;span class="c1"&gt;// Onboard LED should blink while searching for surface&lt;/span&gt;
&lt;span class="c1"&gt;// Onboard LED should be solid when surface is within a specified distance&lt;/span&gt;
&lt;span class="c1"&gt;// Rangefinder should only wait for echos under a calculated timeout&lt;/span&gt;


&lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;iTrigger&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// Digital Pin 2&lt;/span&gt;
&lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;iEcho&lt;/span&gt;        &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// Digital Pin 3&lt;/span&gt;
&lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;iAlertLED&lt;/span&gt;                  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;13&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Digital Pin 13&lt;/span&gt;
&lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;iEchoTimeout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// In Microseconds&lt;/span&gt;
&lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;iMaxDistance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;30&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// In Centimeters&lt;/span&gt;

&lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;iTriggerPullDown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// In Microseconds&lt;/span&gt;
&lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;iPingWidth&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// In Microseconds&lt;/span&gt;

&lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;changingLed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;9600&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;pinMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iTrigger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="no"&gt;OUTPUT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;pinMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iEcho&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="no"&gt;INPUT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;pinMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iAlertLED&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;OUTPUT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;pinMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;changingLed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;OUTPUT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;iEchoTimeout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;iMaxDistance&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mh"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mh"&gt;29&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;digitalWrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;changingLed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;HIGH&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;



&lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;digitalWrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iTrigger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;LOW&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;delayMicroseconds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iTriggerPullDown&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;digitalWrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iTrigger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;HIGH&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;delayMicroseconds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iPingWidth&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;digitalWrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iTrigger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;LOW&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;unsigned&lt;/span&gt; &lt;span class="n"&gt;long&lt;/span&gt; &lt;span class="n"&gt;ulPing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pulseIn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iEcho&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="no"&gt;HIGH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;iEchoTimeout&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ulPing&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mh"&gt;2&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mh"&gt;29&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ulPing&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;digitalWrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iAlertLED&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;HIGH&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//    digitalWrite(changingLed, ((ulPing/2/29)/iEchoTimeout*255));&lt;/span&gt;
    &lt;span class="n"&gt;analogWrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;changingLed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ulPing&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;iEchoTimeout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;255&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;SimulateLoad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;250&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;digitalWrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;changingLed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;LOW&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;digitalWrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iAlertLED&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;HIGH&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;25&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;digitalWrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iAlertLED&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;LOW&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;SimulateLoad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;225&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="n"&gt;SimulateLoad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;iDutyCycle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iDutyCycle&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="hackerschool"></category><category term="arduino"></category><category term="ultrasonic"></category><category term="distance"></category></entry><entry><title>Getting syntax highlighting on Scriptogr.am (and other hosted static siteÂ generators)</title><link href="http://blog.jdotjdot.com/2014/03/getting-syntax-highlighting-on-scriptogr-am-and-other-hosted-static-site-generators/" rel="alternate"></link><updated>2014-03-26T00:00:00-04:00</updated><author><name>JJ</name></author><id>tag:blog.jdotjdot.com,2014-03-26:2014/03/getting-syntax-highlighting-on-scriptogr-am-and-other-hosted-static-site-generators/</id><summary type="html">&lt;p&gt;The benefits of hosted static site generators include crazy ease of use, auto-deployment, hosting, etc.&amp;#8212;but on the downside, you&amp;#8217;re sometimes a bit more limited in the control you have over the&amp;nbsp;site.&lt;/p&gt;
&lt;p&gt;When starting out with trying &lt;a href="http://scriptogr.am"&gt;Scriptogr.am&lt;/a&gt;, I was a bit disappointed by the lack of syntax highlighting.  Pelican uses &lt;a href="http://pygments.org"&gt;Pygments&lt;/a&gt;, but that runs on the server side in Python&amp;#8212;so it&amp;#8217;s fine for a personally hosted static site generator, but I wouldn&amp;#8217;t be able to get a hosted solution like Scriptogr.am (or Github Pages, for that matter) to use&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;A solution I found was &lt;a href="http://highlightjs.org/"&gt;HighlightJS&lt;/a&gt;, which is a Javascript-based code syntax detection and highlighting platform.  This is great, because being Javascript based, I can simply throw a link to the code into my Scriptogram (or whatever else) theme, and let the browser rather than the server (or static site generator) do the&amp;nbsp;work.&lt;/p&gt;
&lt;p&gt;I had a bit of difficulty getting it working, so I thought I&amp;#8217;d post this here for those of you with the same issue so you can avoid the&amp;nbsp;trouble.&lt;/p&gt;
&lt;h4&gt;Step 1: &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;This is easy.  They are nice enough to host a prebuilt version of HighlightJS, so you can simply link to it in your &lt;code&gt;&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;&lt;/code&gt; tag.  At the bottom, paste the&amp;nbsp;following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- any other html stuff --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://yandex.st/highlightjs/8.0/styles/default.min.css&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://yandex.st/highlightjs/8.0/highlight.min.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For a different HighlightJS theme for the syntax highlighting, simply change the &lt;code&gt;href&lt;/code&gt; attribute in the &lt;span class="caps"&gt;CSS&lt;/span&gt; &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; to your preferred theme&amp;nbsp;stylesheet.&lt;/p&gt;
&lt;h4&gt;Step 2: Make sure HighlightJS is called&amp;nbsp;last&lt;/h4&gt;
&lt;p&gt;The javascript you&amp;#8217;re already loading is supposed to run HighlightJS after the page loads, but that wasn&amp;#8217;t working for me with Scriptogr.am&amp;#8212;I imagine because Scriptogr.am itself probably had some functions that run after the page fully loads that were overriding and coming after what I had&amp;nbsp;specified.&lt;/p&gt;
&lt;p&gt;The way to get this working is to add another function to the very bottom of your &lt;span class="caps"&gt;HTML&lt;/span&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;&amp;lt;!-- above, the rest of your HTML file/theme --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;(function(){hljs.initHighlighting();})();&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Step 3:&amp;nbsp;Profit&lt;/h4&gt;
&lt;p&gt;Reload the page, and see if it works!  All of the code in &lt;code&gt;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;&lt;/code&gt; blocks should be automatically detected and&amp;nbsp;highlighted.&lt;/p&gt;
&lt;p&gt;If you need to make any changes or customization (e.g., your code isn&amp;#8217;t in &lt;code&gt;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;&lt;/code&gt; blocks), see the &lt;a href="http://highlightjs.org/usage/"&gt;HighlightJS usage docs&lt;/a&gt;, which are very&amp;nbsp;helpful.&lt;/p&gt;</summary><category term="hackerschool"></category><category term="scriptogr.am"></category><category term="static-site-generators"></category><category term="syntax-highlighting"></category><category term="highlightjs"></category></entry><entry><title>Static site generators andÂ choices</title><link href="http://blog.jdotjdot.com/2014/03/static-site-generators-and-choices/" rel="alternate"></link><updated>2014-03-26T00:00:00-04:00</updated><author><name>JJ</name></author><id>tag:blog.jdotjdot.com,2014-03-26:2014/03/static-site-generators-and-choices/</id><summary type="html">&lt;h3&gt;&lt;span class="caps"&gt;TL&lt;/span&gt;;&lt;span class="caps"&gt;DR&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;I&amp;#8217;m undecided on exactly where to settle on hosting my site.  The main things I&amp;#8217;m looking for&amp;nbsp;are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Code syntax&amp;nbsp;highlighting&lt;/li&gt;
&lt;li&gt;Nicely formatted list of categories and full archive on the&amp;nbsp;sidebar&lt;/li&gt;
&lt;li&gt;Editing from&amp;nbsp;anywhere&lt;/li&gt;
&lt;li&gt;Ease of&amp;nbsp;publishing/deployment&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Intro&lt;/h3&gt;
&lt;p&gt;As of this writing, my Hacker School blog is hosted on &lt;a href="http://ghost.org"&gt;Ghost&lt;/a&gt;, and as much as it&amp;#8217;s nice and easy to use with a great online writing platform, my ultimate goal is to be able to write anything from anywhere, and unfortunately Ghost isn&amp;#8217;t going to fit the bill there, by nature of having an online text editor that I have to&amp;nbsp;use.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve heard quite a bit about static site generators like &lt;a href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt; and &lt;a href="http://jekyllrb.com"&gt;Jekyll&lt;/a&gt;, and I went in to go take a&amp;nbsp;look.  &lt;/p&gt;
&lt;h3&gt;What is a static site generator, you&amp;nbsp;ask?&lt;/h3&gt;
&lt;p&gt;Fair question.  Most blogging platforms (like Wordpress, for example) are &lt;em&gt;dynamically generated&lt;/em&gt; sites&amp;#8212;meaning that the page is being generated from underlying data in a database every time you load it.  This sounds more complicated than it is.  Think about a site like Craigslist&amp;#8212;every time you view the same &lt;span class="caps"&gt;URL&lt;/span&gt;, the actual listings are actually always changing and being updated.  This is a dynamically generated site, because the page is changing every time.  And how is it changing?  Even though we&amp;#8217;re loading the same formatting and styling every time, the actual content of the posts to be presented to you on each load is being pulled from a database that lives&amp;nbsp;elsewhere.&lt;/p&gt;
&lt;p&gt;A while ago, someone smart noticed that your blog posts are not really going to be changing&amp;#8212;once it&amp;#8217;s published, it&amp;#8217;s unlikely to change.  Even if you edit it, it certainly won&amp;#8217;t be changing every day (hopefully).  As a result, you don&amp;#8217;t need to dynamically create each page each time a user loads&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;The answer is a &lt;strong&gt;static site generator&lt;/strong&gt;, which is a program that lets you build all of the &lt;span class="caps"&gt;HTML&lt;/span&gt; and &lt;span class="caps"&gt;CSS&lt;/span&gt; ahead of time and then post only the static, unchanging files.  Using something like this, you can actually serve your blog right out of something like Dropbox!  (And there are a number of offerings that do&amp;#8212;see &lt;a href="http://scriptogr.am"&gt;Scriptogr.am&lt;/a&gt;.)  Generally, you can write your posts in any text editor using Markdown syntax or something like it.  Markdown is a super-stripped down formatting that enables you to simply and quickly write formatted text that later gets translated into &lt;span class="caps"&gt;HTML&lt;/span&gt;.  (Examples: &lt;code&gt;*italics*&lt;/code&gt; makes things &lt;em&gt;italic&lt;/em&gt;, &lt;code&gt;**bold**&lt;/code&gt; makes things &lt;strong&gt;bold&lt;/strong&gt;, &lt;code&gt;[This is a URL!](http://www.google.com)&lt;/code&gt; makes things into &lt;a href="http://www.google.com"&gt;&lt;span class="caps"&gt;URLS&lt;/span&gt;&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;This means that you can create and edit posts from anywhere.  When you&amp;#8217;re ready, you save them into your site generators posts folder and run the program, which generates a fully featured site based on your posts&amp;#8217; content and your selected theme, which styles&amp;nbsp;everything.&lt;/p&gt;
&lt;h3&gt;Jekyll&lt;/h3&gt;
&lt;p&gt;Jekyll seemed great at first, and I particularly liked the fact that it can be easily hosted on Github Pages without any extra work (or even site generation) on my part, since Github will run the Jekyll page generation for you.  Unfortunately, it only does that for Jekyll, and not for any others, like Pelican.  The other issue I ran into is Jekyll is pretty unwieldy&amp;#8212;and even using Octopress, which sites on top of Jekyll, I still had quite a bit of trouble getting into the meat of it.  After some Googling, I found that I was far from the only Python person having trouble, and you need to have some Ruby skills if Jekyll ever&amp;nbsp;breaks.&lt;/p&gt;
&lt;h3&gt;Pelican&lt;/h3&gt;
&lt;p&gt;Next stop was Pelican, which is a static site generator similar to Jekyll, but in Python.  It&amp;#8217;s also a bit tough to set up, but I&amp;#8217;m liking it a bit more, since I have a better understanding of the internals due to it being in Python.   On the other hand, I&amp;#8217;ve still found it a bit of a handful to set up (spent a few hours on it and I&amp;#8217;m not quite there yet!).  Additionally, it&amp;#8217;s still not &lt;em&gt;quite&lt;/em&gt; &amp;#8220;edit from anywhere&amp;#8221;&amp;#8212;I know that I can create and edit posts in any text editor and offline, but at the end of the day, I&amp;#8217;ll still have to move all of my posts to the contents folder in my blog repo, run the &lt;code&gt;pelican&lt;/code&gt; command to generate the site, and then push the site to the final Github repo.  I can set this all up automatically with Fabric or web hooks, but at the end of the day, it&amp;#8217;s still a little bit&amp;nbsp;annoying.&lt;/p&gt;
&lt;h3&gt;Scriptogr.am&lt;/h3&gt;
&lt;p&gt;Scriptogr.am is a very cool hosted static site generator that runs out of Dropbox.  All you have to do is save your Markdown-formatted files to your special &amp;#8220;Scriptogram&amp;#8221; Dropbox folder, and Scriptogr.am automatically loads the files there, runs them through its own site generator using your selected (or customized) theme, and then hosts the site for you.  This is really great because you truly can edit or post from anywhere, as all you have to do is save to Dropbox, and everything happens automatically from there.  You can even publish right to Scriptogr.am from Markdown-editing programs like Mou for&amp;nbsp;Mac.&lt;/p&gt;
&lt;p&gt;The downside is, given that it&amp;#8217;s a hosted solution, I have quite a bit less control over the blog itself.  I&amp;#8217;m sure I could manage to force the theme to do my will, but it would mean quite a bit of effort messing with the built-in &lt;span class="caps"&gt;HTML&lt;/span&gt; and &lt;span class="caps"&gt;CSS&lt;/span&gt; themes, and given that it&amp;#8217;s still a pretty small site, there aren&amp;#8217;t that many themes offered out of the box.  I&amp;#8217;m also not totally clear if there&amp;#8217;s an &lt;span class="caps"&gt;RSS&lt;/span&gt; feed&amp;nbsp;built-in.&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;None yet.  I&amp;#8217;m right now between Scriptogr.am and Pelican, but given that I like the ease of use of Scriptogr.am but the control of Pelican, I&amp;#8217;m likely to go with a combined scenario, where I&amp;#8217;ll basically create my own automatically-publishing version of Pelican out of Dropbox.  Basically, what I will do is create a small Heroku instance that will do nothing but listen for a web hook from Dropbox, and upon receiving it, pull all of the files stored in the Dropbox folder, run the Pelican site generator, commit the repo, and then push to Github pages.
Unfortunately, Dropbox doesn&amp;#8217;t currently support web hooks.  Also, &lt;span class="caps"&gt;IFTTT&lt;/span&gt; only has support for the deprecated Dropbox Public folder, but it seems like Zapier does have decent Dropbox&amp;nbsp;integration.&lt;/p&gt;
&lt;h3&gt;Update&lt;/h3&gt;
&lt;p&gt;I&amp;#8217;m at this very moment moving the site over to Pelican, and by the time you read this, it should already be there.  Dropbox also just this week announced that they&amp;#8217;ll be &lt;a href="https://www.dropbox.com/developers/blog/90/announcing-dropbox-webhooks"&gt;supporting webhooks&lt;/a&gt;, which will be very exciting for enabling me to simply manage all of my post content out of Dropbox and then have the site regenerated upon any&amp;nbsp;changes.&lt;/p&gt;</summary><category term="hackerschool"></category><category term="pelican"></category><category term="jekyll"></category><category term="scriptogr.am"></category><category term="dropbox"></category><category term="zapier"></category><category term="markdown"></category><category term="static-site-generators"></category></entry><entry><title>Some things I learned aboutÂ Android</title><link href="http://blog.jdotjdot.com/2014/03/some-things-i-learned-about-android/" rel="alternate"></link><updated>2014-03-24T00:00:00-04:00</updated><author><name>JJ</name></author><id>tag:blog.jdotjdot.com,2014-03-24:2014/03/some-things-i-learned-about-android/</id><summary type="html">&lt;h3&gt;Activity layouts: &lt;span class="caps"&gt;XML&lt;/span&gt; vs&amp;nbsp;Java&lt;/h3&gt;
&lt;p&gt;For a long while, I couldn&amp;#8217;t really understand the difference between the &lt;span class="caps"&gt;XML&lt;/span&gt; files and the Java files.   It seemed at first like the &lt;span class="caps"&gt;XML&lt;/span&gt; files determine what objects are available on the display for a particular activity, and then the actions and interactivity of those objects are determined by an accompanying Java file.  However, when working later with another android developer example, I saw that the buttons were actually being created &lt;em&gt;in Java&lt;/em&gt; and not included in the &lt;span class="caps"&gt;XML&lt;/span&gt; at&amp;nbsp;all:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt;
&lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Bundle&lt;/span&gt; &lt;span class="n"&gt;icicle&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;onCreate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;icicle&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;LinearLayout&lt;/span&gt; &lt;span class="n"&gt;ll&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;LinearLayout&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;mRecordButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;RecordButton&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;ll&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mRecordButton&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;LinearLayout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;LayoutParams&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                    &lt;span class="n"&gt;ViewGroup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;LayoutParams&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;WRAP_CONTENT&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;ViewGroup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;LayoutParams&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;WRAP_CONTENT&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;mPlayButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;PlayButton&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;ll&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mPlayButton&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;LinearLayout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;LayoutParams&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                    &lt;span class="n"&gt;ViewGroup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;LayoutParams&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;WRAP_CONTENT&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;ViewGroup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;LayoutParams&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;WRAP_CONTENT&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;

    &lt;span class="n"&gt;setContentView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ll&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;//super.onCreate(icicle);&lt;/span&gt;
    &lt;span class="c1"&gt;//setContentView(R.layout.activity_audio_record_test);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The commented out block at the bottom is what appears by default when creating the activity using the &lt;span class="caps"&gt;GUI&lt;/span&gt; in Android Developer Tools.  I realized that the &lt;code&gt;R.layout.activity_audio_record_test&lt;/code&gt; corresponsed to the filepath &lt;code&gt;res/layout/activity_audio_record_test.xml&lt;/code&gt;, which was the auto-generated layout &lt;span class="caps"&gt;XML&lt;/span&gt; file.  But the reason none of that was making its way to the actual app was because the &lt;code&gt;setContentView&lt;/code&gt; function that would call it is commented out, and instead there is a &lt;code&gt;setContentView(ll)&lt;/code&gt; above that uses an Android &lt;code&gt;LinearLayout&lt;/code&gt; object created entirley in&amp;nbsp;Java.&lt;/p&gt;
&lt;p&gt;To compare, in &lt;span class="caps"&gt;XML&lt;/span&gt;, this would probably look something like the&amp;nbsp;following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;LinearLayout&lt;/span&gt; &lt;span class="na"&gt;xlmns:android=&lt;/span&gt;&lt;span class="s"&gt;âhttp://schemas.android.com/apk/res/androidâ&lt;/span&gt;
    &lt;span class="na"&gt;xlmns:tools=&lt;/span&gt;&lt;span class="s"&gt;âhttp://schemas.android.com/toolsâ&lt;/span&gt;
    &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;âmatch_parentâ&lt;/span&gt;
    &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;âmatch_parentâ&lt;/span&gt;
    &lt;span class="na"&gt;android:paddingBottom=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@dimen/activity_vertical_margin&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;android:paddingLeft=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@dimen/activity_horizontal_margin&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;android:paddingRight=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@dimen/activity_horizontal_margin&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;android:paddingTop=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@dimen/activity_vertical_margin&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;tools:context=&lt;/span&gt;&lt;span class="s"&gt;â.AudioRecordTestâ&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;Button&lt;/span&gt; 
        &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;âwrap_contentâ&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;âwrap_contentâ&lt;/span&gt;
        &lt;span class="na"&gt;android:text=&lt;/span&gt;&lt;span class="s"&gt;âStart&lt;/span&gt; &lt;span class="err"&gt;Recordingâ&lt;/span&gt;
        &lt;span class="na"&gt;android:Id=&lt;/span&gt;&lt;span class="s"&gt;â@+id/record_buttonâ&lt;/span&gt;
        &lt;span class="na"&gt;android:onClick=&lt;/span&gt;&lt;span class="s"&gt;âonRecordâ&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;Button&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;âwrap_contentâ&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;âwrap_contentâ&lt;/span&gt;
        &lt;span class="na"&gt;android:text=&lt;/span&gt;&lt;span class="s"&gt;âStart&lt;/span&gt; &lt;span class="err"&gt;Playingâ&lt;/span&gt;
        &lt;span class="na"&gt;android:Id=&lt;/span&gt;&lt;span class="s"&gt;â@+id/play_buttonâ&lt;/span&gt;
        &lt;span class="na"&gt;android:onClick=&lt;/span&gt;&lt;span class="s"&gt;âonPlayâ&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/LinearLayout&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Much uglier, in my&amp;nbsp;opinion.&lt;/p&gt;</summary><category term="hackerschool"></category><category term="android"></category><category term="java"></category></entry><entry><title>How to use getopts inside a BashÂ function</title><link href="http://blog.jdotjdot.com/2014/03/how-to-use-getopts-inside-a-bash-function/" rel="alternate"></link><updated>2014-03-18T00:00:00-04:00</updated><author><name>JJ</name></author><id>tag:blog.jdotjdot.com,2014-03-18:2014/03/how-to-use-getopts-inside-a-bash-function/</id><summary type="html">&lt;p&gt;As part of my quest to finish packaging up my Bash function that gets the updated weather in your Bash prompt, I needed to better organize my code, and so started putting some code into functions.  Bash, however, is a fickle language, and the difficulty that quickly arose was using &lt;code&gt;getops&lt;/code&gt; within a Bash&amp;nbsp;function.&lt;/p&gt;
&lt;p&gt;The reason that I wanted to do this is that Bash, in its infinite wisdom, doesn&amp;#8217;t have regular namespacing.  When you use &lt;code&gt;source&lt;/code&gt; or &lt;code&gt;.&lt;/code&gt; on a Bash script and it sets a variable, that variable is now set across your entire environment (e.g., that terminal window).  That&amp;#8217;s not great to begin with, but given that this script is going to be called every time the prompt is run (meaning, literally every time a command is run), I want to be sure not to clutter up users&amp;#8217; global&amp;nbsp;namespace.&lt;/p&gt;
&lt;p&gt;Originally, it was working fine when placed straight in the shell&amp;nbsp;script:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

  &lt;span class="k"&gt;while &lt;/span&gt;&lt;span class="nb"&gt;getopts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;:c:l:u:s:&amp;quot;&lt;/span&gt; opt ; &lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="k"&gt;      case&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;$opt&amp;quot;&lt;/span&gt; in
          c  &lt;span class="o"&gt;)&lt;/span&gt;   &lt;span class="c"&gt;# default character to display if no weather, leave empty for none&lt;/span&gt;
              &lt;span class="nv"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$OPTARG&amp;quot;&lt;/span&gt;
              ;;
          l  &lt;span class="o"&gt;)&lt;/span&gt;   &lt;span class="c"&gt;# supply city name instead of using internet&lt;/span&gt;
              &lt;span class="nv"&gt;l&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$OPTARG&amp;quot;&lt;/span&gt;
              ;;
          u  &lt;span class="o"&gt;)&lt;/span&gt;   &lt;span class="c"&gt;# how often to update weather in seconds&lt;/span&gt;
              &lt;span class="nv"&gt;u&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$OPTARG&amp;quot;&lt;/span&gt;
              ;;
          s  &lt;span class="o"&gt;)&lt;/span&gt;   &lt;span class="c"&gt;# weather update alert string to supply, if any&lt;/span&gt;
              &lt;span class="nv"&gt;s&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$OPTARG&amp;quot;&lt;/span&gt;
              ;;
          h  &lt;span class="o"&gt;)&lt;/span&gt;
              &lt;span class="c"&gt;# echo the help file&lt;/span&gt;
              ;;
          &lt;span class="se"&gt;\?&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt;
              &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Invalid option: -$OPTARG&amp;quot;&lt;/span&gt; &amp;gt;&amp;amp;2
              ;;
          :  &lt;span class="o"&gt;)&lt;/span&gt;
              &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Option -$OPTARG requires an argument.&amp;quot;&lt;/span&gt; &amp;gt;&amp;amp;2
              &lt;span class="nb"&gt;exit &lt;/span&gt;1
              ;;
      &lt;span class="k"&gt;esac&lt;/span&gt;
&lt;span class="k"&gt;  done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;What this does is it allows you to call my shell script with various parameters,&amp;nbsp;e.g.:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;BashWeather&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;$&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;My first thought to be able to stick it inside a function was to simply pass on the parameters to the function, but you can&amp;#8217;t really pass arguments to Bash functions, nor can you return values except for &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;1&lt;/code&gt; as an exit status code.   In Python, you could just declare a function with arguments like &lt;code&gt;def myfunc(arg1):&lt;/code&gt;, but in Bash there&amp;#8217;s no equivalent to that, and &lt;code&gt;getopts&lt;/code&gt; itself is actually how you&amp;#8217;d likely parse any arguments passed&amp;nbsp;in.&lt;/p&gt;
&lt;p&gt;Ultimately, that was what I ended up doing, but I had to do it the Bash way, passing it to the function as &lt;code&gt;"$@"&lt;/code&gt;, referencing the inputs that were passed in by the calling script.  I had a hard time figuring this out, so I thought it would be useful to post this&amp;nbsp;here.&lt;/p&gt;
&lt;p&gt;Final&amp;nbsp;output:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="k"&gt;function &lt;/span&gt;getOptsFunction &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;local &lt;/span&gt;OPTIND
  &lt;span class="k"&gt;while &lt;/span&gt;&lt;span class="nb"&gt;getopts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;:c:l:u:s:&amp;quot;&lt;/span&gt; opt ; &lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="k"&gt;      case&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;$opt&amp;quot;&lt;/span&gt; in
          c  &lt;span class="o"&gt;)&lt;/span&gt;   &lt;span class="c"&gt;# default character to display if no weather, leave empty for none&lt;/span&gt;
              &lt;span class="nv"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$OPTARG&amp;quot;&lt;/span&gt;
              ;;
          l  &lt;span class="o"&gt;)&lt;/span&gt;   &lt;span class="c"&gt;# supply city name instead of using internet&lt;/span&gt;
              &lt;span class="nv"&gt;l&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$OPTARG&amp;quot;&lt;/span&gt;
              ;;
          u  &lt;span class="o"&gt;)&lt;/span&gt;   &lt;span class="c"&gt;# how often to update weather in seconds&lt;/span&gt;
              &lt;span class="nv"&gt;u&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$OPTARG&amp;quot;&lt;/span&gt;
              ;;
          s  &lt;span class="o"&gt;)&lt;/span&gt;   &lt;span class="c"&gt;# weather update alert string to supply, if any&lt;/span&gt;
              &lt;span class="nv"&gt;s&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$OPTARG&amp;quot;&lt;/span&gt;
              ;;
          h  &lt;span class="o"&gt;)&lt;/span&gt;
              &lt;span class="c"&gt;# echo the help file&lt;/span&gt;
              ;;
          &lt;span class="se"&gt;\?&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt;
              &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Invalid option: -$OPTARG&amp;quot;&lt;/span&gt; &amp;gt;&amp;amp;2
              ;;
          :  &lt;span class="o"&gt;)&lt;/span&gt;
              &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Option -$OPTARG requires an argument.&amp;quot;&lt;/span&gt; &amp;gt;&amp;amp;2
              &lt;span class="nb"&gt;exit &lt;/span&gt;1
              ;;
      &lt;span class="k"&gt;esac&lt;/span&gt;
&lt;span class="k"&gt;  done&lt;/span&gt;
&lt;span class="k"&gt;  &lt;/span&gt;&lt;span class="nb"&gt;shift&lt;/span&gt; &lt;span class="k"&gt;$((&lt;/span&gt;OPTIND-1&lt;span class="k"&gt;))&lt;/span&gt;

  &lt;span class="c"&gt;# set defaults if command not supplied&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -z &lt;span class="s2"&gt;&amp;quot;$u&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; ; &lt;span class="k"&gt;then &lt;/span&gt;&lt;span class="nv"&gt;u&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;10800 ; &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="k"&gt;  if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -z &lt;span class="s2"&gt;&amp;quot;$c&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; ; &lt;span class="k"&gt;then &lt;/span&gt;&lt;span class="nv"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$&amp;quot;&lt;/span&gt; ; &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

getOptsFunction &lt;span class="s2"&gt;&amp;quot;$@&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</summary><category term="hackerschool"></category><category term="bash"></category><category term="getopts"></category></entry><entry><title>Asynchronous programming withÂ Arduino</title><link href="http://blog.jdotjdot.com/2014/03/asynchronous-programming-with-spark-core/" rel="alternate"></link><updated>2014-03-11T00:00:00-04:00</updated><author><name>JJ</name></author><id>tag:blog.jdotjdot.com,2014-03-11:2014/03/asynchronous-programming-with-spark-core/</id><summary type="html">&lt;p&gt;I&amp;#8217;ve been working quite a bit this week and last week with &lt;a href="http://www.arduino.cc/"&gt;Arduinos&lt;/a&gt; and &lt;a href="https://www.spark.io/"&gt;Spark Cores&lt;/a&gt; (an Arduino-like device with WiFi and a cloud service built-in).   I&amp;#8217;ve been working on a few projects, including many out of the Arduino starter book, hooking up a remote control car to WiFi, and hooking up the Hacker School door buzzer to our WiFi so that we can let people in  without pressing the door buzzer&amp;#8212;or so that people can let themselves&amp;nbsp;in.&lt;/p&gt;
&lt;p&gt;One of the issues I&amp;#8217;ve run across that&amp;#8217;s been interesting is how to run threaded or asynchronous commands.  This is important if we want the Arduino to do something, but we also need a time delay.  For example, if someone sends a command to the Arduino to open the door, we need to do the following two&amp;nbsp;things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open the door, wait 10 seconds, close the&amp;nbsp;door&lt;/li&gt;
&lt;li&gt;Respond to the request and close the connection&amp;#8212;e.g. with a &lt;code&gt;HTTP 200 OK&lt;/code&gt; or something&amp;nbsp;similar.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The way my code was structured, I was sending the command to the door before responding to the client.  The problem is that the Arduino is running a single set of instructions, so the response to the client is delayed by waiting for the door to close.  For example, the steps occured in the following&amp;nbsp;order:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Arduino server recieves request to open the&amp;nbsp;door&lt;/li&gt;
&lt;li&gt;Arduino opens&amp;nbsp;door&lt;/li&gt;
&lt;li&gt;Arduino sits and waits for 10&amp;nbsp;seconds&lt;/li&gt;
&lt;li&gt;Arduino closes&amp;nbsp;door&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Then&lt;/em&gt;, Arduino sends response&amp;nbsp;message&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The client is then sitting there and waiting for 10 seconds to know what happened.  I didn&amp;#8217;t want to have this happen, so there had to be a better way to do it&amp;#8212;and I realized I could take advantage of the Arduino&amp;#8217;s built-in looping&amp;nbsp;structure.&lt;/p&gt;
&lt;h3&gt;First, some&amp;nbsp;background&lt;/h3&gt;
&lt;p&gt;The Arduino requires its code to be set up in a specific manner, with two specific functions that it will always&amp;nbsp;run.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;// This function is called once upon start-up&lt;/span&gt;
   &lt;span class="c1"&gt;//  to do any set-up required--e.g., initalizing&lt;/span&gt;
   &lt;span class="c1"&gt;//  intput and output pins&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nx"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="cm"&gt;/* This function is called over and over again, many &lt;/span&gt;
&lt;span class="cm"&gt;   times per second.&lt;/span&gt;

&lt;span class="cm"&gt;   However, it only runs once at a time, so if you have a &amp;quot;delay&amp;quot; command in there, all activity will cease until the delay is over.&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;What I&amp;nbsp;did&lt;/h3&gt;
&lt;p&gt;I took advantage of how frequently &lt;code&gt;loop()&lt;/code&gt; is called.  I set up a block at the top of &lt;code&gt;loop()&lt;/code&gt; (or alternatively could be a different function that is called at the top of &lt;code&gt;loop()&lt;/code&gt;) that would run the open door command when a state variable, declared at the beginning, was set to &lt;code&gt;true&lt;/code&gt;, and then immediately turn it to false.&lt;br /&gt;
Rather than open the door immediately upon receiving the request, the Arduino would set this &amp;#8220;openDoor&amp;#8221; variable to &lt;code&gt;true&lt;/code&gt; and would immediately respond to the client.  The next time the program looped around, it would see that &lt;code&gt;openDoor&lt;/code&gt; says that the door needs to be open it&amp;#8212;and so it would open it and have the delay, but it would do all this after the client had been responded&amp;nbsp;to.&lt;/p&gt;
&lt;p&gt;Overall, the code looked something like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;asyncOpenDoor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;openDoor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// code to open the door&lt;/span&gt;
    &lt;span class="c1"&gt;// below is pseudocode&lt;/span&gt;

    &lt;span class="n"&gt;asyncOpenDoor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// so door isn&amp;#39;t opened again&lt;/span&gt;

    &lt;span class="n"&gt;openTheDoor&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// delay for 15 seconds&lt;/span&gt;
    &lt;span class="n"&gt;closeTheDoor&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;pinMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doorOpener&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OUTPUT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// code to set up the server&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asyncOpenDoor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;openDoor&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="c1"&gt;// Code to receive incoming requests&lt;/span&gt;

   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;requestSaysToOpenTheDoor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Valid door-opening request&lt;/span&gt;

      &lt;span class="n"&gt;asyncOpenDoor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="c1"&gt;// respond to client&lt;/span&gt;
      &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;HTTP 200 OK&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// invalid door-opening request&lt;/span&gt;

      &lt;span class="c1"&gt;// respond to client&lt;/span&gt;
      &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;HTTP 401 Unauthorized&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="c1"&gt;// kill the connection&lt;/span&gt;
   &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
   &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="C"></category><category term="async"></category></entry><entry><title>How to get Facebook Chat on OS XÂ Messages</title><link href="http://blog.jdotjdot.com/2014/03/how-to-get-facebook-chat-on-os-x-messages/" rel="alternate"></link><updated>2014-03-04T00:00:00-05:00</updated><author><name>JJ</name></author><id>tag:blog.jdotjdot.com,2014-03-04:2014/03/how-to-get-facebook-chat-on-os-x-messages/</id><summary type="html">&lt;p&gt;I use Facebook Messenger to talk to many of my friends, but I find it really annoying when I&amp;#8217;m using the internet and working on other things as well to have to switch between the current window or tab and Facebook to be able to respond to anyone.  It becomes much more of a distraction because it forces me to block much more of the screen than I&amp;#8217;d otherwise have to, since I&amp;#8217;m switching to an entire browser pane of Facebook, and resizing an individual lone tab simply for Facebook Chat doesn&amp;#8217;t really work, given what happens to Facebook pages when you&amp;nbsp;resize.&lt;/p&gt;
&lt;p&gt;So, I was pleased to discover that Facebook Chat just operates on Jabber, meaning that you can add it as an account to the &lt;span class="caps"&gt;OS&lt;/span&gt; X Messages&amp;nbsp;client.&lt;/p&gt;
&lt;p&gt;Here are instructions for doing&amp;nbsp;so:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open up the Messages app; looks like the following:&lt;br&gt;&lt;img alt="Messenger App" src="http://snag.gy/N3aw0.jpg" /&gt;&lt;/li&gt;
&lt;li&gt;Go to the Accounts tab, and then add a new account by clicking the &lt;code&gt;+&lt;/code&gt; sign near the bottom&amp;nbsp;left.&lt;/li&gt;
&lt;li&gt;Select &amp;#8220;Other messages&amp;nbsp;account&amp;#8230;&amp;#8221;&lt;/li&gt;
&lt;li&gt;Under &amp;#8220;Account Type&amp;#8221;, select &amp;#8220;Jabber&amp;#8221;.  Then, for &amp;#8220;Account Name&amp;#8221;, write your Facebook &lt;span class="caps"&gt;ID&lt;/span&gt; (this is the &lt;span class="caps"&gt;ID&lt;/span&gt; that follows &lt;code&gt;https://www.facebook.com/&lt;/code&gt; when you go to your Facebook page) followed by &amp;#8220;@chat.facebook.com&amp;#8221;.  For example, Obama would put &amp;#8220;barackobama@chat.facebook.com&amp;#8221;, because if you go to &lt;a href="https://www.facebook.com/barackobama"&gt;his Facebook page&lt;/a&gt;, you&amp;#8217;ll see in the &lt;span class="caps"&gt;URL&lt;/span&gt; bar that &amp;#8220;barackobama&amp;#8221; is his account &lt;span class="caps"&gt;ID&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Put your Facebook password as your password.  If you&amp;#8217;re using 2-factor authentication (which you should be), after submitting, you&amp;#8217;ll get a text/notification with a 6-digit numerical code for you to use instead, which you should then use as the password&amp;nbsp;instead. &lt;/li&gt;
&lt;li&gt;For &amp;#8220;Server&amp;#8221;, write &amp;#8220;chat.facebook.com&amp;#8221;.&lt;br&gt;
&lt;img alt="Messages app settings" src="http://snag.gy/kFuco.jpg" /&gt;&lt;/li&gt;
&lt;li&gt;You can leave everything else unchecked, and just press &amp;#8220;Create&amp;#8221;&amp;#8212;and you&amp;#8217;re good to go!  You&amp;#8217;ll see your Facebook friends and chats alongside your iMessages and any other accounts you have on the Messages app.  Note that anything you send through the Messages app can still be seen in your Facebook windows, and anything sent to you on Facebook while logged in via Messages will show up in your computer, but if you send a Facebook message from another device, it will be updated on Facebook only and &lt;strong&gt;not&lt;/strong&gt; on the Messages&amp;nbsp;app.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This method can be used to enable Facebook chat on basically any other Jabber client, as&amp;nbsp;well.&lt;/p&gt;</summary><category term="jabber"></category><category term="os-x"></category><category term="messages-app"></category></entry><entry><title>Day 9: ItÂ works!</title><link href="http://blog.jdotjdot.com/2014/02/day-9-victory/" rel="alternate"></link><updated>2014-02-20T00:00:00-05:00</updated><author><name>JJ</name></author><id>tag:blog.jdotjdot.com,2014-02-20:2014/02/day-9-victory/</id><summary type="html">&lt;p&gt;We had a great talk by Mel Chua not long ago about different types of learning, and &lt;a href="http://de.slideshare.net/mchua/edutalk-w2014"&gt;how learning works at Hacker School&lt;/a&gt;.   One of the main things she pointed out at the beginning was that learning at Hacker School is very different than the kind of directed learning that you might find in school - all of us are going to spend a fair amount of time being &lt;strong&gt;productively lost&lt;/strong&gt;.  &lt;/p&gt;
&lt;p&gt;This means that we&amp;#8217;ll be sitting there hacking away at something, having no idea what we&amp;#8217;re doing or how it works, feeling very stupid, thinking we&amp;#8217;re not cut out for this, and then every once in a while, out of&amp;nbsp;nowhere&amp;#8230;&lt;/p&gt;
&lt;h3&gt;&lt;center&gt;It works!&lt;/center&gt;&lt;/h3&gt;
&lt;p&gt;I had one of those moments today, while working on an extremely basic android app to record a call, as part of my efforts on the Dial-Up Over Cell Phone project.  I knew absolutely no android before this and no Java, so it&amp;#8217;s been a lot to pick up at once, especially because android development has turned out to be pretty confusing and not that well designed. I was following the official &lt;a href="https://developer.android.com/training/basics/firstapp/index.html"&gt;&amp;#8220;Building Your First App&amp;#8221;&lt;/a&gt; guide, but I was having quite a bit of trouble with&amp;nbsp;it. &lt;/p&gt;
&lt;p&gt;After a while, I managed to get an extremely basic two page (or &amp;#8220;activity&amp;#8221;, in android parlance) app up on an emulator.  Eventually I actually put it on a phone, which felt pretty&amp;nbsp;cool.&lt;/p&gt;
&lt;p&gt;First page of the app:
&lt;center&gt;&lt;img src="http://blog.jdotjdot.com/images/Screenshot_2014-02-20-17-51-15.png" title=""First page of my app"" width="361" height="643" alt=""First page of my app""&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;And then, after you&amp;#8217;ve written the message:
&lt;center&gt;&lt;img src="http://blog.jdotjdot.com/images/Screenshot_2014-02-20-17-51-27.png" title=""Writing the message"" width="361" height="643" alt=""Writing the message""&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;Finally, send the message to the second page:
&lt;center&gt;&lt;img src="http://blog.jdotjdot.com/images/Screenshot_2014-02-20-17-51-31.png" title=""The message was sent!"" width="361" height="643" alt=""The message was sent!""&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;So that was great, but ultimately, the goal of today was to get an app working where I could press a button to record a sound, and then press another button to play it back.  This is to help get me on my way towards an app where I can actually record the voice downlink of a call, which is the painful but necessary first step for my Dial-Up Over Cell Phone&amp;nbsp;project.&lt;/p&gt;
&lt;p&gt;I was having trouble with this all day.  Recording is apparently pretty fraught with bugs in android, and playing back is too. I spent much of the data looking at scary errors like &lt;code&gt;media server died&lt;/code&gt; or &lt;code&gt;incorrect format for writing&lt;/code&gt; or completely useless errors like &lt;code&gt;prepare() failed!&lt;/code&gt;  So I just kept trying different settings, different audio codecs like using &lt;code&gt;AAC&lt;/code&gt; instead of the default &lt;code&gt;3GP&lt;/code&gt;, looking at the saved audio file itself to see if maybe audio was getting written but the player just wasn&amp;#8217;t working, and then I went back to &lt;code&gt;3GP&lt;/code&gt; and noticed that the filename I was saving as didn&amp;#8217;t match so fixed that from ending in &lt;code&gt;.aac&lt;/code&gt; to &lt;code&gt;.3gp&lt;/code&gt; and then all the&amp;nbsp;sudden&lt;/p&gt;
&lt;h3&gt;&lt;center&gt;It worked!&lt;/center&gt;&lt;/h3&gt;
&lt;p&gt;I had my android app on my android phone, pressed the &amp;#8220;Audio Page&amp;#8221; button to go the audio page, and then pressed the &amp;#8220;Record&amp;#8221; button to record, recorded a sound, stopped the recording, and then pressed the &amp;#8220;Play&amp;#8221; button to play it&amp;nbsp;back!&lt;/p&gt;
&lt;p&gt;Even though I&amp;#8217;m only 80% of the way there in understanding why this particular configuration worked and I need to understand in order to go the rest of the way, it&amp;#8217;s those moments of &amp;#8220;aha!&amp;#8221; that make it all worth&amp;nbsp;it.&lt;/p&gt;</summary><category term="hackerschool"></category><category term="dial-up-over-cell-phone"></category><category term="android"></category><category term="mel-chua"></category><category term="it-works"></category><category term="productively-lost"></category></entry><entry><title>Week 2: Dial-up over cellÂ phone</title><link href="http://blog.jdotjdot.com/2014/02/dial-up-over-cell-phone/" rel="alternate"></link><updated>2014-02-20T00:00:00-05:00</updated><author><name>JJ</name></author><id>tag:blog.jdotjdot.com,2014-02-20:2014/02/dial-up-over-cell-phone/</id><summary type="html">&lt;p&gt;This week, I decided on and started on what will be my first project for a bit, assuming everything works&amp;nbsp;out:&lt;/p&gt;
&lt;h3&gt;Internet over cell&amp;nbsp;phone&lt;/h3&gt;
&lt;p&gt;The thought behind this is that in the &lt;span class="caps"&gt;US&lt;/span&gt;, we used to have unlimited data plans and limited voice plans, but now things have switched and the carriers mostly force everyone into limited data but unlimited voice&amp;nbsp;plans. &lt;/p&gt;
&lt;p&gt;I think it would be really cool if you could use your &lt;strong&gt;voice minutes&lt;/strong&gt; to access the internet instead of your data connection, essentially transmitting arbitrary data from the internet over an analogue connection&amp;#8212;the same way was done with dial-up modems or&amp;nbsp;fax.&lt;/p&gt;
&lt;p&gt;The difference here, though, is that we&amp;#8217;d be using cellular connections, which are a lot more likely to be lossy and/or drop calls than the landlines that used to be used for this kind of&amp;nbsp;thing.&lt;/p&gt;
&lt;hr /&gt;
&lt;h4&gt;Getting&amp;nbsp;Started&lt;/h4&gt;
&lt;p&gt;I got started with all of this yesterday, and by speaking to quite a few people, I was assisted in boiling the overall project down into a basic stack that should cover all elements of what would be necessary for this technology, from the highest-level to the lowest-level&amp;nbsp;layer:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Compression&lt;/strong&gt;
This would be taking the data pulled from the internet (a web page, a picture, whatever) and compressing it so that I have physically less data to send.  There are many compression algorithms already available, many of which can slice up the data into smaller chunks to be sent out separately like I will have to do, so I will use a library that&amp;#8217;s already built.  &lt;code&gt;LZMA&lt;/code&gt; was recommended to me as a good compression&amp;nbsp;algorithm.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Transport protocol&lt;/strong&gt;
This is one of the major pieces of this technology that I&amp;#8217;m going to have to design and implement effectively from scratch.  Somehow, I need a way for the sending server to decide how to bundle up the different packets of compressed information and send them one at a time (or more than one at at time) similar to how it&amp;#8217;s done currently on the internet.
It&amp;#8217;s kind of like the way it was sending letters by mail before telephone and internet - the sender would send a letter and would have no way of knowing if the intended recipient received it unless he sent a letter back, as well.  Current internet protocols (like &lt;span class="caps"&gt;TCP&lt;/span&gt;) have this built in in what is called a &lt;a href="http://www.inetdaemon.com/tutorials/internet/tcp/3-way_handshake.shtml"&gt;&amp;#8220;three-way handshake&amp;#8221;&lt;/a&gt; so that the two computers know that they are both sending and receiving.
Super-summarized, if we continued with the letter-sending comparison, it&amp;#8217;s something along these&amp;nbsp;lines:&lt;/li&gt;
&lt;li&gt;Bob sends a letter to Alice, saying &amp;#8220;Hey!  Did you receive this letter?&amp;#8221;&lt;ul&gt;
&lt;li&gt;This is called the &lt;strong&gt;&lt;span class="caps"&gt;SYN&lt;/span&gt;&lt;/strong&gt; packet, since Bob(&amp;#8216;s server) is asking to &lt;strong&gt;synchronize&lt;/strong&gt; with&amp;nbsp;Alice&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Alice, if she receives the letter, sends one back to Bob, saying &amp;#8220;Yup, got yours!  Are you getting this one?&amp;#8221;&lt;ul&gt;
&lt;li&gt;This is called the &lt;strong&gt;&lt;span class="caps"&gt;SYN&lt;/span&gt;-&lt;span class="caps"&gt;ACK&lt;/span&gt;&lt;/strong&gt; packet, because Alice is &lt;strong&gt;acknowledging&lt;/strong&gt; Bob&amp;#8217;s letter and also asking to &lt;strong&gt;synchronize&lt;/strong&gt; with&amp;nbsp;him.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finally, Bob receives Alice&amp;#8217;s letter and sends one back saying &amp;#8220;Yup, got yours too!  We&amp;#8217;re in&amp;nbsp;business.&amp;#8221;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This final packet in the handshake is called the &lt;strong&gt;&lt;span class="caps"&gt;ACK&lt;/span&gt;&lt;/strong&gt; packet, because it&amp;#8217;s just an &lt;strong&gt;acknowledgement&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;#8217;m basically going to have to do the equivalent of this using tones over a cell phone&amp;nbsp;line.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Framing&lt;/strong&gt;
In this layer, I will take the data that the user requested from the internet, and chop it up into little pieces that can be sent individually so that I don&amp;#8217;t have to send it all at once.
This is necessary because it would be too difficult to send all the requested data all at once in one giant package.  One way you could think about it is to compare it to if you had to send the entirety of Harry Potter to someone by mail, and you could only use normal envelopes, because sending by box was too expensive.  Stuffing it all in one envelope isn&amp;#8217;t really practical and could easily get messed up, plus if it gets lost, you&amp;#8217;ve lost everything.   What you would do is but the books up into a bunch of different pieces, stuff them all into separate envelopes, and then send those all out to reach the requester.
However, since they may all arrive at different times, you&amp;#8217;ll probably want to number the enveleopes to make sure that the requester (a) knows the order that they should get put back together in and (b) can tell if any of the envelopes didn&amp;#8217;t make it all the way through, so they can request them from you again.
It&amp;#8217;s obviously more complex than that, but those are the basics behind the transport protocol&amp;#8212;the system of deciding how much to put in each envelope, the numbering of the envelope, and sending, receiving, and acknowledgement of the envelope is all part of framing and the&amp;nbsp;protocol.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Error-correcting Code&lt;/strong&gt;
Hamming code or&amp;nbsp;Golay&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Symbol modulation&lt;/strong&gt;
&lt;span class="caps"&gt;QAM&lt;/span&gt; or &lt;span class="caps"&gt;PSK&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Audio&lt;/strong&gt;
4- or 8-bit&amp;nbsp;harmonics&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;(To be&amp;nbsp;completed&amp;#8230;)&lt;/em&gt;&lt;/p&gt;</summary><category term="hackerschool"></category><category term="dial-up-over-cell-phone"></category><category term="tcp"></category><category term="internet"></category><category term="framing"></category><category term="signal-processing"></category><category term="error-correction"></category><category term="compression"></category></entry><entry><title>The importance of a goodÂ keyboard</title><link href="http://blog.jdotjdot.com/2014/02/the-importance-of-a-good-keyboard/" rel="alternate"></link><updated>2014-02-20T00:00:00-05:00</updated><author><name>JJ</name></author><id>tag:blog.jdotjdot.com,2014-02-20:2014/02/the-importance-of-a-good-keyboard/</id><summary type="html">&lt;p&gt;Something I have been thinking about a fair amount but sounds ridiculous to some people is the importance of a good keyboard.  The more you work at computers and type, the more it matters.  I think that programmers, being more tightly intertwined with the history of computing, probably have a bit more of a culture around keyboards than the average office would - but that doesn&amp;#8217;t mean that it&amp;#8217;s not particularly relevant to&amp;nbsp;everyone.&lt;/p&gt;
&lt;p&gt;I thought that &amp;#8220;they just didn&amp;#8217;t make keyboards like they used to&amp;#8221; until Zach reintroduced me to mechanical keyboards, with this one that he built himself that I&amp;#8217;ve been using:
&lt;img alt="The keyboard I'm currently using" src="{filename}/images/2014-02-18" title="11.41.57.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Mechanical keyboards have real switches and springs rather than the rubber that&amp;#8217;s in most laptop and regular cheap keyboards today.  The mechanical aspect of it gives the user real feedback and &amp;#8220;clickiness&amp;#8221;, which is not only satisfying but actually lets you type more quickly.  When using a regular keyboard, there&amp;#8217;s no obvious feedback that lets you know when the keypress has been registered by the device, so you have to exert more pressure and push the key all the way down.  With mechanical keyboards, the clicky feedback lets you know when you&amp;#8217;ve pushed the key far enough and then let go immediately and move onto the next one.  I know it&amp;#8217;s hard to imagine how that helps, but in practice, it feels very different and much more&amp;nbsp;efficient.&lt;/p&gt;
&lt;p&gt;Since then, I&amp;#8217;ve been shopping around at a few computer stores to start trying to figure out what it actually is that I care about in a keyboard.  I boiled it down to a few key&amp;nbsp;categories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Size of keyboard (key&amp;nbsp;spacing)&lt;/li&gt;
&lt;li&gt;Size of the&amp;nbsp;keys&lt;/li&gt;
&lt;li&gt;Feedback (aka&amp;nbsp;&amp;#8220;crunchiness&amp;#8221;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Things that I was surprised to find did not end up on the&amp;nbsp;list:&lt;/p&gt;
&lt;h3&gt;Key&amp;nbsp;layout&lt;/h3&gt;
&lt;p&gt;I have some preferences regarding where things like the Home or End keys are (or that they exist&amp;#8212;looking at you, Mac keyboards), but ultimately, as long as all of the keys immediately next to the normal &lt;span class="caps"&gt;QWERTY&lt;/span&gt; layout where the same, I generally didn&amp;#8217;t have too much  trouble readjusting to to different locations for lesser-used buttons like &amp;#8220;Print&amp;nbsp;Screen&amp;#8221;.&lt;/p&gt;
&lt;h3&gt;Actually having the names of the&amp;nbsp;keys&lt;/h3&gt;
&lt;p&gt;Granted, this one will be far more important for most people, but I turned out to be enough of a touch typist that I don&amp;#8217;t actually need the characters to be displayed on the keys at all.   I did run a cross a couple issues when trying to use the non-labeled Windows keyboard on a Mac, but I think that was due more to being unfamiliar with Mac commands, particularly not being sure how the Windows keyboard would end up mapping to&amp;nbsp;them.&lt;/p&gt;
&lt;p&gt;At Hacker School, we happen to have one of what is generally considered by many to be the best keyboard ever made: the &lt;a href="http://en.wikipedia.org/wiki/Model_M_keyboard"&gt;Model M&lt;/a&gt;, known for its extreme&amp;nbsp;clickiness.&lt;/p&gt;
&lt;p&gt;I really enjoyed trying it out, and I&amp;#8217;m going to be getting a mechanical keyboard myself for sure - I just have to decide which, and what is worth the price, since they can run&amp;nbsp;$80-$130.&lt;/p&gt;</summary><category term="keyboards"></category><category term="hackerschool"></category></entry><entry><title>Days 3-4: More algorithms, CTF,Â whoops</title><link href="http://blog.jdotjdot.com/2014/02/day-3-more-algorithms/" rel="alternate"></link><updated>2014-02-13T00:00:00-05:00</updated><author><name>JJ</name></author><id>tag:blog.jdotjdot.com,2014-02-13:2014/02/day-3-more-algorithms/</id><summary type="html">&lt;h3&gt;Algorithms&lt;/h3&gt;
&lt;h4&gt;Selection&amp;nbsp;sort&lt;/h4&gt;
&lt;p&gt;Just going through left to right, finding the new minimum of the unsorted items, and swapping it with the left most unsorted&amp;nbsp;item.&lt;/p&gt;
&lt;h4&gt;Insertion&amp;nbsp;sort&lt;/h4&gt;
&lt;p&gt;Going from left to right, and moving the leftmost unsorted item one item left at a time until we hit the beginning of the array or an item smaller than the one we&amp;#8217;re currently&amp;nbsp;moving.&lt;/p&gt;
&lt;h4&gt;Shellsort&lt;/h4&gt;
&lt;p&gt;Insertion sort, but making jumps of size &lt;code&gt;h&lt;/code&gt;.
Interesting point that the professor made was that if you &lt;em&gt;h&lt;/em&gt;-sort an array and then &lt;em&gt;g&lt;/em&gt;-sort it, it still remains &lt;em&gt;h&lt;/em&gt;-sorted.  This was not something I had thought of offhand, but it makes perfect&amp;nbsp;sense.&lt;/p&gt;
&lt;p&gt;Shellsort is generally pretty fast unless the array size is&amp;nbsp;huge.&lt;/p&gt;
&lt;h3&gt;Hacking&lt;/h3&gt;
&lt;p&gt;I started playing around with a really cool embedded security capture the flag game called &lt;a href="https://microcorruption.com/login"&gt;Microcorruption&lt;/a&gt;.  &amp;#8220;Capture the Flag&amp;#8221; games, when referring to computer security, are complex and involved games with series of levels where you have to find the (deliberately placed) vulnerability in the server or website, etc. at each level and find a secret file, codeword, or password hidden there.  Stripe has run a few of these relating to breaking into websites, so I&amp;#8217;m very excited about this one, which actually works with breaking into (virtual) hardware to break into pretend warehouses.  Very&amp;nbsp;exciting.&lt;/p&gt;
&lt;p&gt;It would shock me if I find myself moving a bit more towards studying hardware and network security while I&amp;#8217;m&amp;nbsp;here.&lt;/p&gt;
&lt;h3&gt;Blowing up my&amp;nbsp;computer&lt;/h3&gt;
&lt;p&gt;Whoops.   Accidentally breaking Windows took up the latter half of the day.  Still working on fixing it, even though it&amp;#8217;s already the next day.  Might have to get a new&amp;nbsp;computer.&lt;/p&gt;</summary><category term="hackerschool"></category><category term="algorithms"></category><category term="sort"></category></entry><entry><title>Day 2:Â Algorithms</title><link href="http://blog.jdotjdot.com/2014/02/algorithms/" rel="alternate"></link><updated>2014-02-11T00:00:00-05:00</updated><author><name>JJ</name></author><id>tag:blog.jdotjdot.com,2014-02-11:2014/02/algorithms/</id><summary type="html">&lt;p&gt;Today, I&amp;#8217;m working on the &lt;a href="https://class.coursera.org/algs4partI-004/lecture"&gt;Princeton Algorithms Coursera Course&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Main goal overall for today and the next few days is to focus on making sure I know the basics of algorithms, enough to make up for the fact I didn&amp;#8217;t formally study Computer&amp;nbsp;Science.&lt;/p&gt;
&lt;h4&gt;Quick-union&lt;/h4&gt;
&lt;p&gt;I quickly skipped past the first couple of lectures on unions to get to quick-union.  This strategy works with trees of nodes and more efficiently finds if two nodes are connected by finding each node&amp;#8217;s root and determining if they&amp;#8217;re the same root.  To connect nodes, you connect their roots.
Unfortunately, it&amp;#8217;s still a pretty slow strategy, mainly because the trees can get very&amp;nbsp;tall.&lt;/p&gt;
&lt;h4&gt;Weighted&amp;nbsp;quick-union&lt;/h4&gt;
&lt;p&gt;This strategy is a modification of quick-sort so that the trees don&amp;#8217;t get too tall.  Basically, when we&amp;#8217;re connecting a tall tree with a shorter tree, we make sure to put the smaller tree as the child of the bigger tree.  When we&amp;#8217;re adding a node that&amp;#8217;s nested in a different tree, we add that node&amp;#8217;s entire tree as a child of the tree we&amp;#8217;re moving it to.
By adding path compression, we flatten each tree out.  Not quite sure why we&amp;#8217;re doing this; professor says it&amp;#8217;s &amp;#8220;because we&amp;nbsp;can.&amp;#8221;&lt;/p&gt;
&lt;p&gt;Some other topics I glossed over&amp;nbsp;today:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;O-time&lt;/li&gt;
&lt;li&gt;Stacks&lt;/li&gt;
&lt;li&gt;This included basic arithmetic expression evaluation, which is basically a small calculator interpreter, which I already did once for a Google Code Jam&amp;nbsp;problem&lt;/li&gt;
&lt;li&gt;Arrays (These I know&amp;nbsp;well)&lt;/li&gt;
&lt;li&gt;Queues (Already wrote a &lt;a href="https://github.com/jdotjdot/CouchQueue"&gt;queue&lt;/a&gt;&amp;#8212;not a pure one, but at least requiring an understanding of&amp;nbsp;theory)&lt;/li&gt;
&lt;li&gt;Iterators&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For the rest of the week, I&amp;#8217;m planning to finish what&amp;#8217;s available of the Algorithms course (Elementary Sorts), read chapter 3 of Introduction to Algorithms (data structures), and then try implementing a few data structures in C, finishing by working on some difficult Google Code Jam algorithms problems, before moving onto the next&amp;nbsp;project.&lt;/p&gt;</summary><category term="quick-union"></category><category term="hackerschool"></category></entry><entry><title>Day 1: First day of HackerÂ School</title><link href="http://blog.jdotjdot.com/2014/02/first-day-of-hacker-school/" rel="alternate"></link><updated>2014-02-11T00:00:00-05:00</updated><author><name>JJ</name></author><id>tag:blog.jdotjdot.com,2014-02-11:2014/02/first-day-of-hacker-school/</id><summary type="html">&lt;p&gt;Thanks for coming and checking out this blog!   I&amp;#8217;ll be posting about my adventures and working during &lt;a href="http://www.hackerschool.com"&gt;Hacker School&lt;/a&gt; for the next few&amp;nbsp;months.&lt;/p&gt;
&lt;p&gt;The first day was great&amp;#8212;everyone was extremely friendly, welcoming, and&amp;nbsp;open.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m currently still deciding what I&amp;#8217;ll be working on for the first couple of weeks.  Right now, I have a very long laundry list of everything I&amp;#8217;d &lt;em&gt;like&lt;/em&gt; to be working&amp;nbsp;on:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(This list will be updated periodically as I think of new&amp;nbsp;ideas)&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Algorithms&lt;/li&gt;
&lt;li&gt;Machine&amp;nbsp;Learning&lt;/li&gt;
&lt;li&gt;Functional programming (Clojure and/or Haskell)&lt;ul&gt;
&lt;li&gt;4clojure&lt;/li&gt;
&lt;li&gt;Clojurekoans&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Learn You a Haskell for Great&amp;nbsp;Good&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Improving my knowledge of&amp;nbsp;Javascript&lt;/li&gt;
&lt;li&gt;Learning the basics of front-end web&amp;nbsp;design&lt;/li&gt;
&lt;li&gt;Basic JavaScript animation (animation or&amp;nbsp;game?)&lt;/li&gt;
&lt;li&gt;AngularJS&lt;/li&gt;
&lt;li&gt;C or&amp;nbsp;C++&lt;/li&gt;
&lt;li&gt;Working with hardware like Raspberry Pis or&amp;nbsp;Arduinos&lt;/li&gt;
&lt;li&gt;Working with&amp;nbsp;RFIDs&lt;/li&gt;
&lt;li&gt;iOS or Android development
  &amp;lt;!&amp;#8212; + Moto&amp;nbsp;X&lt;/li&gt;
&lt;li&gt;Justin has spare iPhone 4&amp;nbsp;&amp;#8212;&amp;gt;&lt;/li&gt;
&lt;li&gt;contribute to&amp;nbsp;Meteor&lt;/li&gt;
&lt;li&gt;Genetic&amp;nbsp;algorithms&lt;/li&gt;
&lt;li&gt;computer security (through &lt;span class="caps"&gt;CTF&lt;/span&gt; games, most&amp;nbsp;likely)&lt;/li&gt;
&lt;li&gt;Microcorruption&lt;/li&gt;
&lt;li&gt;build a remote control&amp;nbsp;car&lt;/li&gt;
&lt;li&gt;Internet data via &amp;#8216;wireless&amp;nbsp;fax&amp;#8217;&lt;/li&gt;
&lt;li&gt;Android&amp;nbsp;dev&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;TCP&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Signal processing &lt;!-- see Zulip on python/signal processing --&gt;&lt;/li&gt;
&lt;li&gt;learning networking and streaming (Python or&amp;nbsp;Node)&lt;/li&gt;
&lt;li&gt;learning vim (or maybe&amp;nbsp;emacs&lt;/li&gt;
&lt;li&gt;http://vim-adventures.com&lt;/li&gt;
&lt;li&gt;brackets.io&lt;/li&gt;
&lt;li&gt;http://inventwithpython.com/hacking/chapters/&lt;/li&gt;
&lt;li&gt;d3,&amp;nbsp;three.js&lt;/li&gt;
&lt;li&gt;React.js, sockets (a la&amp;nbsp;own.rileyjshaw.com)&lt;/li&gt;
&lt;/ul&gt;</summary><category term="hackerschool"></category><category term="getting-started"></category></entry></feed>