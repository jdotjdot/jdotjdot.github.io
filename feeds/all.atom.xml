<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>*JJ</title><link href="https://jdotjdot.github.io/" rel="alternate"></link><link href="https://jdotjdot.github.io/feeds/all.atom.xml" rel="self"></link><id>https://jdotjdot.github.io/</id><updated>2014-05-22T23:16:55-04:00</updated><entry><title>Include the weather in your bash prompt!</title><link href="https://jdotjdot.github.io/2014/05/include-the-weather-in-your-bash-prompt/" rel="alternate"></link><updated>2014-05-22T23:16:55-04:00</updated><author><name>JJ</name></author><id>tag:https://jdotjdot.github.io,2014-05-22:2014/05/include-the-weather-in-your-bash-prompt/</id><summary type="html">&lt;p&gt;About a third of the way into Hacker School, I got myself entrenched in a rather unusual project&amp;#8212;trying to figure out how to get an automatically updated weather icon into my Bash prompt, doing it purely in Bash for practical (and aesthetic)&amp;nbsp;reasons.&lt;/p&gt;
&lt;p&gt;I called it &lt;a href="https://github.com/jdotjdot/BashWeather"&gt;BashWeather&lt;/a&gt;.&lt;/p&gt;
&lt;!--
![BashWeather screenshot](https://dl.dropboxusercontent.com/s/z4ut9ggm8y14izp/bashweather%20screenshot.png)&lt;br /&gt;
*Screenshot of sample terminal session with BashWeather*
--&gt;

&lt;div style="/* background-color: lightgray; */ padding: 10px 0; border-radius: 15px; text-align: center;border: 3px solid lightgray;margin: 0 10% 15px 10%;"&gt;

    &lt;div style="max-width: 90%; margin: auto;"&gt;
        &lt;img src="https://dl.dropboxusercontent.com/s/z4ut9ggm8y14izp/bashweather%20screenshot.png" alt="BashWeather Screenshot"&gt;&lt;br&gt;
        &lt;img src="https://dl.dropboxusercontent.com/s/fnlza39a2q1ubut/bashweather%20screenshot%202.png" alt="BashWeather Screenshot"&gt;
    &lt;/div&gt;
    &lt;div style="text-align: center; font-style: italic;"&gt;&lt;span class="caption"&gt;Screenshots of a sample terminal session with BashWeather&lt;/span&gt;&lt;/div&gt;&lt;br&gt;

    &lt;div style="font-size: 150%; text-align: center; /* margin-left: 5%; */"&gt;☂☃☽☀︎&lt;/div&gt;
    &lt;div style="text-align: center; font-style: italic;"&gt;Weather character palette&lt;/div&gt;

&lt;/div&gt;

&lt;p&gt;There are a number of configurable options, including the&amp;nbsp;following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How often to wait between weather&amp;nbsp;updates&lt;/li&gt;
&lt;li&gt;The default character to be supplied in the event that the weather isn&amp;#8217;t&amp;nbsp;available&lt;/li&gt;
&lt;li&gt;The method to use to determine where in the world the computer is located.  Options are to use &lt;span class="caps"&gt;IP&lt;/span&gt; address, to use the built-in Mac locator if available, or to supply the city and country in a string when calling the&amp;nbsp;script.&lt;/li&gt;
&lt;li&gt;Allowable timeout for the &lt;span class="caps"&gt;HTTP&lt;/span&gt; requests BashWeather&amp;nbsp;makes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I learned quite a bit from this project about Bash functions, scoping, some of Bash&amp;#8217;s oddities (behavior of brackets, globbing, needing to quote variables, etc.), and some of the nitty-gritty details of Bash variables.  Since a lot of global variables were required by the script to keep track of state, like how long it&amp;#8217;s been since the last check and whether or not internet is available, I was very careful to pollute the global namespace as little as possible, which was an interesting exercise given that Bash functions &lt;a href="http://www.linuxjournal.com/content/return-values-bash-functions"&gt;can&amp;#8217;t actually return values to the caller&lt;/a&gt; in the way you&amp;#8217;d traditionally think about&amp;nbsp;it.&lt;/p&gt;
&lt;h3&gt;But&amp;#8230;&amp;nbsp;why?&lt;/h3&gt;
&lt;p&gt;I couldn&amp;#8217;t think of anything to do at Hacker School for a bit, and I was about to head outside to get a cup of coffee to clear my head, and I noticed that it was raining and got very upset that I didn&amp;#8217;t have an umbrella with me.  I almost always forget to bring my umbrella, and I used to use an &lt;a href="http://www.ifttt.com"&gt;&lt;span class="caps"&gt;IFTTT&lt;/span&gt;&lt;/a&gt; recipe that sent me a Gchat whenever it started to rain.  Unfortunately, with the advent of Hangouts, it was eventually&amp;nbsp;deprecated.&lt;/p&gt;
&lt;p&gt;I liked the Gchat recipe because it alerted me both on my computer and on my phone.  Considering how to replace it, I started thinking about what I look at more than anything else&amp;#8212;and realized the one and only answer there was my Bash prompt.  I&amp;#8217;m always looking at the command line, one way or another, or at least have it open&amp;#8212;and the decision was&amp;nbsp;made.&lt;/p&gt;
&lt;p&gt;From then on, I would know the&amp;nbsp;weather.&lt;/p&gt;
&lt;h3&gt;But would you really ever look at the weather in your&amp;nbsp;prompt?&lt;/h3&gt;
&lt;p&gt;When I started telling people about it at Hacker School I did encounter a bit of skepticism, usually along the lines&amp;nbsp;of:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Why would you ever need the weather in your&amp;nbsp;prompt?&lt;/p&gt;
&lt;p&gt;Come on, you&amp;#8217;re never actually going to use&amp;nbsp;that.&lt;/p&gt;
&lt;p&gt;&amp;#8230;etc.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I got this reaction from one person in particular, and we then sat down to start pairing on a quick question that we were trying to resolve&amp;#8212;I think possibly something to do with BashWeather&amp;nbsp;itself.&lt;/p&gt;
&lt;p&gt;We&amp;#8217;d been working not even two minutes when we turned to the prompt and he saw the umbrella (☂) in the prompt and exclaimed, &amp;#8220;Oh no, is it raining? I didn&amp;#8217;t&amp;nbsp;realize!&amp;#8221;&lt;/p&gt;
&lt;p&gt;&amp;#8230;and then he realized what had happened, and then I&amp;nbsp;grinned.&lt;/p&gt;
&lt;h3&gt;And now, the&amp;nbsp;code&lt;/h3&gt;
&lt;p&gt;The full script, with instructions, can be found at the &lt;a href="https://github.com/jdotjdot/BashWeather"&gt;Github repository&lt;/a&gt;.  It is currently fully functional, though still a work in progress.  I&amp;#8217;ll be doing a longer post shortly on how I structured BashWeather from a scoping perspective, since I found the architecture required of a large Bash script to be very different and very&amp;nbsp;interesting.&lt;/p&gt;</summary><category term="hackerschool"></category><category term="bash"></category><category term="weather"></category><category term="bashweather"></category></entry><entry><title>Getting syntax highlighting on Scriptogr.am (and other hosted static site generators)</title><link href="https://jdotjdot.github.io/2014/03/getting-syntax-highlighting-on-scriptogr-am-and-other-hosted-static-site-generators/" rel="alternate"></link><updated>2014-03-26T00:00:00-04:00</updated><author><name>JJ</name></author><id>tag:https://jdotjdot.github.io,2014-03-26:2014/03/getting-syntax-highlighting-on-scriptogr-am-and-other-hosted-static-site-generators/</id><summary type="html">&lt;p&gt;The benefits of hosted static site generators include crazy ease of use, auto-deployment, hosting, etc.&amp;#8212;but on the downside, you&amp;#8217;re sometimes a bit more limited in the control you have over the&amp;nbsp;site.&lt;/p&gt;
&lt;p&gt;When starting out with trying &lt;a href="http://scriptogr.am"&gt;Scriptogr.am&lt;/a&gt;, I was a bit disappointed by the lack of syntax highlighting.  Pelican uses &lt;a href="http://pygments.org"&gt;Pygments&lt;/a&gt;, but that runs on the server side in Python&amp;#8212;so it&amp;#8217;s fine for a personally hosted static site generator, but I wouldn&amp;#8217;t be able to get a hosted solution like Scriptogr.am (or Github Pages, for that matter) to use&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;A solution I found was &lt;a href="http://highlightjs.org/"&gt;HighlightJS&lt;/a&gt;, which is a Javascript-based code syntax detection and highlighting platform.  This is great, because being Javascript based, I can simply throw a link to the code into my Scriptogram (or whatever else) theme, and let the browser rather than the server (or static site generator) do the&amp;nbsp;work.&lt;/p&gt;
&lt;p&gt;I had a bit of difficulty getting it working, so I thought I&amp;#8217;d post this here for those of you with the same issue so you can avoid the&amp;nbsp;trouble.&lt;/p&gt;
&lt;h4&gt;Step 1: &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;This is easy.  They are nice enough to host a prebuilt version of HighlightJS, so you can simply link to it in your &lt;code&gt;&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;&lt;/code&gt; tag.  At the bottom, paste the&amp;nbsp;following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- any other html stuff --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://yandex.st/highlightjs/8.0/styles/default.min.css&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://yandex.st/highlightjs/8.0/highlight.min.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For a different HighlightJS theme for the syntax highlighting, simply change the &lt;code&gt;href&lt;/code&gt; attribute in the &lt;span class="caps"&gt;CSS&lt;/span&gt; &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; to your preferred theme&amp;nbsp;stylesheet.&lt;/p&gt;
&lt;h4&gt;Step 2: Make sure HighlightJS is called&amp;nbsp;last&lt;/h4&gt;
&lt;p&gt;The javascript you&amp;#8217;re already loading is supposed to run HighlightJS after the page loads, but that wasn&amp;#8217;t working for me with Scriptogr.am&amp;#8212;I imagine because Scriptogr.am itself probably had some functions that run after the page fully loads that were overriding and coming after what I had&amp;nbsp;specified.&lt;/p&gt;
&lt;p&gt;The way to get this working is to add another function to the very bottom of your &lt;span class="caps"&gt;HTML&lt;/span&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;&amp;lt;!-- above, the rest of your HTML file/theme --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;(function(){hljs.initHighlighting();})();&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Step 3:&amp;nbsp;Profit&lt;/h4&gt;
&lt;p&gt;Reload the page, and see if it works!  All of the code in &lt;code&gt;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;&lt;/code&gt; blocks should be automatically detected and&amp;nbsp;highlighted.&lt;/p&gt;
&lt;p&gt;If you need to make any changes or customization (e.g., your code isn&amp;#8217;t in &lt;code&gt;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;&lt;/code&gt; blocks), see the &lt;a href="http://highlightjs.org/usage/"&gt;HighlightJS usage docs&lt;/a&gt;, which are very&amp;nbsp;helpful.&lt;/p&gt;</summary><category term="hackerschool"></category><category term="scriptogr.am"></category><category term="static-site-generators"></category><category term="syntax-highlighting"></category><category term="highlightjs"></category></entry><entry><title>Asynchronous programming with Arduino</title><link href="https://jdotjdot.github.io/2014/03/asynchronous-programming-with-spark-core/" rel="alternate"></link><updated>2014-03-11T00:00:00-04:00</updated><author><name>JJ</name></author><id>tag:https://jdotjdot.github.io,2014-03-11:2014/03/asynchronous-programming-with-spark-core/</id><summary type="html">&lt;p&gt;I&amp;#8217;ve been working quite a bit this week and last week with &lt;a href="http://www.arduino.cc/"&gt;Arduinos&lt;/a&gt; and &lt;a href="https://www.spark.io/"&gt;Spark Cores&lt;/a&gt; (an Arduino-like device with WiFi and a cloud service built-in).   I&amp;#8217;ve been working on a few projects, including many out of the Arduino starter book, hooking up a remote control car to WiFi, and hooking up the Hacker School door buzzer to our WiFi so that we can let people in  without pressing the door buzzer&amp;#8212;or so that people can let themselves&amp;nbsp;in.&lt;/p&gt;
&lt;p&gt;One of the issues I&amp;#8217;ve run across that&amp;#8217;s been interesting is how to run threaded or asynchronous commands.  This is important if we want the Arduino to do something, but we also need a time delay.  For example, if someone sends a command to the Arduino to open the door, we need to do the following two&amp;nbsp;things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open the door, wait 10 seconds, close the&amp;nbsp;door&lt;/li&gt;
&lt;li&gt;Respond to the request and close the connection&amp;#8212;e.g. with a &lt;code&gt;HTTP 200 OK&lt;/code&gt; or something&amp;nbsp;similar.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The way my code was structured, I was sending the command to the door before responding to the client.  The problem is that the Arduino is running a single set of instructions, so the response to the client is delayed by waiting for the door to close.  For example, the steps occured in the following&amp;nbsp;order:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Arduino server recieves request to open the&amp;nbsp;door&lt;/li&gt;
&lt;li&gt;Arduino opens&amp;nbsp;door&lt;/li&gt;
&lt;li&gt;Arduino sits and waits for 10&amp;nbsp;seconds&lt;/li&gt;
&lt;li&gt;Arduino closes&amp;nbsp;door&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Then&lt;/em&gt;, Arduino sends response&amp;nbsp;message&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The client is then sitting there and waiting for 10 seconds to know what happened.  I didn&amp;#8217;t want to have this happen, so there had to be a better way to do it&amp;#8212;and I realized I could take advantage of the Arduino&amp;#8217;s built-in looping&amp;nbsp;structure.&lt;/p&gt;
&lt;h3&gt;First, some&amp;nbsp;background&lt;/h3&gt;
&lt;p&gt;The Arduino requires its code to be set up in a specific manner, with two specific functions that it will always&amp;nbsp;run.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;// This function is called once upon start-up&lt;/span&gt;
   &lt;span class="c1"&gt;//  to do any set-up required--e.g., initalizing&lt;/span&gt;
   &lt;span class="c1"&gt;//  intput and output pins&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nx"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="cm"&gt;/* This function is called over and over again, many &lt;/span&gt;
&lt;span class="cm"&gt;   times per second.&lt;/span&gt;

&lt;span class="cm"&gt;   However, it only runs once at a time, so if you have a &amp;quot;delay&amp;quot; command in there, all activity will cease until the delay is over.&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;What I&amp;nbsp;did&lt;/h3&gt;
&lt;p&gt;I took advantage of how frequently &lt;code&gt;loop()&lt;/code&gt; is called.  I set up a block at the top of &lt;code&gt;loop()&lt;/code&gt; (or alternatively could be a different function that is called at the top of &lt;code&gt;loop()&lt;/code&gt;) that would run the open door command when a state variable, declared at the beginning, was set to &lt;code&gt;true&lt;/code&gt;, and then immediately turn it to false.&lt;br /&gt;
Rather than open the door immediately upon receiving the request, the Arduino would set this &amp;#8220;openDoor&amp;#8221; variable to &lt;code&gt;true&lt;/code&gt; and would immediately respond to the client.  The next time the program looped around, it would see that &lt;code&gt;openDoor&lt;/code&gt; says that the door needs to be open it&amp;#8212;and so it would open it and have the delay, but it would do all this after the client had been responded&amp;nbsp;to.&lt;/p&gt;
&lt;p&gt;Overall, the code looked something like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;asyncOpenDoor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;openDoor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// code to open the door&lt;/span&gt;
    &lt;span class="c1"&gt;// below is pseudocode&lt;/span&gt;

    &lt;span class="n"&gt;asyncOpenDoor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// so door isn&amp;#39;t opened again&lt;/span&gt;

    &lt;span class="n"&gt;openTheDoor&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// delay for 15 seconds&lt;/span&gt;
    &lt;span class="n"&gt;closeTheDoor&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;pinMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doorOpener&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OUTPUT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// code to set up the server&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asyncOpenDoor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;openDoor&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="c1"&gt;// Code to receive incoming requests&lt;/span&gt;

   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;requestSaysToOpenTheDoor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Valid door-opening request&lt;/span&gt;

      &lt;span class="n"&gt;asyncOpenDoor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="c1"&gt;// respond to client&lt;/span&gt;
      &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;HTTP 200 OK&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// invalid door-opening request&lt;/span&gt;

      &lt;span class="c1"&gt;// respond to client&lt;/span&gt;
      &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;HTTP 401 Unauthorized&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="c1"&gt;// kill the connection&lt;/span&gt;
   &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
   &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="C"></category><category term="async"></category></entry><entry><title>Day 9: It works!</title><link href="https://jdotjdot.github.io/2014/02/day-9-victory/" rel="alternate"></link><updated>2014-02-20T00:00:00-05:00</updated><author><name>JJ</name></author><id>tag:https://jdotjdot.github.io,2014-02-20:2014/02/day-9-victory/</id><summary type="html">&lt;p&gt;We had a great talk by Mel Chua not long ago about different types of learning, and &lt;a href="http://de.slideshare.net/mchua/edutalk-w2014"&gt;how learning works at Hacker School&lt;/a&gt;.   One of the main things she pointed out at the beginning was that learning at Hacker School is very different than the kind of directed learning that you might find in school - all of us are going to spend a fair amount of time being &lt;strong&gt;productively lost&lt;/strong&gt;.  &lt;/p&gt;
&lt;p&gt;This means that we&amp;#8217;ll be sitting there hacking away at something, having no idea what we&amp;#8217;re doing or how it works, feeling very stupid, thinking we&amp;#8217;re not cut out for this, and then every once in a while, out of&amp;nbsp;nowhere&amp;#8230;&lt;/p&gt;
&lt;h3&gt;&lt;center&gt;It works!&lt;/center&gt;&lt;/h3&gt;
&lt;p&gt;I had one of those moments today, while working on an extremely basic android app to record a call, as part of my efforts on the Dial-Up Over Cell Phone project.  I knew absolutely no android before this and no Java, so it&amp;#8217;s been a lot to pick up at once, especially because android development has turned out to be pretty confusing and not that well designed. I was following the official &lt;a href="https://developer.android.com/training/basics/firstapp/index.html"&gt;&amp;#8220;Building Your First App&amp;#8221;&lt;/a&gt; guide, but I was having quite a bit of trouble with&amp;nbsp;it. &lt;/p&gt;
&lt;p&gt;After a while, I managed to get an extremely basic two page (or &amp;#8220;activity&amp;#8221;, in android parlance) app up on an emulator.  Eventually I actually put it on a phone, which felt pretty&amp;nbsp;cool.&lt;/p&gt;
&lt;p&gt;First page of the app:
&lt;center&gt;&lt;img src="https://dl.dropboxusercontent.com/s/l9m93na1vaiattb/Screenshot_2014-02-20-17-51-15.png" alt="First page of my app" width="50%" height="50%"&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;And then, after you&amp;#8217;ve written the message:
&lt;center&gt;&lt;img src="https://dl.dropboxusercontent.com/s/kdbtub8zh4jdt84/Screenshot_2014-02-20-17-51-27.png" alt="Writing the message" width="50%" height="50%"&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;Finally, send the message to the second page:
&lt;center&gt;&lt;img src="https://dl.dropboxusercontent.com/s/u0isb6mr4fchue5/Screenshot_2014-02-20-17-51-31.png" alt="The message was sent!" width="50%" height="50%"&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;So that was great, but ultimately, the goal of today was to get an app working where I could press a button to record a sound, and then press another button to play it back.  This is to help get me on my way towards an app where I can actually record the voice downlink of a call, which is the painful but necessary first step for my Dial-Up Over Cell Phone&amp;nbsp;project.&lt;/p&gt;
&lt;p&gt;I was having trouble with this all day.  Recording is apparently pretty fraught with bugs in android, and playing back is too. I spent much of the data looking at scary errors like &lt;code&gt;media server died&lt;/code&gt; or &lt;code&gt;incorrect format for writing&lt;/code&gt; or completely useless errors like &lt;code&gt;prepare() failed!&lt;/code&gt;  So I just kept trying different settings, different audio codecs like using &lt;code&gt;AAC&lt;/code&gt; instead of the default &lt;code&gt;3GP&lt;/code&gt;, looking at the saved audio file itself to see if maybe audio was getting written but the player just wasn&amp;#8217;t working, and then I went back to &lt;code&gt;3GP&lt;/code&gt; and noticed that the filename I was saving as didn&amp;#8217;t match so fixed that from ending in &lt;code&gt;.aac&lt;/code&gt; to &lt;code&gt;.3gp&lt;/code&gt; and then all the&amp;nbsp;sudden&lt;/p&gt;
&lt;h3&gt;&lt;center&gt;It worked!&lt;/center&gt;&lt;/h3&gt;
&lt;p&gt;I had my android app on my android phone, pressed the &amp;#8220;Audio Page&amp;#8221; button to go the audio page, and then pressed the &amp;#8220;Record&amp;#8221; button to record, recorded a sound, stopped the recording, and then pressed the &amp;#8220;Play&amp;#8221; button to play it&amp;nbsp;back!&lt;/p&gt;
&lt;p&gt;Even though I&amp;#8217;m only 80% of the way there in understanding why this particular configuration worked and I need to understand in order to go the rest of the way, it&amp;#8217;s those moments of &amp;#8220;aha!&amp;#8221; that make it all worth&amp;nbsp;it.&lt;/p&gt;</summary><category term="hackerschool"></category><category term="dial-up-over-cell-phone"></category><category term="android"></category><category term="mel-chua"></category><category term="it-works"></category><category term="productively-lost"></category></entry><entry><title>Week 2: Dial-up over cell phone</title><link href="https://jdotjdot.github.io/2014/02/dial-up-over-cell-phone/" rel="alternate"></link><updated>2014-02-20T00:00:00-05:00</updated><author><name>JJ</name></author><id>tag:https://jdotjdot.github.io,2014-02-20:2014/02/dial-up-over-cell-phone/</id><summary type="html">&lt;p&gt;This week, I decided on and started on what will be my first project for a bit, assuming everything works&amp;nbsp;out:&lt;/p&gt;
&lt;h3&gt;Internet over cell&amp;nbsp;phone&lt;/h3&gt;
&lt;p&gt;The thought behind this is that in the &lt;span class="caps"&gt;US&lt;/span&gt;, we used to have unlimited data plans and limited voice plans, but now things have switched and the carriers mostly force everyone into limited data but unlimited voice&amp;nbsp;plans. &lt;/p&gt;
&lt;p&gt;I think it would be really cool if you could use your &lt;strong&gt;voice minutes&lt;/strong&gt; to access the internet instead of your data connection, essentially transmitting arbitrary data from the internet over an analogue connection&amp;#8212;the same way was done with dial-up modems or&amp;nbsp;fax.&lt;/p&gt;
&lt;p&gt;The difference here, though, is that we&amp;#8217;d be using cellular connections, which are a lot more likely to be lossy and/or drop calls than the landlines that used to be used for this kind of&amp;nbsp;thing.&lt;/p&gt;
&lt;hr /&gt;
&lt;h4&gt;Getting&amp;nbsp;Started&lt;/h4&gt;
&lt;p&gt;I got started with all of this yesterday, and by speaking to quite a few people, I was assisted in boiling the overall project down into a basic stack that should cover all elements of what would be necessary for this technology, from the highest-level to the lowest-level&amp;nbsp;layer:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Compression&lt;/strong&gt;
This would be taking the data pulled from the internet (a web page, a picture, whatever) and compressing it so that I have physically less data to send.  There are many compression algorithms already available, many of which can slice up the data into smaller chunks to be sent out separately like I will have to do, so I will use a library that&amp;#8217;s already built.  &lt;code&gt;LZMA&lt;/code&gt; was recommended to me as a good compression&amp;nbsp;algorithm.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Transport protocol&lt;/strong&gt;
This is one of the major pieces of this technology that I&amp;#8217;m going to have to design and implement effectively from scratch.  Somehow, I need a way for the sending server to decide how to bundle up the different packets of compressed information and send them one at a time (or more than one at at time) similar to how it&amp;#8217;s done currently on the internet.
It&amp;#8217;s kind of like the way it was sending letters by mail before telephone and internet - the sender would send a letter and would have no way of knowing if the intended recipient received it unless he sent a letter back, as well.  Current internet protocols (like &lt;span class="caps"&gt;TCP&lt;/span&gt;) have this built in in what is called a &lt;a href="http://www.inetdaemon.com/tutorials/internet/tcp/3-way_handshake.shtml"&gt;&amp;#8220;three-way handshake&amp;#8221;&lt;/a&gt; so that the two computers know that they are both sending and receiving.
Super-summarized, if we continued with the letter-sending comparison, it&amp;#8217;s something along these&amp;nbsp;lines:&lt;/li&gt;
&lt;li&gt;Bob sends a letter to Alice, saying &amp;#8220;Hey!  Did you receive this letter?&amp;#8221;&lt;ul&gt;
&lt;li&gt;This is called the &lt;strong&gt;&lt;span class="caps"&gt;SYN&lt;/span&gt;&lt;/strong&gt; packet, since Bob(&amp;#8216;s server) is asking to &lt;strong&gt;synchronize&lt;/strong&gt; with&amp;nbsp;Alice&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Alice, if she receives the letter, sends one back to Bob, saying &amp;#8220;Yup, got yours!  Are you getting this one?&amp;#8221;&lt;ul&gt;
&lt;li&gt;This is called the &lt;strong&gt;&lt;span class="caps"&gt;SYN&lt;/span&gt;-&lt;span class="caps"&gt;ACK&lt;/span&gt;&lt;/strong&gt; packet, because Alice is &lt;strong&gt;acknowledging&lt;/strong&gt; Bob&amp;#8217;s letter and also asking to &lt;strong&gt;synchronize&lt;/strong&gt; with&amp;nbsp;him.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finally, Bob receives Alice&amp;#8217;s letter and sends one back saying &amp;#8220;Yup, got yours too!  We&amp;#8217;re in&amp;nbsp;business.&amp;#8221;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This final packet in the handshake is called the &lt;strong&gt;&lt;span class="caps"&gt;ACK&lt;/span&gt;&lt;/strong&gt; packet, because it&amp;#8217;s just an &lt;strong&gt;acknowledgement&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;#8217;m basically going to have to do the equivalent of this using tones over a cell phone&amp;nbsp;line.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Framing&lt;/strong&gt;
In this layer, I will take the data that the user requested from the internet, and chop it up into little pieces that can be sent individually so that I don&amp;#8217;t have to send it all at once.
This is necessary because it would be too difficult to send all the requested data all at once in one giant package.  One way you could think about it is to compare it to if you had to send the entirety of Harry Potter to someone by mail, and you could only use normal envelopes, because sending by box was too expensive.  Stuffing it all in one envelope isn&amp;#8217;t really practical and could easily get messed up, plus if it gets lost, you&amp;#8217;ve lost everything.   What you would do is but the books up into a bunch of different pieces, stuff them all into separate envelopes, and then send those all out to reach the requester.
However, since they may all arrive at different times, you&amp;#8217;ll probably want to number the enveleopes to make sure that the requester (a) knows the order that they should get put back together in and (b) can tell if any of the envelopes didn&amp;#8217;t make it all the way through, so they can request them from you again.
It&amp;#8217;s obviously more complex than that, but those are the basics behind the transport protocol&amp;#8212;the system of deciding how much to put in each envelope, the numbering of the envelope, and sending, receiving, and acknowledgement of the envelope is all part of framing and the&amp;nbsp;protocol.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Error-correcting Code&lt;/strong&gt;
Hamming code or&amp;nbsp;Golay&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Symbol modulation&lt;/strong&gt;
&lt;span class="caps"&gt;QAM&lt;/span&gt; or &lt;span class="caps"&gt;PSK&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Audio&lt;/strong&gt;
4- or 8-bit&amp;nbsp;harmonics&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;(To be&amp;nbsp;completed&amp;#8230;)&lt;/em&gt;&lt;/p&gt;</summary><category term="hackerschool"></category><category term="dial-up-over-cell-phone"></category><category term="tcp"></category><category term="internet"></category><category term="framing"></category><category term="signal-processing"></category><category term="error-correction"></category><category term="compression"></category></entry><entry><title>Days 3-4: More algorithms, CTF, whoops</title><link href="https://jdotjdot.github.io/2014/02/day-3-more-algorithms/" rel="alternate"></link><updated>2014-02-13T00:00:00-05:00</updated><author><name>JJ</name></author><id>tag:https://jdotjdot.github.io,2014-02-13:2014/02/day-3-more-algorithms/</id><summary type="html">&lt;h3&gt;Algorithms&lt;/h3&gt;
&lt;h4&gt;Selection&amp;nbsp;sort&lt;/h4&gt;
&lt;p&gt;Just going through left to right, finding the new minimum of the unsorted items, and swapping it with the left most unsorted&amp;nbsp;item.&lt;/p&gt;
&lt;h4&gt;Insertion&amp;nbsp;sort&lt;/h4&gt;
&lt;p&gt;Going from left to right, and moving the leftmost unsorted item one item left at a time until we hit the beginning of the array or an item smaller than the one we&amp;#8217;re currently&amp;nbsp;moving.&lt;/p&gt;
&lt;h4&gt;Shellsort&lt;/h4&gt;
&lt;p&gt;Insertion sort, but making jumps of size &lt;code&gt;h&lt;/code&gt;.
Interesting point that the professor made was that if you &lt;em&gt;h&lt;/em&gt;-sort an array and then &lt;em&gt;g&lt;/em&gt;-sort it, it still remains &lt;em&gt;h&lt;/em&gt;-sorted.  This was not something I had thought of offhand, but it makes perfect&amp;nbsp;sense.&lt;/p&gt;
&lt;p&gt;Shellsort is generally pretty fast unless the array size is&amp;nbsp;huge.&lt;/p&gt;
&lt;h3&gt;Hacking&lt;/h3&gt;
&lt;p&gt;I started playing around with a really cool embedded security capture the flag game called &lt;a href="https://microcorruption.com/login"&gt;Microcorruption&lt;/a&gt;.  &amp;#8220;Capture the Flag&amp;#8221; games, when referring to computer security, are complex and involved games with series of levels where you have to find the (deliberately placed) vulnerability in the server or website, etc. at each level and find a secret file, codeword, or password hidden there.  Stripe has run a few of these relating to breaking into websites, so I&amp;#8217;m very excited about this one, which actually works with breaking into (virtual) hardware to break into pretend warehouses.  Very&amp;nbsp;exciting.&lt;/p&gt;
&lt;p&gt;It would shock me if I find myself moving a bit more towards studying hardware and network security while I&amp;#8217;m&amp;nbsp;here.&lt;/p&gt;
&lt;h3&gt;Blowing up my&amp;nbsp;computer&lt;/h3&gt;
&lt;p&gt;Whoops.   Accidentally breaking Windows took up the latter half of the day.  Still working on fixing it, even though it&amp;#8217;s already the next day.  Might have to get a new&amp;nbsp;computer.&lt;/p&gt;</summary><category term="hackerschool"></category><category term="algorithms"></category><category term="sort"></category></entry><entry><title>Day 2: Algorithms</title><link href="https://jdotjdot.github.io/2014/02/algorithms/" rel="alternate"></link><updated>2014-02-11T00:00:00-05:00</updated><author><name>JJ</name></author><id>tag:https://jdotjdot.github.io,2014-02-11:2014/02/algorithms/</id><summary type="html">&lt;p&gt;Today, I&amp;#8217;m working on the &lt;a href="https://class.coursera.org/algs4partI-004/lecture"&gt;Princeton Algorithms Coursera Course&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Main goal overall for today and the next few days is to focus on making sure I know the basics of algorithms, enough to make up for the fact I didn&amp;#8217;t formally study Computer&amp;nbsp;Science.&lt;/p&gt;
&lt;h4&gt;Quick-union&lt;/h4&gt;
&lt;p&gt;I quickly skipped past the first couple of lectures on unions to get to quick-union.  This strategy works with trees of nodes and more efficiently finds if two nodes are connected by finding each node&amp;#8217;s root and determining if they&amp;#8217;re the same root.  To connect nodes, you connect their roots.
Unfortunately, it&amp;#8217;s still a pretty slow strategy, mainly because the trees can get very&amp;nbsp;tall.&lt;/p&gt;
&lt;h4&gt;Weighted&amp;nbsp;quick-union&lt;/h4&gt;
&lt;p&gt;This strategy is a modification of quick-sort so that the trees don&amp;#8217;t get too tall.  Basically, when we&amp;#8217;re connecting a tall tree with a shorter tree, we make sure to put the smaller tree as the child of the bigger tree.  When we&amp;#8217;re adding a node that&amp;#8217;s nested in a different tree, we add that node&amp;#8217;s entire tree as a child of the tree we&amp;#8217;re moving it to.
By adding path compression, we flatten each tree out.  Not quite sure why we&amp;#8217;re doing this; professor says it&amp;#8217;s &amp;#8220;because we&amp;nbsp;can.&amp;#8221;&lt;/p&gt;
&lt;p&gt;Some other topics I glossed over&amp;nbsp;today:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;O-time&lt;/li&gt;
&lt;li&gt;Stacks&lt;/li&gt;
&lt;li&gt;This included basic arithmetic expression evaluation, which is basically a small calculator interpreter, which I already did once for a Google Code Jam&amp;nbsp;problem&lt;/li&gt;
&lt;li&gt;Arrays (These I know&amp;nbsp;well)&lt;/li&gt;
&lt;li&gt;Queues (Already wrote a &lt;a href="https://github.com/jdotjdot/CouchQueue"&gt;queue&lt;/a&gt;&amp;#8212;not a pure one, but at least requiring an understanding of&amp;nbsp;theory)&lt;/li&gt;
&lt;li&gt;Iterators&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For the rest of the week, I&amp;#8217;m planning to finish what&amp;#8217;s available of the Algorithms course (Elementary Sorts), read chapter 3 of Introduction to Algorithms (data structures), and then try implementing a few data structures in C, finishing by working on some difficult Google Code Jam algorithms problems, before moving onto the next&amp;nbsp;project.&lt;/p&gt;</summary><category term="quick-union"></category><category term="hackerschool"></category></entry><entry><title>Day 1: First day of Hacker School</title><link href="https://jdotjdot.github.io/2014/02/first-day-of-hacker-school/" rel="alternate"></link><updated>2014-02-11T00:00:00-05:00</updated><author><name>JJ</name></author><id>tag:https://jdotjdot.github.io,2014-02-11:2014/02/first-day-of-hacker-school/</id><summary type="html">&lt;p&gt;Thanks for coming and checking out this blog!   I&amp;#8217;ll be posting about my adventures and working during &lt;a href="http://www.hackerschool.com"&gt;Hacker School&lt;/a&gt; for the next few&amp;nbsp;months.&lt;/p&gt;
&lt;p&gt;The first day was great&amp;#8212;everyone was extremely friendly, welcoming, and&amp;nbsp;open.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m currently still deciding what I&amp;#8217;ll be working on for the first couple of weeks.  Right now, I have a very long laundry list of everything I&amp;#8217;d &lt;em&gt;like&lt;/em&gt; to be working&amp;nbsp;on:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(This list will be updated periodically as I think of new&amp;nbsp;ideas)&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Algorithms&lt;/li&gt;
&lt;li&gt;Machine&amp;nbsp;Learning&lt;/li&gt;
&lt;li&gt;Functional programming (Clojure and/or Haskell)&lt;ul&gt;
&lt;li&gt;4clojure&lt;/li&gt;
&lt;li&gt;Clojurekoans&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Learn You a Haskell for Great&amp;nbsp;Good&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Improving my knowledge of&amp;nbsp;Javascript&lt;/li&gt;
&lt;li&gt;Learning the basics of front-end web&amp;nbsp;design&lt;/li&gt;
&lt;li&gt;Basic JavaScript animation (animation or&amp;nbsp;game?)&lt;/li&gt;
&lt;li&gt;AngularJS&lt;/li&gt;
&lt;li&gt;C or&amp;nbsp;C++&lt;/li&gt;
&lt;li&gt;Working with hardware like Raspberry Pis or&amp;nbsp;Arduinos&lt;/li&gt;
&lt;li&gt;Working with&amp;nbsp;RFIDs&lt;/li&gt;
&lt;li&gt;iOS or Android development
  &amp;lt;!&amp;#8212; + Moto&amp;nbsp;X&lt;/li&gt;
&lt;li&gt;Justin has spare iPhone 4&amp;nbsp;&amp;#8212;&amp;gt;&lt;/li&gt;
&lt;li&gt;contribute to&amp;nbsp;Meteor&lt;/li&gt;
&lt;li&gt;Genetic&amp;nbsp;algorithms&lt;/li&gt;
&lt;li&gt;computer security (through &lt;span class="caps"&gt;CTF&lt;/span&gt; games, most&amp;nbsp;likely)&lt;/li&gt;
&lt;li&gt;Microcorruption&lt;/li&gt;
&lt;li&gt;build a remote control&amp;nbsp;car&lt;/li&gt;
&lt;li&gt;Internet data via &amp;#8216;wireless&amp;nbsp;fax&amp;#8217;&lt;/li&gt;
&lt;li&gt;Android&amp;nbsp;dev&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;TCP&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Signal processing &lt;!-- see Zulip on python/signal processing --&gt;&lt;/li&gt;
&lt;li&gt;learning networking and streaming (Python or&amp;nbsp;Node)&lt;/li&gt;
&lt;li&gt;learning vim (or maybe&amp;nbsp;emacs&lt;/li&gt;
&lt;li&gt;http://vim-adventures.com&lt;/li&gt;
&lt;li&gt;brackets.io&lt;/li&gt;
&lt;li&gt;http://inventwithpython.com/hacking/chapters/&lt;/li&gt;
&lt;li&gt;d3,&amp;nbsp;three.js&lt;/li&gt;
&lt;li&gt;React.js, sockets (a la&amp;nbsp;own.rileyjshaw.com)&lt;/li&gt;
&lt;/ul&gt;</summary><category term="hackerschool"></category><category term="getting-started"></category></entry></feed>