<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>*JJ</title><link href="https://jdotjdot.github.io/" rel="alternate"></link><link href="https://jdotjdot.github.io/feeds/getopts.atom.xml" rel="self"></link><id>https://jdotjdot.github.io/</id><updated>2014-03-18T00:00:00-04:00</updated><entry><title>How to use getopts inside a BashÂ function</title><link href="https://jdotjdot.github.io/2014/03/how-to-use-getopts-inside-a-bash-function/" rel="alternate"></link><updated>2014-03-18T00:00:00-04:00</updated><author><name>JJ</name></author><id>tag:https://jdotjdot.github.io,2014-03-18:2014/03/how-to-use-getopts-inside-a-bash-function/</id><summary type="html">&lt;p&gt;As part of my quest to finish packaging up my Bash function that gets the updated weather in your Bash prompt, I needed to better organize my code, and so started putting some code into functions.  Bash, however, is a fickle language, and the difficulty that quickly arose was using &lt;code&gt;getops&lt;/code&gt; within a Bash&amp;nbsp;function.&lt;/p&gt;
&lt;p&gt;The reason that I wanted to do this is that Bash, in its infinite wisdom, doesn&amp;#8217;t have regular namespacing.  When you use &lt;code&gt;source&lt;/code&gt; or &lt;code&gt;.&lt;/code&gt; on a Bash script and it sets a variable, that variable is now set across your entire environment (e.g., that terminal window).  That&amp;#8217;s not great to begin with, but given that this script is going to be called every time the prompt is run (meaning, literally every time a command is run), I want to be sure not to clutter up users&amp;#8217; global&amp;nbsp;namespace.&lt;/p&gt;
&lt;p&gt;Originally, it was working fine when placed straight in the shell&amp;nbsp;script:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

  &lt;span class="k"&gt;while &lt;/span&gt;&lt;span class="nb"&gt;getopts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;:c:l:u:s:&amp;quot;&lt;/span&gt; opt ; &lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="k"&gt;      case&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;$opt&amp;quot;&lt;/span&gt; in
          c  &lt;span class="o"&gt;)&lt;/span&gt;   &lt;span class="c"&gt;# default character to display if no weather, leave empty for none&lt;/span&gt;
              &lt;span class="nv"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$OPTARG&amp;quot;&lt;/span&gt;
              ;;
          l  &lt;span class="o"&gt;)&lt;/span&gt;   &lt;span class="c"&gt;# supply city name instead of using internet&lt;/span&gt;
              &lt;span class="nv"&gt;l&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$OPTARG&amp;quot;&lt;/span&gt;
              ;;
          u  &lt;span class="o"&gt;)&lt;/span&gt;   &lt;span class="c"&gt;# how often to update weather in seconds&lt;/span&gt;
              &lt;span class="nv"&gt;u&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$OPTARG&amp;quot;&lt;/span&gt;
              ;;
          s  &lt;span class="o"&gt;)&lt;/span&gt;   &lt;span class="c"&gt;# weather update alert string to supply, if any&lt;/span&gt;
              &lt;span class="nv"&gt;s&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$OPTARG&amp;quot;&lt;/span&gt;
              ;;
          h  &lt;span class="o"&gt;)&lt;/span&gt;
              &lt;span class="c"&gt;# echo the help file&lt;/span&gt;
              ;;
          &lt;span class="se"&gt;\?&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt;
              &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Invalid option: -$OPTARG&amp;quot;&lt;/span&gt; &amp;gt;&amp;amp;2
              ;;
          :  &lt;span class="o"&gt;)&lt;/span&gt;
              &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Option -$OPTARG requires an argument.&amp;quot;&lt;/span&gt; &amp;gt;&amp;amp;2
              &lt;span class="nb"&gt;exit &lt;/span&gt;1
              ;;
      &lt;span class="k"&gt;esac&lt;/span&gt;
&lt;span class="k"&gt;  done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;What this does is it allows you to call my shell script with various parameters,&amp;nbsp;e.g.:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;BashWeather&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;$&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;My first thought to be able to stick it inside a function was to simply pass on the parameters to the function, but you can&amp;#8217;t really pass arguments to Bash functions, nor can you return values except for &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;1&lt;/code&gt; as an exit status code.   In Python, you could just declare a function with arguments like &lt;code&gt;def myfunc(arg1):&lt;/code&gt;, but in Bash there&amp;#8217;s no equivalent to that, and &lt;code&gt;getopts&lt;/code&gt; itself is actually how you&amp;#8217;d likely parse any arguments passed&amp;nbsp;in.&lt;/p&gt;
&lt;p&gt;Ultimately, that was what I ended up doing, but I had to do it the Bash way, passing it to the function as &lt;code&gt;"$@"&lt;/code&gt;, referencing the inputs that were passed in by the calling script.  I had a hard time figuring this out, so I thought it would be useful to post this&amp;nbsp;here.&lt;/p&gt;
&lt;p&gt;Final&amp;nbsp;output:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="k"&gt;function &lt;/span&gt;getOptsFunction &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;local &lt;/span&gt;OPTIND
  &lt;span class="k"&gt;while &lt;/span&gt;&lt;span class="nb"&gt;getopts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;:c:l:u:s:&amp;quot;&lt;/span&gt; opt ; &lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="k"&gt;      case&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;$opt&amp;quot;&lt;/span&gt; in
          c  &lt;span class="o"&gt;)&lt;/span&gt;   &lt;span class="c"&gt;# default character to display if no weather, leave empty for none&lt;/span&gt;
              &lt;span class="nv"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$OPTARG&amp;quot;&lt;/span&gt;
              ;;
          l  &lt;span class="o"&gt;)&lt;/span&gt;   &lt;span class="c"&gt;# supply city name instead of using internet&lt;/span&gt;
              &lt;span class="nv"&gt;l&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$OPTARG&amp;quot;&lt;/span&gt;
              ;;
          u  &lt;span class="o"&gt;)&lt;/span&gt;   &lt;span class="c"&gt;# how often to update weather in seconds&lt;/span&gt;
              &lt;span class="nv"&gt;u&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$OPTARG&amp;quot;&lt;/span&gt;
              ;;
          s  &lt;span class="o"&gt;)&lt;/span&gt;   &lt;span class="c"&gt;# weather update alert string to supply, if any&lt;/span&gt;
              &lt;span class="nv"&gt;s&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$OPTARG&amp;quot;&lt;/span&gt;
              ;;
          h  &lt;span class="o"&gt;)&lt;/span&gt;
              &lt;span class="c"&gt;# echo the help file&lt;/span&gt;
              ;;
          &lt;span class="se"&gt;\?&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt;
              &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Invalid option: -$OPTARG&amp;quot;&lt;/span&gt; &amp;gt;&amp;amp;2
              ;;
          :  &lt;span class="o"&gt;)&lt;/span&gt;
              &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Option -$OPTARG requires an argument.&amp;quot;&lt;/span&gt; &amp;gt;&amp;amp;2
              &lt;span class="nb"&gt;exit &lt;/span&gt;1
              ;;
      &lt;span class="k"&gt;esac&lt;/span&gt;
&lt;span class="k"&gt;  done&lt;/span&gt;
&lt;span class="k"&gt;  &lt;/span&gt;&lt;span class="nb"&gt;shift&lt;/span&gt; &lt;span class="k"&gt;$((&lt;/span&gt;OPTIND-1&lt;span class="k"&gt;))&lt;/span&gt;

  &lt;span class="c"&gt;# set defaults if command not supplied&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -z &lt;span class="s2"&gt;&amp;quot;$u&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; ; &lt;span class="k"&gt;then &lt;/span&gt;&lt;span class="nv"&gt;u&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;10800 ; &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="k"&gt;  if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -z &lt;span class="s2"&gt;&amp;quot;$c&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; ; &lt;span class="k"&gt;then &lt;/span&gt;&lt;span class="nv"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$&amp;quot;&lt;/span&gt; ; &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

getOptsFunction &lt;span class="s2"&gt;&amp;quot;$@&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</summary><category term="hackerschool"></category><category term="bash"></category><category term="getopts"></category></entry></feed>