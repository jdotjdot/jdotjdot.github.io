<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>*JJ</title><link href="http://blog.jdotjdot.com/" rel="alternate"></link><link href="http://blog.jdotjdot.com/feeds/tag/bash.atom.xml" rel="self"></link><id>http://blog.jdotjdot.com/</id><updated>2014-05-22T23:16:55-04:00</updated><entry><title>Include the weather in your bash prompt!</title><link href="http://blog.jdotjdot.com/2014/05/include-the-weather-in-your-bash-prompt/" rel="alternate"></link><updated>2014-05-22T23:16:55-04:00</updated><author><name>JJ</name></author><id>tag:blog.jdotjdot.com,2014-05-22:2014/05/include-the-weather-in-your-bash-prompt/</id><summary type="html">&lt;p&gt;About a third of the way into Hacker School, I got myself entrenched in a rather unusual project&amp;#8212;trying to figure out how to get an automatically updated weather icon into my Bash prompt, doing it purely in Bash for practical (and aesthetic)&amp;nbsp;reasons.&lt;/p&gt;
&lt;p&gt;I called it &lt;a href="https://github.com/jdotjdot/BashWeather"&gt;BashWeather&lt;/a&gt;.&lt;/p&gt;
&lt;!--
![BashWeather screenshot](https://dl.dropboxusercontent.com/s/z4ut9ggm8y14izp/bashweather%20screenshot.png)&lt;br /&gt;
*Screenshot of sample terminal session with BashWeather*
--&gt;

&lt;div style="/* background-color: lightgray; */ padding: 10px 0; border-radius: 15px; text-align: center;border: 3px solid lightgray;margin: 0 10% 15px 10%;"&gt;

    &lt;div style="max-width: 90%; margin: auto;"&gt;
        {% img {filename}/images/bashweather%20screenshot.png &amp;#8220;BashWeather Screenshot&amp;#8221; %}
        {% img {filename}/images/bashweather%20screenshot%202.png &amp;#8220;BashWeather Screenshot&amp;#8221; %}
    &lt;/div&gt;
    &lt;div style="text-align: center; font-style: italic;"&gt;&lt;span class="caption"&gt;Screenshots of a sample terminal session with BashWeather&lt;/span&gt;&lt;/div&gt;&lt;br&gt;

    &lt;div style="font-size: 150%; text-align: center; /* margin-left: 5%; */"&gt;☂☃☽☀︎&lt;/div&gt;
    &lt;div style="text-align: center; font-style: italic;"&gt;Weather character palette&lt;/div&gt;

&lt;/div&gt;

&lt;p&gt;There are a number of configurable options, including the&amp;nbsp;following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How often to wait between weather&amp;nbsp;updates&lt;/li&gt;
&lt;li&gt;The default character to be supplied in the event that the weather isn&amp;#8217;t&amp;nbsp;available&lt;/li&gt;
&lt;li&gt;The method to use to determine where in the world the computer is located.  Options are to use &lt;span class="caps"&gt;IP&lt;/span&gt; address, to use the built-in Mac locator if available, or to supply the city and country in a string when calling the&amp;nbsp;script.&lt;/li&gt;
&lt;li&gt;Allowable timeout for the &lt;span class="caps"&gt;HTTP&lt;/span&gt; requests BashWeather&amp;nbsp;makes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I learned quite a bit from this project about Bash functions, scoping, some of Bash&amp;#8217;s oddities (behavior of brackets, globbing, needing to quote variables, etc.), and some of the nitty-gritty details of Bash variables.  Since a lot of global variables were required by the script to keep track of state, like how long it&amp;#8217;s been since the last check and whether or not internet is available, I was very careful to pollute the global namespace as little as possible, which was an interesting exercise given that Bash functions &lt;a href="http://www.linuxjournal.com/content/return-values-bash-functions"&gt;can&amp;#8217;t actually return values to the caller&lt;/a&gt; in the way you&amp;#8217;d traditionally think about&amp;nbsp;it.&lt;/p&gt;
&lt;h3&gt;But&amp;#8230;&amp;nbsp;why?&lt;/h3&gt;
&lt;p&gt;I couldn&amp;#8217;t think of anything to do at Hacker School for a bit, and I was about to head outside to get a cup of coffee to clear my head, and I noticed that it was raining and got very upset that I didn&amp;#8217;t have an umbrella with me.  I almost always forget to bring my umbrella, and I used to use an &lt;a href="http://www.ifttt.com"&gt;&lt;span class="caps"&gt;IFTTT&lt;/span&gt;&lt;/a&gt; recipe that sent me a Gchat whenever it started to rain.  Unfortunately, with the advent of Hangouts, it was eventually&amp;nbsp;deprecated.&lt;/p&gt;
&lt;p&gt;I liked the Gchat recipe because it alerted me both on my computer and on my phone.  Considering how to replace it, I started thinking about what I look at more than anything else&amp;#8212;and realized the one and only answer there was my Bash prompt.  I&amp;#8217;m always looking at the command line, one way or another, or at least have it open&amp;#8212;and the decision was&amp;nbsp;made.&lt;/p&gt;
&lt;p&gt;From then on, I would know the&amp;nbsp;weather.&lt;/p&gt;
&lt;h3&gt;But would you really ever look at the weather in your&amp;nbsp;prompt?&lt;/h3&gt;
&lt;p&gt;When I started telling people about it at Hacker School I did encounter a bit of skepticism, usually along the lines&amp;nbsp;of:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Why would you ever need the weather in your&amp;nbsp;prompt?&lt;/p&gt;
&lt;p&gt;Come on, you&amp;#8217;re never actually going to use&amp;nbsp;that.&lt;/p&gt;
&lt;p&gt;&amp;#8230;etc.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I got this reaction from one person in particular, and we then sat down to start pairing on a quick question that we were trying to resolve&amp;#8212;I think possibly something to do with BashWeather&amp;nbsp;itself.&lt;/p&gt;
&lt;p&gt;We&amp;#8217;d been working not even two minutes when we turned to the prompt and he saw the umbrella (☂) in the prompt and exclaimed, &amp;#8220;Oh no, is it raining? I didn&amp;#8217;t&amp;nbsp;realize!&amp;#8221;&lt;/p&gt;
&lt;p&gt;&amp;#8230;and then he realized what had happened, and then I&amp;nbsp;grinned.&lt;/p&gt;
&lt;h3&gt;And now, the&amp;nbsp;code&lt;/h3&gt;
&lt;p&gt;The full script, with instructions, can be found at the &lt;a href="https://github.com/jdotjdot/BashWeather"&gt;Github repository&lt;/a&gt;.  It is currently fully functional, though still a work in progress.  I&amp;#8217;ll be doing a longer post shortly on how I structured BashWeather from a scoping perspective, since I found the architecture required of a large Bash script to be very different and very&amp;nbsp;interesting.&lt;/p&gt;</summary><category term="hackerschool"></category><category term="bash"></category><category term="weather"></category><category term="bashweather"></category></entry><entry><title>Automatically restarting your process or server on crash</title><link href="http://blog.jdotjdot.com/2014/04/restarting-your-server-on-crash/" rel="alternate"></link><updated>2014-04-10T00:00:00-04:00</updated><author><name>JJ</name></author><id>tag:blog.jdotjdot.com,2014-04-10:2014/04/restarting-your-server-on-crash/</id><summary type="html">&lt;p&gt;While working with &lt;a href="http://github.com/lord"&gt;Robert&lt;/a&gt; on the &lt;a href="http://github.com/lord/doorbot"&gt;Doorbot&lt;/a&gt; webserver as part of our project to hook up the front door of Hacker School to the web, we ran across a small problem with the Ruby server that he had set&amp;nbsp;up.&lt;/p&gt;
&lt;p&gt;In the past, my sites have always been hosted places like Heroku or &lt;a href="http://www.webfaction.com?affiliate=thecampusrep"&gt;Webfaction&lt;/a&gt;, which take care of restarting the server in case of&amp;nbsp;shutdown.&lt;/p&gt;
&lt;p&gt;However, we were hosting the Doorbot server on a Raspberry Pi that we were planning to lock in the network closet.   This meant that no one was going to be able to get in there to physically unplug and replug the Pi, which is the method we&amp;#8217;d been using to restart the server after we (with great difficulty) got the server launch script into Raspbian&amp;#8217;s &lt;code&gt;init.d&lt;/code&gt; to start on startup.  Another method we&amp;#8217;d also been using was to &lt;span class="caps"&gt;SSH&lt;/span&gt; into the Pi to manually restart the server, but this of course wasn&amp;#8217;t a sustainable long-term solution.  If the server shut down on its own, people weren&amp;#8217;t going to be able to get through the door until someone alerted us and we restarted the server manually.   &lt;strong&gt;We needed a better solution that would automatically and reliably restart the server upon shutdown without any human&amp;nbsp;intervention.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I suggested a strategy that I presented at a &lt;a href="https://github.com/jdotjdot/Data-Scraping-Talk--PennApps-F2012-"&gt;lecture&lt;/a&gt; at &lt;a href="http://pennapps.com"&gt;PennApps&lt;/a&gt; Fall 2012.   I had previously used this strategy on some web scraping projects to get a running Python process to restart immediately upon shutdown.  For processes like that scraper or the Ruby server, if the process dies with an error, we actually don&amp;#8217;t generally care in this case why it shut down or what the error was&amp;#8212;just that it shut down and that we want it back up&amp;nbsp;immediately.  &lt;/p&gt;
&lt;p&gt;The strategy is to &lt;strong&gt;wrap the server set-up process in a Bash script&lt;/strong&gt; within a &lt;code&gt;while&lt;/code&gt; or &lt;code&gt;until&lt;/code&gt; loop, as in the following example with my old Python&amp;nbsp;scraper:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Runs our scraper indefinitely&lt;/span&gt;
&lt;span class="c"&gt;# will only stop upon a GRACEFUL exit--&lt;/span&gt;
&lt;span class="c"&gt;#  but keep in mind a graceful exit only means that&lt;/span&gt;
&lt;span class="c"&gt;#  no error is thrown, but that doesn&amp;#39;t mean that we&lt;/span&gt;
&lt;span class="c"&gt;#  actually want the program to end!&lt;/span&gt;

&lt;span class="k"&gt;until &lt;/span&gt;python scraper.py; &lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="k"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Process crashed with exit code $?.  Respawning...&amp;quot;&lt;/span&gt; &amp;gt;&amp;amp;2
    sleep 2
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For a server, you would replace &lt;code&gt;python scraper.py&lt;/code&gt; with &lt;code&gt;python manage.py runserver&lt;/code&gt; for Django, or the equivalent command in Ruby or your preferred web&amp;nbsp;framework.&lt;/p&gt;
&lt;p&gt;What happens here is the &lt;code&gt;until&lt;/code&gt; loop starts to test the &amp;#8220;condition,&amp;#8221; but the condition here is actually our intended process.  That process runs indefinitely, and ideally would never stop and we&amp;#8217;d never hit the &lt;code&gt;echo&lt;/code&gt;.  However, in the event that the server &lt;em&gt;does&lt;/em&gt; crash, we take advantage of a trick with Bash&amp;#8212;an exit upon failure will evalute &amp;#8220;false-y&amp;#8221; for the &lt;code&gt;until&lt;/code&gt; loop, and so on a crash, we will always enter and repeat the loop.  The only way to exit the loop is a successful server program exit, which will never happen, because we never intentionally shut down the&amp;nbsp;server!&lt;/p&gt;
&lt;p&gt;After wrapping the Ruby server startup call in that tiny Bash script, the server now automatically restarts itself upon&amp;nbsp;failure.&lt;/p&gt;</summary><category term="hackerschool"></category><category term="bash"></category><category term="doorbot"></category><category term="doorduino"></category><category term="server"></category><category term="crash"></category><category term="restart"></category></entry><entry><title>How to use getopts inside a Bash function</title><link href="http://blog.jdotjdot.com/2014/03/how-to-use-getopts-inside-a-bash-function/" rel="alternate"></link><updated>2014-03-18T00:00:00-04:00</updated><author><name>JJ</name></author><id>tag:blog.jdotjdot.com,2014-03-18:2014/03/how-to-use-getopts-inside-a-bash-function/</id><summary type="html">&lt;p&gt;As part of my quest to finish packaging up my Bash function that gets the updated weather in your Bash prompt, I needed to better organize my code, and so started putting some code into functions.  Bash, however, is a fickle language, and the difficulty that quickly arose was using &lt;code&gt;getops&lt;/code&gt; within a Bash&amp;nbsp;function.&lt;/p&gt;
&lt;p&gt;The reason that I wanted to do this is that Bash, in its infinite wisdom, doesn&amp;#8217;t have regular namespacing.  When you use &lt;code&gt;source&lt;/code&gt; or &lt;code&gt;.&lt;/code&gt; on a Bash script and it sets a variable, that variable is now set across your entire environment (e.g., that terminal window).  That&amp;#8217;s not great to begin with, but given that this script is going to be called every time the prompt is run (meaning, literally every time a command is run), I want to be sure not to clutter up users&amp;#8217; global&amp;nbsp;namespace.&lt;/p&gt;
&lt;p&gt;Originally, it was working fine when placed straight in the shell&amp;nbsp;script:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

  &lt;span class="k"&gt;while &lt;/span&gt;&lt;span class="nb"&gt;getopts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;:c:l:u:s:&amp;quot;&lt;/span&gt; opt ; &lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="k"&gt;      case&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;$opt&amp;quot;&lt;/span&gt; in
          c  &lt;span class="o"&gt;)&lt;/span&gt;   &lt;span class="c"&gt;# default character to display if no weather, leave empty for none&lt;/span&gt;
              &lt;span class="nv"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$OPTARG&amp;quot;&lt;/span&gt;
              ;;
          l  &lt;span class="o"&gt;)&lt;/span&gt;   &lt;span class="c"&gt;# supply city name instead of using internet&lt;/span&gt;
              &lt;span class="nv"&gt;l&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$OPTARG&amp;quot;&lt;/span&gt;
              ;;
          u  &lt;span class="o"&gt;)&lt;/span&gt;   &lt;span class="c"&gt;# how often to update weather in seconds&lt;/span&gt;
              &lt;span class="nv"&gt;u&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$OPTARG&amp;quot;&lt;/span&gt;
              ;;
          s  &lt;span class="o"&gt;)&lt;/span&gt;   &lt;span class="c"&gt;# weather update alert string to supply, if any&lt;/span&gt;
              &lt;span class="nv"&gt;s&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$OPTARG&amp;quot;&lt;/span&gt;
              ;;
          h  &lt;span class="o"&gt;)&lt;/span&gt;
              &lt;span class="c"&gt;# echo the help file&lt;/span&gt;
              ;;
          &lt;span class="se"&gt;\?&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt;
              &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Invalid option: -$OPTARG&amp;quot;&lt;/span&gt; &amp;gt;&amp;amp;2
              ;;
          :  &lt;span class="o"&gt;)&lt;/span&gt;
              &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Option -$OPTARG requires an argument.&amp;quot;&lt;/span&gt; &amp;gt;&amp;amp;2
              &lt;span class="nb"&gt;exit &lt;/span&gt;1
              ;;
      &lt;span class="k"&gt;esac&lt;/span&gt;
&lt;span class="k"&gt;  done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;What this does is it allows you to call my shell script with various parameters,&amp;nbsp;e.g.:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;BashWeather&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;$&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;My first thought to be able to stick it inside a function was to simply pass on the parameters to the function, but you can&amp;#8217;t really pass arguments to Bash functions, nor can you return values except for &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;1&lt;/code&gt; as an exit status code.   In Python, you could just declare a function with arguments like &lt;code&gt;def myfunc(arg1):&lt;/code&gt;, but in Bash there&amp;#8217;s no equivalent to that, and &lt;code&gt;getopts&lt;/code&gt; itself is actually how you&amp;#8217;d likely parse any arguments passed&amp;nbsp;in.&lt;/p&gt;
&lt;p&gt;Ultimately, that was what I ended up doing, but I had to do it the Bash way, passing it to the function as &lt;code&gt;"$@"&lt;/code&gt;, referencing the inputs that were passed in by the calling script.  I had a hard time figuring this out, so I thought it would be useful to post this&amp;nbsp;here.&lt;/p&gt;
&lt;p&gt;Final&amp;nbsp;output:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="k"&gt;function &lt;/span&gt;getOptsFunction &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;local &lt;/span&gt;OPTIND
  &lt;span class="k"&gt;while &lt;/span&gt;&lt;span class="nb"&gt;getopts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;:c:l:u:s:&amp;quot;&lt;/span&gt; opt ; &lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="k"&gt;      case&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;$opt&amp;quot;&lt;/span&gt; in
          c  &lt;span class="o"&gt;)&lt;/span&gt;   &lt;span class="c"&gt;# default character to display if no weather, leave empty for none&lt;/span&gt;
              &lt;span class="nv"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$OPTARG&amp;quot;&lt;/span&gt;
              ;;
          l  &lt;span class="o"&gt;)&lt;/span&gt;   &lt;span class="c"&gt;# supply city name instead of using internet&lt;/span&gt;
              &lt;span class="nv"&gt;l&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$OPTARG&amp;quot;&lt;/span&gt;
              ;;
          u  &lt;span class="o"&gt;)&lt;/span&gt;   &lt;span class="c"&gt;# how often to update weather in seconds&lt;/span&gt;
              &lt;span class="nv"&gt;u&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$OPTARG&amp;quot;&lt;/span&gt;
              ;;
          s  &lt;span class="o"&gt;)&lt;/span&gt;   &lt;span class="c"&gt;# weather update alert string to supply, if any&lt;/span&gt;
              &lt;span class="nv"&gt;s&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$OPTARG&amp;quot;&lt;/span&gt;
              ;;
          h  &lt;span class="o"&gt;)&lt;/span&gt;
              &lt;span class="c"&gt;# echo the help file&lt;/span&gt;
              ;;
          &lt;span class="se"&gt;\?&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt;
              &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Invalid option: -$OPTARG&amp;quot;&lt;/span&gt; &amp;gt;&amp;amp;2
              ;;
          :  &lt;span class="o"&gt;)&lt;/span&gt;
              &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Option -$OPTARG requires an argument.&amp;quot;&lt;/span&gt; &amp;gt;&amp;amp;2
              &lt;span class="nb"&gt;exit &lt;/span&gt;1
              ;;
      &lt;span class="k"&gt;esac&lt;/span&gt;
&lt;span class="k"&gt;  done&lt;/span&gt;
&lt;span class="k"&gt;  &lt;/span&gt;&lt;span class="nb"&gt;shift&lt;/span&gt; &lt;span class="k"&gt;$((&lt;/span&gt;OPTIND-1&lt;span class="k"&gt;))&lt;/span&gt;

  &lt;span class="c"&gt;# set defaults if command not supplied&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -z &lt;span class="s2"&gt;&amp;quot;$u&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; ; &lt;span class="k"&gt;then &lt;/span&gt;&lt;span class="nv"&gt;u&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;10800 ; &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="k"&gt;  if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -z &lt;span class="s2"&gt;&amp;quot;$c&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; ; &lt;span class="k"&gt;then &lt;/span&gt;&lt;span class="nv"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$&amp;quot;&lt;/span&gt; ; &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

getOptsFunction &lt;span class="s2"&gt;&amp;quot;$@&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</summary><category term="hackerschool"></category><category term="bash"></category><category term="getopts"></category></entry></feed>