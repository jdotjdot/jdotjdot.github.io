<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>*JJ</title><link href="https://jdotjdot.github.io/" rel="alternate"></link><link href="https://jdotjdot.github.io/feeds/tag/c.atom.xml" rel="self"></link><id>https://jdotjdot.github.io/</id><updated>2014-03-11T00:00:00-04:00</updated><entry><title>Asynchronous programming withÂ Arduino</title><link href="https://jdotjdot.github.io/2014/03/asynchronous-programming-with-spark-core/" rel="alternate"></link><updated>2014-03-11T00:00:00-04:00</updated><author><name>JJ</name></author><id>tag:https://jdotjdot.github.io,2014-03-11:2014/03/asynchronous-programming-with-spark-core/</id><summary type="html">&lt;p&gt;I&amp;#8217;ve been working quite a bit this week and last week with &lt;a href="http://www.arduino.cc/"&gt;Arduinos&lt;/a&gt; and &lt;a href="https://www.spark.io/"&gt;Spark Cores&lt;/a&gt; (an Arduino-like device with WiFi and a cloud service built-in).   I&amp;#8217;ve been working on a few projects, including many out of the Arduino starter book, hooking up a remote control car to WiFi, and hooking up the Hacker School door buzzer to our WiFi so that we can let people in  without pressing the door buzzer&amp;#8212;or so that people can let themselves&amp;nbsp;in.&lt;/p&gt;
&lt;p&gt;One of the issues I&amp;#8217;ve run across that&amp;#8217;s been interesting is how to run threaded or asynchronous commands.  This is important if we want the Arduino to do something, but we also need a time delay.  For example, if someone sends a command to the Arduino to open the door, we need to do the following two&amp;nbsp;things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open the door, wait 10 seconds, close the&amp;nbsp;door&lt;/li&gt;
&lt;li&gt;Respond to the request and close the connection&amp;#8212;e.g. with a &lt;code&gt;HTTP 200 OK&lt;/code&gt; or something&amp;nbsp;similar.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The way my code was structured, I was sending the command to the door before responding to the client.  The problem is that the Arduino is running a single set of instructions, so the response to the client is delayed by waiting for the door to close.  For example, the steps occured in the following&amp;nbsp;order:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Arduino server recieves request to open the&amp;nbsp;door&lt;/li&gt;
&lt;li&gt;Arduino opens&amp;nbsp;door&lt;/li&gt;
&lt;li&gt;Arduino sits and waits for 10&amp;nbsp;seconds&lt;/li&gt;
&lt;li&gt;Arduino closes&amp;nbsp;door&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Then&lt;/em&gt;, Arduino sends response&amp;nbsp;message&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The client is then sitting there and waiting for 10 seconds to know what happened.  I didn&amp;#8217;t want to have this happen, so there had to be a better way to do it&amp;#8212;and I realized I could take advantage of the Arduino&amp;#8217;s built-in looping&amp;nbsp;structure.&lt;/p&gt;
&lt;h3&gt;First, some&amp;nbsp;background&lt;/h3&gt;
&lt;p&gt;The Arduino requires its code to be set up in a specific manner, with two specific functions that it will always&amp;nbsp;run.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;// This function is called once upon start-up&lt;/span&gt;
   &lt;span class="c1"&gt;//  to do any set-up required--e.g., initalizing&lt;/span&gt;
   &lt;span class="c1"&gt;//  intput and output pins&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nx"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="cm"&gt;/* This function is called over and over again, many &lt;/span&gt;
&lt;span class="cm"&gt;   times per second.&lt;/span&gt;

&lt;span class="cm"&gt;   However, it only runs once at a time, so if you have a &amp;quot;delay&amp;quot; command in there, all activity will cease until the delay is over.&lt;/span&gt;
&lt;span class="cm"&gt;   */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;What I&amp;nbsp;did&lt;/h3&gt;
&lt;p&gt;I took advantage of how frequently &lt;code&gt;loop()&lt;/code&gt; is called.  I set up a block at the top of &lt;code&gt;loop()&lt;/code&gt; (or alternatively could be a different function that is called at the top of &lt;code&gt;loop()&lt;/code&gt;) that would run the open door command when a state variable, declared at the beginning, was set to &lt;code&gt;true&lt;/code&gt;, and then immediately turn it to false.&lt;br /&gt;
Rather than open the door immediately upon receiving the request, the Arduino would set this &amp;#8220;openDoor&amp;#8221; variable to &lt;code&gt;true&lt;/code&gt; and would immediately respond to the client.  The next time the program looped around, it would see that &lt;code&gt;openDoor&lt;/code&gt; says that the door needs to be open it&amp;#8212;and so it would open it and have the delay, but it would do all this after the client had been responded&amp;nbsp;to.&lt;/p&gt;
&lt;p&gt;Overall, the code looked something like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;asyncOpenDoor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;openDoor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// code to open the door&lt;/span&gt;
    &lt;span class="c1"&gt;// below is pseudocode&lt;/span&gt;

    &lt;span class="n"&gt;asyncOpenDoor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// so door isn&amp;#39;t opened again&lt;/span&gt;

    &lt;span class="n"&gt;openTheDoor&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// delay for 15 seconds&lt;/span&gt;
    &lt;span class="n"&gt;closeTheDoor&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;pinMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doorOpener&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OUTPUT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// code to set up the server&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asyncOpenDoor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;openDoor&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="c1"&gt;// Code to receive incoming requests&lt;/span&gt;

   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;requestSaysToOpenTheDoor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Valid door-opening request&lt;/span&gt;

      &lt;span class="n"&gt;asyncOpenDoor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="c1"&gt;// respond to client&lt;/span&gt;
      &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;HTTP 200 OK&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// invalid door-opening request&lt;/span&gt;

      &lt;span class="c1"&gt;// respond to client&lt;/span&gt;
      &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;HTTP 401 Unauthorized&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="c1"&gt;// kill the connection&lt;/span&gt;
   &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
   &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="C"></category><category term="async"></category></entry></feed>