<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>*JJ</title><link href="https://jdotjdot.github.io/" rel="alternate"></link><link href="https://jdotjdot.github.io/feeds/tag/canvas.atom.xml" rel="self"></link><id>https://jdotjdot.github.io/</id><updated>2014-04-02T00:00:00-04:00</updated><entry><title>Introduction to HTML5Â canvas</title><link href="https://jdotjdot.github.io/2014/04/introduction-to-html5-canvas/" rel="alternate"></link><updated>2014-04-02T00:00:00-04:00</updated><author><name>JJ</name></author><id>tag:https://jdotjdot.github.io,2014-04-02:2014/04/introduction-to-html5-canvas/</id><summary type="html">&lt;!-- 4/2/2014 --&gt;

&lt;!-- Custom CSS: --&gt;

&lt;style type="text/css"&gt;
    blockquote p {
        font-style: normal;
    }
&lt;/style&gt;

&lt;p&gt;In my quest to learn a bit more about front-end and responsive design, I&amp;#8217;ve decided to do a mini-project building a Pacman map-editor in the browser.   Hopefully, I&amp;#8217;ll also be able to make it playable.  This was inspired by a conversation with &lt;a href="https://github.com/maryrosecook"&gt;Mary&lt;/a&gt; about what I should be working on next, in which she told me about someone in a previous batch who had built multiplayer Pacman, where live players controlled the ghosts as well as&amp;nbsp;Pacman.&lt;/p&gt;
&lt;p&gt;After doing a bit of research on some larger library options like AngularJS, I decided on simply using &lt;span class="caps"&gt;HTML5&lt;/span&gt;&amp;#8217;s &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; element.  While I may eventually use a canvas library like KineticJS, I decided to start off learning the built-in basics, using &lt;a href="http://diveintohtml5.info/canvas.html"&gt;this great tutorial&lt;/a&gt; from &lt;strong&gt;Dive Into &lt;span class="caps"&gt;HTML5&lt;/span&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;h4&gt;Canvas is just a place for pixels to&amp;nbsp;dance&lt;/h4&gt;
&lt;p&gt;Canvas is best just thought of as a defined element in the webpage where you draw and erase pixels.  That&amp;#8217;s&amp;nbsp;it.  &lt;/p&gt;
&lt;p&gt;Even if you have very complex Javascript frameworks and architecture going on in the background, at the end of the day, all that &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; ever sees is various instructions to turn a certain pixel a certain color, with no knowledge of what&amp;#8217;s going on above.  It&amp;#8217;s much like your monitor&amp;#8212;your monitor displays to you everything happening in your computer display, but the monitor doesn&amp;#8217;t actually understand where one window ends and another begins, or even what a &amp;#8220;window&amp;#8221; is&amp;#8212;that&amp;#8217;s all in the computer, which tells the monitor every 16ms or so what color to make each&amp;nbsp;pixel.&lt;/p&gt;
&lt;h4&gt;Canvas just needs to be told what to&amp;nbsp;do&lt;/h4&gt;
&lt;p&gt;Working with &lt;code&gt;canvas&lt;/code&gt; (without any external Javascript libraries on top) is quite different than working with straight &lt;span class="caps"&gt;HTML&lt;/span&gt;&amp;#8212;you have to specifically instruct what you want canvas to&amp;nbsp;do.&lt;/p&gt;
&lt;p&gt;To describe the difference a bit better to the uninitiated, &lt;span class="caps"&gt;HTML&lt;/span&gt; could be described as &amp;#8220;declarative&amp;#8221; programming, meaning you describe what you want and how you want it to&amp;nbsp;be.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Declarative programming:&lt;/strong&gt;&lt;br&gt;
Let there be light! &lt;br&gt;&lt;br&gt;
&amp;#8230;&lt;em&gt;and there was&amp;nbsp;light.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Notice how above, all I did was say that I wanted there to be light&amp;#8212;I didn&amp;#8217;t specify how it would happen.  It &amp;#8220;just&amp;nbsp;works.&amp;#8221;&lt;/p&gt;
&lt;p&gt;In imperative programming, you&amp;#8217;re getting much deeper into the grimy details of telling the computer exactly what to&amp;nbsp;do.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Imperative programming:&lt;/strong&gt;&lt;br&gt;
Every nanosecond, create another photon over there and have each one immediately come over here at the speed of light!&lt;br&gt;&lt;br&gt;
&lt;em&gt;&amp;#8230;and there was&amp;nbsp;light.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Though oversimplified, this is somewhat the difference between working with &lt;span class="caps"&gt;HTML&lt;/span&gt; in general and working with &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;HTML&lt;/span&gt;&lt;/strong&gt; (declarative)&lt;strong&gt;:&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
Code: &lt;br&gt;
&lt;code&gt;&amp;lt;div style="background-color: red; width: 100px; height: 100px;"&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;
&lt;br&gt;&lt;br&gt;
Translation:&lt;br&gt;
Let there be a red &lt;code&gt;div&lt;/code&gt; element with dimensions 100 pixels by 100 pixels!
&lt;br&gt;&lt;br&gt;
What happens:
&lt;div style="background-color: red; width: 100px; height: 100px;"&gt;&lt;/div&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Compare this to what you do to get the same thing in &lt;code&gt;canvas&lt;/code&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Canvas&lt;/strong&gt; (imperative)&lt;strong&gt;:&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&amp;nbsp;Code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// This code is in Javascript&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;myCanvas&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;manualrect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;beginPath&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;moveTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lineTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lineTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lineTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lineTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;closePath&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fillStyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;red&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;manualrect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cm"&gt;/* There are built-in functions that make making a rectangle easier, like ctx.rect(x, y, height, width) to create one or ctx.fillRect(...) to create a rectangle and fill it.  However, both ultimately boil down to the code we&amp;#39;ve used above. */&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Translation:&lt;br&gt;
Browser, go get the element on my webpage with the id &lt;code&gt;myCanvas&lt;/code&gt;.  Now, in that element, I want you to start creating a path&amp;#8212;use your invisible erasable  pencil to ghost out the path.  Start at coordinates &lt;code&gt;(0, 0)&lt;/code&gt;.  With the pencil to the page, move to &lt;code&gt;(100, 0)&lt;/code&gt;.  Still with the pencil to the page, move to &lt;code&gt;(100, 100)&lt;/code&gt;.  [etc.] Now, pencil to the page, move back to &lt;code&gt;(0, 0)&lt;/code&gt;.&lt;br&gt;
Now, take all those invisible paths we&amp;#8217;ve drawn, and close it to make it a closed shape.
Prepare to use the color &amp;#8220;red&amp;#8221; to fill in anything we might fill in in the future.
Fill in the last thing we did with the current style (red).
&lt;br&gt;&lt;br&gt;
What&amp;nbsp;happens:&lt;/p&gt;
&lt;p&gt;&lt;canvas id="myCanvas" width=110 height=110&gt;&lt;/canvas&gt;
&lt;script type="text/javascript"&gt;
    var ctx = document.getElementById("myCanvas").getContext("2d");
    function manualrect(x,y,w,h) {
        ctx.beginPath();
        ctx.moveTo(x, y);
        ctx.lineTo(x + w, y);
        ctx.lineTo(x + w, y + h);
        ctx.lineTo(x, y + h);
        ctx.lineTo(x, y);
        ctx.closePath();
        ctx.fillStyle = "red";
        ctx.fill();
    }
    manualrect(0, 0, 100, 100);
&lt;/script&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We end up in the same place, but it takes a bit more work and explicit instruction to get&amp;nbsp;there.&lt;/p&gt;
&lt;p&gt;So, why would we do this?  For a single, unchanging element &lt;code&gt;canvas&lt;/code&gt; isn&amp;#8217;t necessarily the better move, but given how it acts like a mini-monitor, it becomes a great way to deal with highly complex visual output and user interaction.
Even more importantly, before &lt;code&gt;canvas&lt;/code&gt;, drawing a diagonal line meant stacking a bunch of block-like html elements on a page diagonally and coloring them all your color&amp;#8212;very complex, and we were essentially creating a giant set of building block/pixles&amp;#8212;creating our own &lt;code&gt;canvas&lt;/code&gt;es.
Now, with &lt;code&gt;canvas&lt;/code&gt;, we just tell canvas which pixels to color or to draw a diagonal line from here to there, and it does it&amp;#8212;no building blocks&amp;nbsp;required.&lt;/p&gt;
&lt;p&gt;Also, &lt;a href="https://developer.mozilla.org/en-US/demos/detail/zen-photon-garden/launch"&gt;some pretty amazing stuff&lt;/a&gt; can be made with &lt;code&gt;canvas&lt;/code&gt;.&lt;/p&gt;</summary><category term="hackerschool"></category><category term="pacman"></category><category term="canvas"></category><category term="html5"></category></entry></feed>