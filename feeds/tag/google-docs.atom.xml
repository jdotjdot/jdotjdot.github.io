<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>*JJ</title><link href="https://jdotjdot.github.io/" rel="alternate"></link><link href="https://jdotjdot.github.io/feeds/tag/google-docs.atom.xml" rel="self"></link><id>https://jdotjdot.github.io/</id><updated>2014-06-01T19:11:00-04:00</updated><entry><title>Text-to-Columns in Google Docs Spreadsheets (withÂ Python)</title><link href="https://jdotjdot.github.io/2014/06/text-to-columns-in-google-docs/" rel="alternate"></link><updated>2014-06-01T19:11:00-04:00</updated><author><name>JJ</name></author><id>tag:https://jdotjdot.github.io,2014-06-01:2014/06/text-to-columns-in-google-docs/</id><summary type="html">&lt;p&gt;Despite being an Excel power user, I&amp;#8217;m currently without Excel on my computer for the time being so for some data analysis I had to do I had to make do with Google Docs&amp;#8217; spreadsheets.  While decent, and impressive for a web application, unfortunately it&amp;#8217;s not great for dealing with large amounts of data.  Additionally, it lacks some glaring functionality, particularly a &amp;#8220;Text to Columns&amp;#8221; utility, which is useful for converting in-line a csv-like delimited string of data into individual cells.  While there are a couple of third-party-written add-ins for this, they don&amp;#8217;t work very&amp;nbsp;well.&lt;/p&gt;
&lt;h3&gt;My&amp;nbsp;Fix&lt;/h3&gt;
&lt;p&gt;The best way I found to deal with this involved a couple of manual steps, but saved me a lot of time overall.  The process was effectively the&amp;nbsp;following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Copy cell with data from&amp;nbsp;spreadsheet&lt;/li&gt;
&lt;li&gt;Paste into&amp;nbsp;Python&lt;/li&gt;
&lt;li&gt;Process with Python, returning string ready to be copy/pasted back into Google&amp;nbsp;Docs&lt;/li&gt;
&lt;li&gt;Paste into Google docs in appropriate&amp;nbsp;row&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The biggest challenge here was preparing a string to return that Google Docs would automatically paste into the corresponding columns as appropriate rather than a single cell.  I figured out the right formatting by analyzing exactly what the contents of my clipboard were when I copied multiple columns from the spreadsheet.  It turned out that the big secret was that the data was simply tab-delimited, so all I had to do was generate tab-delimited strings to paste back into Google&amp;nbsp;Docs.&lt;/p&gt;
&lt;p&gt;I used Python specifically in order to take advantage of the excellent &lt;code&gt;csv&lt;/code&gt; built-in module, which is great at parsing all kinds of oddly formatted and delimited&amp;nbsp;files.&lt;/p&gt;
&lt;p&gt;Code you can use would be somewhat as&amp;nbsp;follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;StringIO&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;text_to_columns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;    A function that takes in a single row of delimited data from a spreadsheet, and returns a tab-delimited string response meant to be copied and pasted back into the spreadsheet to be automatically resolved into the appropriate columns.  Note that you will likely have to `print` the return string in order to copy the tabs correctly.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

    &lt;span class="c"&gt;# We need to use StringIO here because csv.reader only reads buffers&lt;/span&gt;
    &lt;span class="n"&gt;reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I copied the appropriate cell from the spreadsheet, pasted into the console like&amp;nbsp;so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;&amp;lt;paste&amp;gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;enter&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Or for multiple lines, for convenience, like&amp;nbsp;so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;#39;&amp;#39;&amp;lt;paste&amp;gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&amp;lt;paste&amp;gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And then I ran them all through the&amp;nbsp;function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;text_to_columns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And then I copied the printed&amp;nbsp;result.&lt;/p&gt;
&lt;p&gt;Note that I used &lt;code&gt;print&lt;/code&gt; rather than simply returning the result because I needed output that correctly rendered the tabs rather than rendering &lt;code&gt;\t&lt;/code&gt;, which is Python&amp;#8217;s in-language way of displaying tabs.  Google Docs would only correctly place the data into separate columns if I had copied actual&amp;nbsp;tabs.&lt;/p&gt;
&lt;h3&gt;Extending this&amp;nbsp;solution&lt;/h3&gt;
&lt;p&gt;The true best way of extending this would be to find something as good as Python&amp;#8217;s &lt;code&gt;csv.reader&lt;/code&gt; in Javascript and building a Google Apps Script with&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Otherwise, there is likely a way to have Python pull the contents of the clipboard and then place the results of the function in the clipboard.  If you know of how to do this, I&amp;#8217;d be interested to hear&amp;nbsp;how.&lt;/p&gt;
&lt;h2&gt;Update&lt;/h2&gt;
&lt;p&gt;I ran across &lt;a href="http://www.macdrifter.com/2011/12/python-and-the-mac-clipboard.html"&gt;this excellent blog post&lt;/a&gt; that describes some useful strategies and libraries for trying to access the clipboard from Python.  I haven&amp;#8217;t tried it yet, but it&amp;#8217;s worth looking into.  Note that if you use &lt;code&gt;pyobjc&lt;/code&gt; it takes a very long time to compile if you install using &lt;code&gt;pip&lt;/code&gt;.&lt;/p&gt;</summary><category term="text-to-columns"></category><category term="google-docs"></category><category term="spreadsheets"></category><category term="python"></category></entry></feed>