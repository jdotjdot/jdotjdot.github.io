<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>*JJ</title><link href="http://blog.jdotjdot.com/" rel="alternate"></link><link href="http://blog.jdotjdot.com/feeds/tag/meta.atom.xml" rel="self"></link><id>http://blog.jdotjdot.com/</id><updated>2014-06-26T02:06:06-04:00</updated><entry><title>A decorator decorator for DjangoÂ views</title><link href="http://blog.jdotjdot.com/2014/06/decorator-decorator/" rel="alternate"></link><updated>2014-06-26T02:06:06-04:00</updated><author><name>JJ</name></author><id>tag:blog.jdotjdot.com,2014-06-26:2014/06/decorator-decorator/</id><summary type="html">&lt;p&gt;Hitting a new level of meta, I just wrote a decorator decorator for Django&amp;nbsp;views. &lt;/p&gt;
&lt;p&gt;The context here is that I needed to write some custom view decorators that gave me access to the &lt;code&gt;request&lt;/code&gt; object, since the normal built-in decorators like &lt;code&gt;user_passes_test&lt;/code&gt; only offer access to the &lt;code&gt;request.user&lt;/code&gt; object.  While doing that, I wanted them to be able to apply to both function- and class-based views without having to use something like the &lt;code&gt;method_decorator&lt;/code&gt; decorator, but still having it know to wrap &lt;code&gt;dispatch&lt;/code&gt; on a class-based view unless otherwise&amp;nbsp;specified.&lt;/p&gt;
&lt;p&gt;Enter the decorator&amp;nbsp;decorator:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;wraps&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;types&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FunctionType&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;class_or_function_view_decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;class_method_to_wrap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;dispatch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;    A decorator that enables other decorators to decorate both function-&lt;/span&gt;
&lt;span class="sd"&gt;    and class-based views.  Can also be used on class-based views&amp;#39; methods.&lt;/span&gt;

&lt;span class="sd"&gt;    Usage:&lt;/span&gt;
&lt;span class="sd"&gt;        @class_or_function_view_decorator()&lt;/span&gt;
&lt;span class="sd"&gt;        def sayhello(f):&lt;/span&gt;
&lt;span class="sd"&gt;           &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;           A decorator that says hello before the function is called.&lt;/span&gt;
&lt;span class="sd"&gt;           When used on a class, it will wrap the class&amp;#39;s `dispatch` method.&lt;/span&gt;

&lt;span class="sd"&gt;           Usage:&lt;/span&gt;
&lt;span class="sd"&gt;                @sayhello&lt;/span&gt;
&lt;span class="sd"&gt;                def saybye():&lt;/span&gt;
&lt;span class="sd"&gt;                    print &amp;#39;bye!&amp;#39;&lt;/span&gt;

&lt;span class="sd"&gt;                @sayhello&lt;/span&gt;
&lt;span class="sd"&gt;                def MyClass(object):&lt;/span&gt;
&lt;span class="sd"&gt;                    def dispatch(self):&lt;/span&gt;
&lt;span class="sd"&gt;                        print &amp;#39;bye!&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;           &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;           @functools.wraps(f)&lt;/span&gt;
&lt;span class="sd"&gt;           def wrapped(*args, **kwargs):&lt;/span&gt;
&lt;span class="sd"&gt;                print &amp;#39;hello!&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;                return f(*args, **kwargs)&lt;/span&gt;
&lt;span class="sd"&gt;            return wrapped&lt;/span&gt;

&lt;span class="sd"&gt;        @class_or_function_view_decorator(&amp;#39;__init__&amp;#39;)&lt;/span&gt;
&lt;span class="sd"&gt;        def saybye(f):&lt;/span&gt;
&lt;span class="sd"&gt;            &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;            When this decorator is used on a class, it will wrap the class&amp;#39;s `__init__` method,&lt;/span&gt;
&lt;span class="sd"&gt;            unlike the previous example which wrapped `dispatch`.&lt;/span&gt;
&lt;span class="sd"&gt;            &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;            @functools.wraps(f)&lt;/span&gt;
&lt;span class="sd"&gt;            def wrapped(*args, **kwargs):&lt;/span&gt;
&lt;span class="sd"&gt;                x = f(*args, **kwargs)&lt;/span&gt;
&lt;span class="sd"&gt;                print &amp;#39;bye!&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;                return x&lt;/span&gt;
&lt;span class="sd"&gt;            return wrapped&lt;/span&gt;

&lt;span class="sd"&gt;    This decorator is used to decorate a view decorator to enable it to be used on&lt;/span&gt;
&lt;span class="sd"&gt;    function-based views or on class-based views.  If the resulting decorator is used on class-based views, you can&lt;/span&gt;
&lt;span class="sd"&gt;    choose which method of the class it will decorate, defaulting to &amp;#39;dispatch&amp;#39; if not provided.&lt;/span&gt;
&lt;span class="sd"&gt;    If used on function-based views, the resulting decorator works as normal.&lt;/span&gt;

&lt;span class="sd"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;outside_wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nd"&gt;@wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapped&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_be_wrapped&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_be_wrapped&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;FunctionType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_be_wrapped&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="nb"&gt;setattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_be_wrapped&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;class_method_to_wrap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_be_wrapped&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;class_method_to_wrap&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;to_be_wrapped&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapped&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;outside_wrapper&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In short, this allows me to create a single decorator that can be used anywhere, like&amp;nbsp;so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@class_or_function_view_decorator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;request_passes_test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test_func&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;login_url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Decorator for views that checks that the session passes the given test,&lt;/span&gt;
&lt;span class="sd"&gt;    redirecting to the log-in page if necessary. The test should be a callable&lt;/span&gt;
&lt;span class="sd"&gt;    that takes the request object and returns True if the test passes.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;view_func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nd"&gt;@wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;view_func&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;assigned&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;available_attrs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;view_func&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_wrapped_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;test_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;view_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;login_url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;login_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;PermissionDenied&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_wrapped_view&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;decorator&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="django"></category><category term="python"></category><category term="decorators"></category><category term="meta"></category><category term="down-the-rabbit-hole"></category></entry></feed>